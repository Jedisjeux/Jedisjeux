<?php
namespace JDJ\CollectionBundle\Repository;
use Doctrine\Common\Util\Debug;
use JDJ\CoreBundle\Entity\EntityRepository;
use JDJ\JeuBundle\Entity\Jeu;
use JDJ\UserBundle\Entity\User;

/**
 * BlogRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserGameAttributeRepository extends EntityRepository
{

    /**
     * This function returns the UserGameAttribute
     *
     * @param Jeu $game
     * @param User $user
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findOneUserGameAttribute(Jeu $game, User $user)
    {
        $queryBuilder = $this->createQueryBuilder('u')
            ->andWhere('u.jeu = :game')
            ->andWhere('u.user = :user')
            ->setParameter('game', $game)
            ->setParameter('user', $user);

        $result = $queryBuilder->getQuery()->getOneOrNullResult();

        return $result;

    }

    /**
     * This function returns the favorites
     *
     * @param User $user
     * @return array
     */
    public function findFavorites(User $user)
    {
        $queryBuilder = $this->createQueryBuilder('u')
            ->andWhere('u.user = :user')
            ->andWhere('u.favorite = 1')
            ->setParameter('user', $user);

        $result = $this->getPaginator($queryBuilder);

        return $result;

    }

    /**
     * This function returns the wanted
     *
     * @param User $user
     * @return array
     */
    public function findWanted(User $user)
    {
        $queryBuilder = $this->createQueryBuilder('u')
            ->andWhere('u.user = :user')
            ->andWhere('u.wanted = 1')
            ->setParameter('user', $user);

        $result = $this->getPaginator($queryBuilder);

        return $result;

    }

    /**
     * This function returns the owned
     *
     * @param User $user
     * @return array
     */
    public function findOwned(User $user)
    {
        $queryBuilder = $this->createQueryBuilder('u')
            ->andWhere('u.user = :user')
            ->andWhere('u.owned = 1')
            ->setParameter('user', $user);

        $result = $this->getPaginator($queryBuilder);

        return $result;

    }

    /**
     * This function returns the played
     *
     * @param User $user
     * @return array
     */
    public function findPlayed(User $user)
    {
        $queryBuilder = $this->createQueryBuilder('u')
            ->andWhere('u.user = :user')
            ->andWhere('u.played = 1')
            ->setParameter('user', $user);

        $result = $this->getPaginator($queryBuilder);

        return $result;

    }


}