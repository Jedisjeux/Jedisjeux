<?php

namespace JDJ\JediZoneBundle\Repository;

use AppBundle\Entity\Product;
use JDJ\CoreBundle\Entity\EntityRepository;
use JDJ\JediZoneBundle\Entity\Notification;
use JDJ\UserBundle\Entity\User;
use Sylius\Component\Product\Model\ProductInterface;


/**
 * NotificationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NotificationRepository extends EntityRepository
{

    /**
     * This function persist the notification
     *
     * @param Notification $notification
     */
    public function saveNotification(Notification $notification)
    {
        //persist the notification
        $this->_em->persist($notification);
        $this->_em->flush();
    }


    /**
     * This function return a the list of notification from the critera list
     *
     * @param User $user
     * @param $status
     * @return array
     */
    public function getNotificationsFromCriteria(User $user, $status = null, $notificationType = null)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb
            ->select('n')
            ->from($this->_entityName, 'n')
            ->join('n.activity', "a")
            ->join('a.jeu', 'j')
            ->where('n.user = :user')
            ->setParameter('user', $user)

            //If the game is published and the notification is read
            //Don't display the notification
            ->andWhere('NOT (j.status = :statusPublished AND n.isRead = 1)')
            ->setParameter('statusPublished', Product::PUBLISHED)

            //Most recent first
            ->orderBy('n.id', "DESC");

        if ($status) {
            $qb
                ->andWhere('j.status = :status')
                ->setParameter('status', $status);
        }
        if ($notificationType) {
            $qb
                ->andWhere('a.' . $notificationType . ' NOT NULL');
        }

        return $qb->getQuery()->getResult();
    }
}
