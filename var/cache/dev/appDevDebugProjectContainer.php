<?php

use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;

/**
 * appDevDebugProjectContainer.
 *
 * This class has been auto-generated
 * by the Symfony Dependency Injection Component.
 */
class appDevDebugProjectContainer extends Container
{
    private $parameters;
    private $targetDirs = array();

    /**
     * Constructor.
     */
    public function __construct()
    {
        $dir = __DIR__;
        for ($i = 1; $i <= 5; ++$i) {
            $this->targetDirs[$i] = $dir = dirname($dir);
        }
        $this->parameters = $this->getDefaultParameters();

        $this->services = array();
        $this->methodMap = array(
            'annotation_reader' => 'getAnnotationReaderService',
            'annotations.reader' => 'getAnnotations_ReaderService',
            'app.block.blockquote' => 'getApp_Block_BlockquoteService',
            'app.block.single_image' => 'getApp_Block_SingleImageService',
            'app.calculator.product_count_by_person' => 'getApp_Calculator_ProductCountByPersonService',
            'app.calculator.product_count_by_taxon' => 'getApp_Calculator_ProductCountByTaxonService',
            'app.calculator.topic_count_by_taxon' => 'getApp_Calculator_TopicCountByTaxonService',
            'app.context.customer' => 'getApp_Context_CustomerService',
            'app.controller.article' => 'getApp_Controller_ArticleService',
            'app.controller.article_content' => 'getApp_Controller_ArticleContentService',
            'app.controller.article_image' => 'getApp_Controller_ArticleImageService',
            'app.controller.article_review' => 'getApp_Controller_ArticleReviewService',
            'app.controller.avatar' => 'getApp_Controller_AvatarService',
            'app.controller.block' => 'getApp_Controller_BlockService',
            'app.controller.block_image' => 'getApp_Controller_BlockImageService',
            'app.controller.blockquote_block' => 'getApp_Controller_BlockquoteBlockService',
            'app.controller.contact_request' => 'getApp_Controller_ContactRequestService',
            'app.controller.dealer' => 'getApp_Controller_DealerService',
            'app.controller.dealer_image' => 'getApp_Controller_DealerImageService',
            'app.controller.dealer_price' => 'getApp_Controller_DealerPriceService',
            'app.controller.form' => 'getApp_Controller_FormService',
            'app.controller.game_play' => 'getApp_Controller_GamePlayService',
            'app.controller.game_play_image' => 'getApp_Controller_GamePlayImageService',
            'app.controller.left_image_block' => 'getApp_Controller_LeftImageBlockService',
            'app.controller.not_found_page' => 'getApp_Controller_NotFoundPageService',
            'app.controller.notification' => 'getApp_Controller_NotificationService',
            'app.controller.person' => 'getApp_Controller_PersonService',
            'app.controller.person_image' => 'getApp_Controller_PersonImageService',
            'app.controller.player' => 'getApp_Controller_PlayerService',
            'app.controller.post' => 'getApp_Controller_PostService',
            'app.controller.price_list' => 'getApp_Controller_PriceListService',
            'app.controller.product_barcode' => 'getApp_Controller_ProductBarcodeService',
            'app.controller.product_list' => 'getApp_Controller_ProductListService',
            'app.controller.product_list_item' => 'getApp_Controller_ProductListItemService',
            'app.controller.product_variant_image' => 'getApp_Controller_ProductVariantImageService',
            'app.controller.pub_banner' => 'getApp_Controller_PubBannerService',
            'app.controller.redirection' => 'getApp_Controller_RedirectionService',
            'app.controller.right_image_block' => 'getApp_Controller_RightImageBlockService',
            'app.controller.search' => 'getApp_Controller_SearchService',
            'app.controller.single_image_block' => 'getApp_Controller_SingleImageBlockService',
            'app.controller.slide_show_block' => 'getApp_Controller_SlideShowBlockService',
            'app.controller.string_block' => 'getApp_Controller_StringBlockService',
            'app.controller.top_image_block' => 'getApp_Controller_TopImageBlockService',
            'app.controller.topic' => 'getApp_Controller_TopicService',
            'app.controller.well_image_block' => 'getApp_Controller_WellImageBlockService',
            'app.factory.article' => 'getApp_Factory_ArticleService',
            'app.factory.article_content' => 'getApp_Factory_ArticleContentService',
            'app.factory.article_image' => 'getApp_Factory_ArticleImageService',
            'app.factory.article_review' => 'getApp_Factory_ArticleReviewService',
            'app.factory.avatar' => 'getApp_Factory_AvatarService',
            'app.factory.block' => 'getApp_Factory_BlockService',
            'app.factory.block_image' => 'getApp_Factory_BlockImageService',
            'app.factory.blockquote_block' => 'getApp_Factory_BlockquoteBlockService',
            'app.factory.contact_request' => 'getApp_Factory_ContactRequestService',
            'app.factory.dealer' => 'getApp_Factory_DealerService',
            'app.factory.dealer_image' => 'getApp_Factory_DealerImageService',
            'app.factory.dealer_price' => 'getApp_Factory_DealerPriceService',
            'app.factory.game_play' => 'getApp_Factory_GamePlayService',
            'app.factory.game_play_image' => 'getApp_Factory_GamePlayImageService',
            'app.factory.left_image_block' => 'getApp_Factory_LeftImageBlockService',
            'app.factory.not_found_page' => 'getApp_Factory_NotFoundPageService',
            'app.factory.notification' => 'getApp_Factory_NotificationService',
            'app.factory.person' => 'getApp_Factory_PersonService',
            'app.factory.person_image' => 'getApp_Factory_PersonImageService',
            'app.factory.player' => 'getApp_Factory_PlayerService',
            'app.factory.post' => 'getApp_Factory_PostService',
            'app.factory.price_list' => 'getApp_Factory_PriceListService',
            'app.factory.product_barcode' => 'getApp_Factory_ProductBarcodeService',
            'app.factory.product_list' => 'getApp_Factory_ProductListService',
            'app.factory.product_list_item' => 'getApp_Factory_ProductListItemService',
            'app.factory.product_variant_image' => 'getApp_Factory_ProductVariantImageService',
            'app.factory.pub_banner' => 'getApp_Factory_PubBannerService',
            'app.factory.redirection' => 'getApp_Factory_RedirectionService',
            'app.factory.right_image_block' => 'getApp_Factory_RightImageBlockService',
            'app.factory.single_image_block' => 'getApp_Factory_SingleImageBlockService',
            'app.factory.slide_show_block' => 'getApp_Factory_SlideShowBlockService',
            'app.factory.string_block' => 'getApp_Factory_StringBlockService',
            'app.factory.top_image_block' => 'getApp_Factory_TopImageBlockService',
            'app.factory.topic' => 'getApp_Factory_TopicService',
            'app.factory.well_image_block' => 'getApp_Factory_WellImageBlockService',
            'app.form.filter.article' => 'getApp_Form_Filter_ArticleService',
            'app.form.filter.product' => 'getApp_Form_Filter_ProductService',
            'app.form.filter.query' => 'getApp_Form_Filter_QueryService',
            'app.form.type.article' => 'getApp_Form_Type_ArticleService',
            'app.form.type.dealer' => 'getApp_Form_Type_DealerService',
            'app.form.type.game_rate' => 'getApp_Form_Type_GameRateService',
            'app.form.type.post' => 'getApp_Form_Type_PostService',
            'app.form.type.topic' => 'getApp_Form_Type_TopicService',
            'app.google_analytics.client' => 'getApp_GoogleAnalytics_ClientService',
            'app.google_analytics.page_views' => 'getApp_GoogleAnalytics_PageViewsService',
            'app.notification_manager.article' => 'getApp_NotificationManager_ArticleService',
            'app.notification_manager.product' => 'getApp_NotificationManager_ProductService',
            'app.publication_manager.article' => 'getApp_PublicationManager_ArticleService',
            'app.repository.article' => 'getApp_Repository_ArticleService',
            'app.repository.article_content' => 'getApp_Repository_ArticleContentService',
            'app.repository.article_image' => 'getApp_Repository_ArticleImageService',
            'app.repository.article_review' => 'getApp_Repository_ArticleReviewService',
            'app.repository.avatar' => 'getApp_Repository_AvatarService',
            'app.repository.block' => 'getApp_Repository_BlockService',
            'app.repository.block_image' => 'getApp_Repository_BlockImageService',
            'app.repository.blockquote_block' => 'getApp_Repository_BlockquoteBlockService',
            'app.repository.contact_request' => 'getApp_Repository_ContactRequestService',
            'app.repository.dealer' => 'getApp_Repository_DealerService',
            'app.repository.dealer_image' => 'getApp_Repository_DealerImageService',
            'app.repository.dealer_price' => 'getApp_Repository_DealerPriceService',
            'app.repository.game_play' => 'getApp_Repository_GamePlayService',
            'app.repository.game_play_image' => 'getApp_Repository_GamePlayImageService',
            'app.repository.left_image_block' => 'getApp_Repository_LeftImageBlockService',
            'app.repository.not_found_page' => 'getApp_Repository_NotFoundPageService',
            'app.repository.notification' => 'getApp_Repository_NotificationService',
            'app.repository.person' => 'getApp_Repository_PersonService',
            'app.repository.person_image' => 'getApp_Repository_PersonImageService',
            'app.repository.player' => 'getApp_Repository_PlayerService',
            'app.repository.post' => 'getApp_Repository_PostService',
            'app.repository.price_list' => 'getApp_Repository_PriceListService',
            'app.repository.product_barcode' => 'getApp_Repository_ProductBarcodeService',
            'app.repository.product_list' => 'getApp_Repository_ProductListService',
            'app.repository.product_list_item' => 'getApp_Repository_ProductListItemService',
            'app.repository.product_variant_image' => 'getApp_Repository_ProductVariantImageService',
            'app.repository.pub_banner' => 'getApp_Repository_PubBannerService',
            'app.repository.redirection' => 'getApp_Repository_RedirectionService',
            'app.repository.right_image_block' => 'getApp_Repository_RightImageBlockService',
            'app.repository.single_image_block' => 'getApp_Repository_SingleImageBlockService',
            'app.repository.slide_show_block' => 'getApp_Repository_SlideShowBlockService',
            'app.repository.string_block' => 'getApp_Repository_StringBlockService',
            'app.repository.top_image_block' => 'getApp_Repository_TopImageBlockService',
            'app.repository.topic' => 'getApp_Repository_TopicService',
            'app.repository.well_image_block' => 'getApp_Repository_WellImageBlockService',
            'app.resource.article_content.doctrine.odm.phpcr.event_listener.name_filter' => 'getApp_Resource_ArticleContent_Doctrine_Odm_Phpcr_EventListener_NameFilterService',
            'app.resource.article_content.doctrine.odm.phpcr.event_listener.name_resolver' => 'getApp_Resource_ArticleContent_Doctrine_Odm_Phpcr_EventListener_NameResolverService',
            'app.resource.blockquote_block.doctrine.odm.phpcr.event_listener.name_filter' => 'getApp_Resource_BlockquoteBlock_Doctrine_Odm_Phpcr_EventListener_NameFilterService',
            'app.resource.blockquote_block.doctrine.odm.phpcr.event_listener.name_resolver' => 'getApp_Resource_BlockquoteBlock_Doctrine_Odm_Phpcr_EventListener_NameResolverService',
            'app.resource.left_image_block.doctrine.odm.phpcr.event_listener.name_filter' => 'getApp_Resource_LeftImageBlock_Doctrine_Odm_Phpcr_EventListener_NameFilterService',
            'app.resource.left_image_block.doctrine.odm.phpcr.event_listener.name_resolver' => 'getApp_Resource_LeftImageBlock_Doctrine_Odm_Phpcr_EventListener_NameResolverService',
            'app.resource.right_image_block.doctrine.odm.phpcr.event_listener.name_filter' => 'getApp_Resource_RightImageBlock_Doctrine_Odm_Phpcr_EventListener_NameFilterService',
            'app.resource.right_image_block.doctrine.odm.phpcr.event_listener.name_resolver' => 'getApp_Resource_RightImageBlock_Doctrine_Odm_Phpcr_EventListener_NameResolverService',
            'app.resource.single_image_block.doctrine.odm.phpcr.event_listener.name_filter' => 'getApp_Resource_SingleImageBlock_Doctrine_Odm_Phpcr_EventListener_NameFilterService',
            'app.resource.single_image_block.doctrine.odm.phpcr.event_listener.name_resolver' => 'getApp_Resource_SingleImageBlock_Doctrine_Odm_Phpcr_EventListener_NameResolverService',
            'app.resource.string_block.doctrine.odm.phpcr.event_listener.name_filter' => 'getApp_Resource_StringBlock_Doctrine_Odm_Phpcr_EventListener_NameFilterService',
            'app.resource.string_block.doctrine.odm.phpcr.event_listener.name_resolver' => 'getApp_Resource_StringBlock_Doctrine_Odm_Phpcr_EventListener_NameResolverService',
            'app.resource.top_image_block.doctrine.odm.phpcr.event_listener.name_filter' => 'getApp_Resource_TopImageBlock_Doctrine_Odm_Phpcr_EventListener_NameFilterService',
            'app.resource.top_image_block.doctrine.odm.phpcr.event_listener.name_resolver' => 'getApp_Resource_TopImageBlock_Doctrine_Odm_Phpcr_EventListener_NameResolverService',
            'app.resource.well_image_block.doctrine.odm.phpcr.event_listener.name_filter' => 'getApp_Resource_WellImageBlock_Doctrine_Odm_Phpcr_EventListener_NameFilterService',
            'app.resource.well_image_block.doctrine.odm.phpcr.event_listener.name_resolver' => 'getApp_Resource_WellImageBlock_Doctrine_Odm_Phpcr_EventListener_NameResolverService',
            'app.security.api_entry_point' => 'getApp_Security_ApiEntryPointService',
            'app.serializer.liip_serializer_handler' => 'getApp_Serializer_LiipSerializerHandlerService',
            'app.subscriber.add_topic_follower' => 'getApp_Subscriber_AddTopicFollowerService',
            'app.subscriber.calculate_post_count_by_topic' => 'getApp_Subscriber_CalculatePostCountByTopicService',
            'app.subscriber.calculate_product_count_by_person' => 'getApp_Subscriber_CalculateProductCountByPersonService',
            'app.subscriber.calculate_product_count_by_taxon' => 'getApp_Subscriber_CalculateProductCountByTaxonService',
            'app.subscriber.calculate_topic_count_by_taxon' => 'getApp_Subscriber_CalculateTopicCountByTaxonService',
            'app.subscriber.create_topic_for_article' => 'getApp_Subscriber_CreateTopicForArticleService',
            'app.subscriber.create_topic_for_game_play' => 'getApp_Subscriber_CreateTopicForGamePlayService',
            'app.subscriber.create_topic_notification' => 'getApp_Subscriber_CreateTopicNotificationService',
            'app.subscriber.load_customer_element_object' => 'getApp_Subscriber_LoadCustomerElementObjectService',
            'app.subscriber.send_contact_email' => 'getApp_Subscriber_SendContactEmailService',
            'app.subscriber.send_registration_email' => 'getApp_Subscriber_SendRegistrationEmailService',
            'app.text.filter.bbcode2html' => 'getApp_Text_Filter_Bbcode2htmlService',
            'app.updater.post_count_by_topic' => 'getApp_Updater_PostCountByTopicService',
            'app.updater.product_count_by_person' => 'getApp_Updater_ProductCountByPersonService',
            'app.updater.product_count_by_taxon' => 'getApp_Updater_ProductCountByTaxonService',
            'app.updater.topic_count_by_taxon' => 'getApp_Updater_TopicCountByTaxonService',
            'assetic.asset_factory' => 'getAssetic_AssetFactoryService',
            'assetic.asset_manager' => 'getAssetic_AssetManagerService',
            'assetic.controller' => 'getAssetic_ControllerService',
            'assetic.filter_manager' => 'getAssetic_FilterManagerService',
            'assetic.request_listener' => 'getAssetic_RequestListenerService',
            'assets._version__default' => 'getAssets_VersionDefaultService',
            'assets.context' => 'getAssets_ContextService',
            'assets.packages' => 'getAssets_PackagesService',
            'bazinga_hateoas.expression_language' => 'getBazingaHateoas_ExpressionLanguageService',
            'cache.annotations' => 'getCache_AnnotationsService',
            'cache.app' => 'getCache_AppService',
            'cache.default_clearer' => 'getCache_DefaultClearerService',
            'cache.system' => 'getCache_SystemService',
            'cache_clearer' => 'getCacheClearerService',
            'cache_warmer' => 'getCacheWarmerService',
            'cmf.block.action' => 'getCmf_Block_ActionService',
            'cmf.block.container' => 'getCmf_Block_ContainerService',
            'cmf.block.reference' => 'getCmf_Block_ReferenceService',
            'cmf.block.rss_controller' => 'getCmf_Block_RssControllerService',
            'cmf.block.service' => 'getCmf_Block_ServiceService',
            'cmf.block.simple' => 'getCmf_Block_SimpleService',
            'cmf.block.slideshow' => 'getCmf_Block_SlideshowService',
            'cmf.block.string' => 'getCmf_Block_StringService',
            'cmf_block.initializer' => 'getCmfBlock_InitializerService',
            'cmf_block.templating.helper.block' => 'getCmfBlock_Templating_Helper_BlockService',
            'cmf_block.templating.helper.embed_blocks_parser' => 'getCmfBlock_Templating_Helper_EmbedBlocksParserService',
            'cmf_block.twig.embed_extension' => 'getCmfBlock_Twig_EmbedExtensionService',
            'cmf_core.form.type.checkbox_url_label' => 'getCmfCore_Form_Type_CheckboxUrlLabelService',
            'cmf_core.publish_workflow.access_decision_manager' => 'getCmfCore_PublishWorkflow_AccessDecisionManagerService',
            'cmf_core.publish_workflow.checker.default' => 'getCmfCore_PublishWorkflow_Checker_DefaultService',
            'cmf_core.publish_workflow.request_listener' => 'getCmfCore_PublishWorkflow_RequestListenerService',
            'cmf_media.browser_file_helper' => 'getCmfMedia_BrowserFileHelperService',
            'cmf_media.file_controller' => 'getCmfMedia_FileControllerService',
            'cmf_media.form.type.file' => 'getCmfMedia_Form_Type_FileService',
            'cmf_media.form.type.image' => 'getCmfMedia_Form_Type_ImageService',
            'cmf_media.image_controller' => 'getCmfMedia_ImageControllerService',
            'cmf_media.initializer' => 'getCmfMedia_InitializerService',
            'cmf_media.liip_imagine.doctrine_phpcr.binary.loader' => 'getCmfMedia_LiipImagine_DoctrinePhpcr_Binary_LoaderService',
            'cmf_media.persistence.phpcr.manager' => 'getCmfMedia_Persistence_Phpcr_ManagerService',
            'cmf_media.persistence.phpcr.subscriber.image_dimensions' => 'getCmfMedia_Persistence_Phpcr_Subscriber_ImageDimensionsService',
            'cmf_media.persistence.phpcr.subscriber.imagine_cache' => 'getCmfMedia_Persistence_Phpcr_Subscriber_ImagineCacheService',
            'cmf_media.persistence.phpcr.subscriber.stream_rewind' => 'getCmfMedia_Persistence_Phpcr_Subscriber_StreamRewindService',
            'cmf_media.persistence.phpcr.upload_file_helper' => 'getCmfMedia_Persistence_Phpcr_UploadFileHelperService',
            'cmf_media.persistence.phpcr.upload_image_helper' => 'getCmfMedia_Persistence_Phpcr_UploadImageHelperService',
            'cmf_media.serializer.handler' => 'getCmfMedia_Serializer_HandlerService',
            'cmf_media.upload_editor_helper.ckeditor' => 'getCmfMedia_UploadEditorHelper_CkeditorService',
            'cmf_media.upload_editor_helper.default' => 'getCmfMedia_UploadEditorHelper_DefaultService',
            'cmf_routing.dynamic_router' => 'getCmfRouting_DynamicRouterService',
            'cmf_routing.enhancer.route_content' => 'getCmfRouting_Enhancer_RouteContentService',
            'cmf_routing.final_matcher' => 'getCmfRouting_FinalMatcherService',
            'cmf_routing.generator' => 'getCmfRouting_GeneratorService',
            'cmf_routing.initializer' => 'getCmfRouting_InitializerService',
            'cmf_routing.nested_matcher' => 'getCmfRouting_NestedMatcherService',
            'cmf_routing.persistence.doctrine.route_condition_metadata_listener' => 'getCmfRouting_Persistence_Doctrine_RouteConditionMetadataListenerService',
            'cmf_routing.phpcr_candidates_prefix' => 'getCmfRouting_PhpcrCandidatesPrefixService',
            'cmf_routing.phpcr_content_repository' => 'getCmfRouting_PhpcrContentRepositoryService',
            'cmf_routing.phpcr_route_provider' => 'getCmfRouting_PhpcrRouteProviderService',
            'cmf_routing.phpcrodm_route_idprefix_listener' => 'getCmfRouting_PhpcrodmRouteIdprefixListenerService',
            'cmf_routing.redirect_controller' => 'getCmfRouting_RedirectControllerService',
            'cmf_routing.route_type_form_type' => 'getCmfRouting_RouteTypeFormTypeService',
            'cmf_routing.router' => 'getCmfRouting_RouterService',
            'cmf_routing.validator.route_defaults' => 'getCmfRouting_Validator_RouteDefaultsService',
            'config_cache_factory' => 'getConfigCacheFactoryService',
            'controller_name_converter' => 'getControllerNameConverterService',
            'data_collector.dump' => 'getDataCollector_DumpService',
            'data_collector.form' => 'getDataCollector_FormService',
            'data_collector.form.extractor' => 'getDataCollector_Form_ExtractorService',
            'data_collector.request' => 'getDataCollector_RequestService',
            'data_collector.router' => 'getDataCollector_RouterService',
            'data_collector.translation' => 'getDataCollector_TranslationService',
            'debug.argument_resolver' => 'getDebug_ArgumentResolverService',
            'debug.controller_resolver' => 'getDebug_ControllerResolverService',
            'debug.debug_handlers_listener' => 'getDebug_DebugHandlersListenerService',
            'debug.dump_listener' => 'getDebug_DumpListenerService',
            'debug.event_dispatcher' => 'getDebug_EventDispatcherService',
            'debug.file_link_formatter' => 'getDebug_FileLinkFormatterService',
            'debug.log_processor' => 'getDebug_LogProcessorService',
            'debug.security.access.decision_manager' => 'getDebug_Security_Access_DecisionManagerService',
            'debug.stopwatch' => 'getDebug_StopwatchService',
            'doctrine' => 'getDoctrineService',
            'doctrine.dbal.connection_factory' => 'getDoctrine_Dbal_ConnectionFactoryService',
            'doctrine.dbal.default_connection' => 'getDoctrine_Dbal_DefaultConnectionService',
            'doctrine.dbal.logger.profiling.default' => 'getDoctrine_Dbal_Logger_Profiling_DefaultService',
            'doctrine.orm.default_entity_listener_resolver' => 'getDoctrine_Orm_DefaultEntityListenerResolverService',
            'doctrine.orm.default_entity_manager' => 'getDoctrine_Orm_DefaultEntityManagerService',
            'doctrine.orm.default_entity_manager.property_info_extractor' => 'getDoctrine_Orm_DefaultEntityManager_PropertyInfoExtractorService',
            'doctrine.orm.default_listeners.attach_entity_listeners' => 'getDoctrine_Orm_DefaultListeners_AttachEntityListenersService',
            'doctrine.orm.default_manager_configurator' => 'getDoctrine_Orm_DefaultManagerConfiguratorService',
            'doctrine.orm.validator.unique' => 'getDoctrine_Orm_Validator_UniqueService',
            'doctrine.orm.validator_initializer' => 'getDoctrine_Orm_ValidatorInitializerService',
            'doctrine_cache.providers.doctrine.orm.default_metadata_cache' => 'getDoctrineCache_Providers_Doctrine_Orm_DefaultMetadataCacheService',
            'doctrine_cache.providers.doctrine.orm.default_query_cache' => 'getDoctrineCache_Providers_Doctrine_Orm_DefaultQueryCacheService',
            'doctrine_cache.providers.doctrine.orm.default_result_cache' => 'getDoctrineCache_Providers_Doctrine_Orm_DefaultResultCacheService',
            'doctrine_cache.providers.phpcr_meta' => 'getDoctrineCache_Providers_PhpcrMetaService',
            'doctrine_cache.providers.phpcr_nodes' => 'getDoctrineCache_Providers_PhpcrNodesService',
            'doctrine_phpcr' => 'getDoctrinePhpcrService',
            'doctrine_phpcr.admin.default_session' => 'getDoctrinePhpcr_Admin_DefaultSessionService',
            'doctrine_phpcr.admin.jackalope.repository.default' => 'getDoctrinePhpcr_Admin_Jackalope_Repository_DefaultService',
            'doctrine_phpcr.console_dumper' => 'getDoctrinePhpcr_ConsoleDumperService',
            'doctrine_phpcr.default_session' => 'getDoctrinePhpcr_DefaultSessionService',
            'doctrine_phpcr.initializer_manager' => 'getDoctrinePhpcr_InitializerManagerService',
            'doctrine_phpcr.jackalope.repository.default' => 'getDoctrinePhpcr_Jackalope_Repository_DefaultService',
            'doctrine_phpcr.jackalope.repository.factory.doctrinedbal' => 'getDoctrinePhpcr_Jackalope_Repository_Factory_DoctrinedbalService',
            'doctrine_phpcr.jackalope.repository.factory.jackrabbit' => 'getDoctrinePhpcr_Jackalope_Repository_Factory_JackrabbitService',
            'doctrine_phpcr.jackalope.repository.factory.prismic' => 'getDoctrinePhpcr_Jackalope_Repository_Factory_PrismicService',
            'doctrine_phpcr.jackalope.repository.factory.service.doctrinedbal' => 'getDoctrinePhpcr_Jackalope_Repository_Factory_Service_DoctrinedbalService',
            'doctrine_phpcr.jackalope.repository.factory.service.jackrabbit' => 'getDoctrinePhpcr_Jackalope_Repository_Factory_Service_JackrabbitService',
            'doctrine_phpcr.jackalope.repository.factory.service.prismic' => 'getDoctrinePhpcr_Jackalope_Repository_Factory_Service_PrismicService',
            'doctrine_phpcr.jackalope_doctrine_dbal.schema_listener' => 'getDoctrinePhpcr_JackalopeDoctrineDbal_SchemaListenerService',
            'doctrine_phpcr.odm.default.translation.strategy.attribute' => 'getDoctrinePhpcr_Odm_Default_Translation_Strategy_AttributeService',
            'doctrine_phpcr.odm.default.translation.strategy.child' => 'getDoctrinePhpcr_Odm_Default_Translation_Strategy_ChildService',
            'doctrine_phpcr.odm.default_document_manager' => 'getDoctrinePhpcr_Odm_DefaultDocumentManagerService',
            'doctrine_phpcr.odm.form.type.path' => 'getDoctrinePhpcr_Odm_Form_Type_PathService',
            'doctrine_phpcr.odm.translation.strategy.attribute' => 'getDoctrinePhpcr_Odm_Translation_Strategy_AttributeService',
            'doctrine_phpcr.odm.translation.strategy.child' => 'getDoctrinePhpcr_Odm_Translation_Strategy_ChildService',
            'doctrine_phpcr.odm.validator.valid_phpcr_odm' => 'getDoctrinePhpcr_Odm_Validator_ValidPhpcrOdmService',
            'file_locator' => 'getFileLocatorService',
            'filesystem' => 'getFilesystemService',
            'form.factory' => 'getForm_FactoryService',
            'form.registry' => 'getForm_RegistryService',
            'form.resolved_type_factory' => 'getForm_ResolvedTypeFactoryService',
            'form.type.birthday' => 'getForm_Type_BirthdayService',
            'form.type.button' => 'getForm_Type_ButtonService',
            'form.type.checkbox' => 'getForm_Type_CheckboxService',
            'form.type.choice' => 'getForm_Type_ChoiceService',
            'form.type.collection' => 'getForm_Type_CollectionService',
            'form.type.country' => 'getForm_Type_CountryService',
            'form.type.currency' => 'getForm_Type_CurrencyService',
            'form.type.date' => 'getForm_Type_DateService',
            'form.type.datetime' => 'getForm_Type_DatetimeService',
            'form.type.email' => 'getForm_Type_EmailService',
            'form.type.entity' => 'getForm_Type_EntityService',
            'form.type.file' => 'getForm_Type_FileService',
            'form.type.form' => 'getForm_Type_FormService',
            'form.type.hidden' => 'getForm_Type_HiddenService',
            'form.type.integer' => 'getForm_Type_IntegerService',
            'form.type.language' => 'getForm_Type_LanguageService',
            'form.type.locale' => 'getForm_Type_LocaleService',
            'form.type.money' => 'getForm_Type_MoneyService',
            'form.type.number' => 'getForm_Type_NumberService',
            'form.type.password' => 'getForm_Type_PasswordService',
            'form.type.percent' => 'getForm_Type_PercentService',
            'form.type.phpcr.document' => 'getForm_Type_Phpcr_DocumentService',
            'form.type.phpcr.reference' => 'getForm_Type_Phpcr_ReferenceService',
            'form.type.phpcr_odm.reference_collection' => 'getForm_Type_PhpcrOdm_ReferenceCollectionService',
            'form.type.radio' => 'getForm_Type_RadioService',
            'form.type.range' => 'getForm_Type_RangeService',
            'form.type.repeated' => 'getForm_Type_RepeatedService',
            'form.type.reset' => 'getForm_Type_ResetService',
            'form.type.search' => 'getForm_Type_SearchService',
            'form.type.submit' => 'getForm_Type_SubmitService',
            'form.type.text' => 'getForm_Type_TextService',
            'form.type.textarea' => 'getForm_Type_TextareaService',
            'form.type.time' => 'getForm_Type_TimeService',
            'form.type.timezone' => 'getForm_Type_TimezoneService',
            'form.type.url' => 'getForm_Type_UrlService',
            'form.type_extension.csrf' => 'getForm_TypeExtension_CsrfService',
            'form.type_extension.form.data_collector' => 'getForm_TypeExtension_Form_DataCollectorService',
            'form.type_extension.form.http_foundation' => 'getForm_TypeExtension_Form_HttpFoundationService',
            'form.type_extension.form.validator' => 'getForm_TypeExtension_Form_ValidatorService',
            'form.type_extension.repeated.validator' => 'getForm_TypeExtension_Repeated_ValidatorService',
            'form.type_extension.submit.validator' => 'getForm_TypeExtension_Submit_ValidatorService',
            'form.type_extension.upload.validator' => 'getForm_TypeExtension_Upload_ValidatorService',
            'form.type_guesser.doctrine' => 'getForm_TypeGuesser_DoctrineService',
            'form.type_guesser.doctrine_phpcr' => 'getForm_TypeGuesser_DoctrinePhpcrService',
            'form.type_guesser.validator' => 'getForm_TypeGuesser_ValidatorService',
            'fos_elastica.alias_processor' => 'getFosElastica_AliasProcessorService',
            'fos_elastica.client.default' => 'getFosElastica_Client_DefaultService',
            'fos_elastica.config_manager' => 'getFosElastica_ConfigManagerService',
            'fos_elastica.data_collector' => 'getFosElastica_DataCollectorService',
            'fos_elastica.elastica_to_model_transformer.collection.jedisjeux' => 'getFosElastica_ElasticaToModelTransformer_Collection_JedisjeuxService',
            'fos_elastica.elastica_to_model_transformer.jedisjeux.article' => 'getFosElastica_ElasticaToModelTransformer_Jedisjeux_ArticleService',
            'fos_elastica.elastica_to_model_transformer.jedisjeux.person' => 'getFosElastica_ElasticaToModelTransformer_Jedisjeux_PersonService',
            'fos_elastica.elastica_to_model_transformer.jedisjeux.product' => 'getFosElastica_ElasticaToModelTransformer_Jedisjeux_ProductService',
            'fos_elastica.elastica_to_model_transformer.jedisjeux.taxon' => 'getFosElastica_ElasticaToModelTransformer_Jedisjeux_TaxonService',
            'fos_elastica.elastica_to_model_transformer.jedisjeux.topic' => 'getFosElastica_ElasticaToModelTransformer_Jedisjeux_TopicService',
            'fos_elastica.elastica_to_model_transformer.jedisjeux.user' => 'getFosElastica_ElasticaToModelTransformer_Jedisjeux_UserService',
            'fos_elastica.finder.jedisjeux' => 'getFosElastica_Finder_JedisjeuxService',
            'fos_elastica.finder.jedisjeux.article' => 'getFosElastica_Finder_Jedisjeux_ArticleService',
            'fos_elastica.finder.jedisjeux.person' => 'getFosElastica_Finder_Jedisjeux_PersonService',
            'fos_elastica.finder.jedisjeux.product' => 'getFosElastica_Finder_Jedisjeux_ProductService',
            'fos_elastica.finder.jedisjeux.taxon' => 'getFosElastica_Finder_Jedisjeux_TaxonService',
            'fos_elastica.finder.jedisjeux.topic' => 'getFosElastica_Finder_Jedisjeux_TopicService',
            'fos_elastica.finder.jedisjeux.user' => 'getFosElastica_Finder_Jedisjeux_UserService',
            'fos_elastica.index.jedisjeux' => 'getFosElastica_Index_JedisjeuxService',
            'fos_elastica.index.jedisjeux.article' => 'getFosElastica_Index_Jedisjeux_ArticleService',
            'fos_elastica.index.jedisjeux.person' => 'getFosElastica_Index_Jedisjeux_PersonService',
            'fos_elastica.index.jedisjeux.product' => 'getFosElastica_Index_Jedisjeux_ProductService',
            'fos_elastica.index.jedisjeux.taxon' => 'getFosElastica_Index_Jedisjeux_TaxonService',
            'fos_elastica.index.jedisjeux.topic' => 'getFosElastica_Index_Jedisjeux_TopicService',
            'fos_elastica.index.jedisjeux.user' => 'getFosElastica_Index_Jedisjeux_UserService',
            'fos_elastica.index_manager' => 'getFosElastica_IndexManagerService',
            'fos_elastica.indexable' => 'getFosElastica_IndexableService',
            'fos_elastica.logger' => 'getFosElastica_LoggerService',
            'fos_elastica.manager.orm' => 'getFosElastica_Manager_OrmService',
            'fos_elastica.mapping_builder' => 'getFosElastica_MappingBuilderService',
            'fos_elastica.object_persister.jedisjeux.article' => 'getFosElastica_ObjectPersister_Jedisjeux_ArticleService',
            'fos_elastica.object_persister.jedisjeux.person' => 'getFosElastica_ObjectPersister_Jedisjeux_PersonService',
            'fos_elastica.object_persister.jedisjeux.product' => 'getFosElastica_ObjectPersister_Jedisjeux_ProductService',
            'fos_elastica.object_persister.jedisjeux.taxon' => 'getFosElastica_ObjectPersister_Jedisjeux_TaxonService',
            'fos_elastica.object_persister.jedisjeux.topic' => 'getFosElastica_ObjectPersister_Jedisjeux_TopicService',
            'fos_elastica.object_persister.jedisjeux.user' => 'getFosElastica_ObjectPersister_Jedisjeux_UserService',
            'fos_elastica.paginator.subscriber' => 'getFosElastica_Paginator_SubscriberService',
            'fos_elastica.property_accessor' => 'getFosElastica_PropertyAccessorService',
            'fos_elastica.provider.jedisjeux.article' => 'getFosElastica_Provider_Jedisjeux_ArticleService',
            'fos_elastica.provider.jedisjeux.person' => 'getFosElastica_Provider_Jedisjeux_PersonService',
            'fos_elastica.provider.jedisjeux.product' => 'getFosElastica_Provider_Jedisjeux_ProductService',
            'fos_elastica.provider.jedisjeux.taxon' => 'getFosElastica_Provider_Jedisjeux_TaxonService',
            'fos_elastica.provider.jedisjeux.topic' => 'getFosElastica_Provider_Jedisjeux_TopicService',
            'fos_elastica.provider.jedisjeux.user' => 'getFosElastica_Provider_Jedisjeux_UserService',
            'fos_elastica.provider_registry' => 'getFosElastica_ProviderRegistryService',
            'fos_elastica.resetter' => 'getFosElastica_ResetterService',
            'fos_elastica.slice_fetcher.orm' => 'getFosElastica_SliceFetcher_OrmService',
            'fos_js_routing.controller' => 'getFosJsRouting_ControllerService',
            'fos_js_routing.extractor' => 'getFosJsRouting_ExtractorService',
            'fos_js_routing.serializer' => 'getFosJsRouting_SerializerService',
            'fos_rest.body_listener' => 'getFosRest_BodyListenerService',
            'fos_rest.decoder.json' => 'getFosRest_Decoder_JsonService',
            'fos_rest.decoder.jsontoform' => 'getFosRest_Decoder_JsontoformService',
            'fos_rest.decoder.xml' => 'getFosRest_Decoder_XmlService',
            'fos_rest.decoder_provider' => 'getFosRest_DecoderProviderService',
            'fos_rest.exception_format_negotiator' => 'getFosRest_ExceptionFormatNegotiatorService',
            'fos_rest.format_negotiator' => 'getFosRest_FormatNegotiatorService',
            'fos_rest.inflector.doctrine' => 'getFosRest_Inflector_DoctrineService',
            'fos_rest.normalizer.camel_keys' => 'getFosRest_Normalizer_CamelKeysService',
            'fos_rest.normalizer.camel_keys_with_leading_underscore' => 'getFosRest_Normalizer_CamelKeysWithLeadingUnderscoreService',
            'fos_rest.request.param_fetcher' => 'getFosRest_Request_ParamFetcherService',
            'fos_rest.request.param_fetcher.reader' => 'getFosRest_Request_ParamFetcher_ReaderService',
            'fos_rest.routing.loader.controller' => 'getFosRest_Routing_Loader_ControllerService',
            'fos_rest.routing.loader.processor' => 'getFosRest_Routing_Loader_ProcessorService',
            'fos_rest.routing.loader.reader.action' => 'getFosRest_Routing_Loader_Reader_ActionService',
            'fos_rest.routing.loader.reader.controller' => 'getFosRest_Routing_Loader_Reader_ControllerService',
            'fos_rest.routing.loader.xml_collection' => 'getFosRest_Routing_Loader_XmlCollectionService',
            'fos_rest.routing.loader.yaml_collection' => 'getFosRest_Routing_Loader_YamlCollectionService',
            'fos_rest.serializer' => 'getFosRest_SerializerService',
            'fos_rest.serializer.exception_wrapper_normalizer' => 'getFosRest_Serializer_ExceptionWrapperNormalizerService',
            'fos_rest.serializer.exception_wrapper_serialize_handler' => 'getFosRest_Serializer_ExceptionWrapperSerializeHandlerService',
            'fos_rest.view.exception_wrapper_handler' => 'getFosRest_View_ExceptionWrapperHandlerService',
            'fos_rest.view_handler' => 'getFosRest_ViewHandlerService',
            'fos_rest.violation_formatter' => 'getFosRest_ViolationFormatterService',
            'fragment.handler' => 'getFragment_HandlerService',
            'fragment.listener' => 'getFragment_ListenerService',
            'fragment.renderer.esi' => 'getFragment_Renderer_EsiService',
            'fragment.renderer.hinclude' => 'getFragment_Renderer_HincludeService',
            'fragment.renderer.inline' => 'getFragment_Renderer_InlineService',
            'fragment.renderer.ssi' => 'getFragment_Renderer_SsiService',
            'hateoas.configuration.provider.resolver' => 'getHateoas_Configuration_Provider_ResolverService',
            'hateoas.configuration.relations_repository' => 'getHateoas_Configuration_RelationsRepositoryService',
            'hateoas.embeds_factory' => 'getHateoas_EmbedsFactoryService',
            'hateoas.event_subscriber.json' => 'getHateoas_EventSubscriber_JsonService',
            'hateoas.event_subscriber.xml' => 'getHateoas_EventSubscriber_XmlService',
            'hateoas.expression.evaluator' => 'getHateoas_Expression_EvaluatorService',
            'hateoas.expression.link' => 'getHateoas_Expression_LinkService',
            'hateoas.generator.registry' => 'getHateoas_Generator_RegistryService',
            'hateoas.generator.symfony' => 'getHateoas_Generator_SymfonyService',
            'hateoas.helper.link' => 'getHateoas_Helper_LinkService',
            'hateoas.link_factory' => 'getHateoas_LinkFactoryService',
            'hateoas.links_factory' => 'getHateoas_LinksFactoryService',
            'hateoas.serializer.exclusion_manager' => 'getHateoas_Serializer_ExclusionManagerService',
            'hateoas.twig.link' => 'getHateoas_Twig_LinkService',
            'http_kernel' => 'getHttpKernelService',
            'infinite_form.attachment.form_type' => 'getInfiniteForm_Attachment_FormTypeService',
            'infinite_form.attachment.path_helper' => 'getInfiniteForm_Attachment_PathHelperService',
            'infinite_form.attachment.sanitiser' => 'getInfiniteForm_Attachment_SanitiserService',
            'infinite_form.attachment.streamer' => 'getInfiniteForm_Attachment_StreamerService',
            'infinite_form.attachment.uploader' => 'getInfiniteForm_Attachment_UploaderService',
            'infinite_form.entity_search.transformer_factory' => 'getInfiniteForm_EntitySearch_TransformerFactoryService',
            'infinite_form.entity_search.type' => 'getInfiniteForm_EntitySearch_TypeService',
            'infinite_form.form_type.checkbox_grid_type' => 'getInfiniteForm_FormType_CheckboxGridTypeService',
            'infinite_form.form_type.checkbox_row_type' => 'getInfiniteForm_FormType_CheckboxRowTypeService',
            'infinite_form.form_type.entity_checkbox_grid_type' => 'getInfiniteForm_FormType_EntityCheckboxGridTypeService',
            'infinite_form.polycollection.form_type' => 'getInfiniteForm_Polycollection_FormTypeService',
            'infinite_form.twig_extension' => 'getInfiniteForm_TwigExtensionService',
            'ivory_ck_editor.config_manager' => 'getIvoryCkEditor_ConfigManagerService',
            'ivory_ck_editor.form.type' => 'getIvoryCkEditor_Form_TypeService',
            'ivory_ck_editor.plugin_manager' => 'getIvoryCkEditor_PluginManagerService',
            'ivory_ck_editor.renderer' => 'getIvoryCkEditor_RendererService',
            'ivory_ck_editor.styles_set_manager' => 'getIvoryCkEditor_StylesSetManagerService',
            'ivory_ck_editor.template_manager' => 'getIvoryCkEditor_TemplateManagerService',
            'ivory_ck_editor.twig_extension' => 'getIvoryCkEditor_TwigExtensionService',
            'jms_serializer' => 'getJmsSerializerService',
            'jms_serializer.accessor_strategy' => 'getJmsSerializer_AccessorStrategyService',
            'jms_serializer.array_collection_handler' => 'getJmsSerializer_ArrayCollectionHandlerService',
            'jms_serializer.constraint_violation_handler' => 'getJmsSerializer_ConstraintViolationHandlerService',
            'jms_serializer.datetime_handler' => 'getJmsSerializer_DatetimeHandlerService',
            'jms_serializer.deserialization_context_factory' => 'getJmsSerializer_DeserializationContextFactoryService',
            'jms_serializer.doctrine_proxy_subscriber' => 'getJmsSerializer_DoctrineProxySubscriberService',
            'jms_serializer.expression_evaluator' => 'getJmsSerializer_ExpressionEvaluatorService',
            'jms_serializer.form_error_handler' => 'getJmsSerializer_FormErrorHandlerService',
            'jms_serializer.handler_registry' => 'getJmsSerializer_HandlerRegistryService',
            'jms_serializer.json_deserialization_visitor' => 'getJmsSerializer_JsonDeserializationVisitorService',
            'jms_serializer.json_serialization_visitor' => 'getJmsSerializer_JsonSerializationVisitorService',
            'jms_serializer.metadata.file_locator' => 'getJmsSerializer_Metadata_FileLocatorService',
            'jms_serializer.metadata_driver' => 'getJmsSerializer_MetadataDriverService',
            'jms_serializer.metadata_factory' => 'getJmsSerializer_MetadataFactoryService',
            'jms_serializer.naming_strategy' => 'getJmsSerializer_NamingStrategyService',
            'jms_serializer.object_constructor' => 'getJmsSerializer_ObjectConstructorService',
            'jms_serializer.php_collection_handler' => 'getJmsSerializer_PhpCollectionHandlerService',
            'jms_serializer.serialization_context_factory' => 'getJmsSerializer_SerializationContextFactoryService',
            'jms_serializer.stopwatch_subscriber' => 'getJmsSerializer_StopwatchSubscriberService',
            'jms_serializer.templating.helper.serializer' => 'getJmsSerializer_Templating_Helper_SerializerService',
            'jms_serializer.unserialize_object_constructor' => 'getJmsSerializer_UnserializeObjectConstructorService',
            'jms_serializer.xml_deserialization_visitor' => 'getJmsSerializer_XmlDeserializationVisitorService',
            'jms_serializer.xml_serialization_visitor' => 'getJmsSerializer_XmlSerializationVisitorService',
            'jms_serializer.yaml_serialization_visitor' => 'getJmsSerializer_YamlSerializationVisitorService',
            'jms_translation.config_factory' => 'getJmsTranslation_ConfigFactoryService',
            'jms_translation.file_source_factory' => 'getJmsTranslation_FileSourceFactoryService',
            'jms_translation.loader_manager' => 'getJmsTranslation_LoaderManagerService',
            'jms_translation.twig_extension' => 'getJmsTranslation_TwigExtensionService',
            'jms_translation.updater' => 'getJmsTranslation_UpdaterService',
            'kernel' => 'getKernelService',
            'kernel.class_cache.cache_warmer' => 'getKernel_ClassCache_CacheWarmerService',
            'knp_menu.factory' => 'getKnpMenu_FactoryService',
            'knp_menu.listener.voters' => 'getKnpMenu_Listener_VotersService',
            'knp_menu.matcher' => 'getKnpMenu_MatcherService',
            'knp_menu.menu_provider' => 'getKnpMenu_MenuProviderService',
            'knp_menu.renderer.list' => 'getKnpMenu_Renderer_ListService',
            'knp_menu.renderer.twig' => 'getKnpMenu_Renderer_TwigService',
            'knp_menu.renderer_provider' => 'getKnpMenu_RendererProviderService',
            'knp_menu.voter.router' => 'getKnpMenu_Voter_RouterService',
            'liip_imagine' => 'getLiipImagineService',
            'liip_imagine.binary.loader.default' => 'getLiipImagine_Binary_Loader_DefaultService',
            'liip_imagine.binary.loader.prototype.filesystem' => 'getLiipImagine_Binary_Loader_Prototype_FilesystemService',
            'liip_imagine.binary.loader.prototype.stream' => 'getLiipImagine_Binary_Loader_Prototype_StreamService',
            'liip_imagine.binary.mime_type_guesser' => 'getLiipImagine_Binary_MimeTypeGuesserService',
            'liip_imagine.cache.manager' => 'getLiipImagine_Cache_ManagerService',
            'liip_imagine.cache.resolver.default' => 'getLiipImagine_Cache_Resolver_DefaultService',
            'liip_imagine.cache.resolver.no_cache_web_path' => 'getLiipImagine_Cache_Resolver_NoCacheWebPathService',
            'liip_imagine.cache.signer' => 'getLiipImagine_Cache_SignerService',
            'liip_imagine.controller' => 'getLiipImagine_ControllerService',
            'liip_imagine.data.manager' => 'getLiipImagine_Data_ManagerService',
            'liip_imagine.extension_guesser' => 'getLiipImagine_ExtensionGuesserService',
            'liip_imagine.filter.configuration' => 'getLiipImagine_Filter_ConfigurationService',
            'liip_imagine.filter.loader.auto_rotate' => 'getLiipImagine_Filter_Loader_AutoRotateService',
            'liip_imagine.filter.loader.background' => 'getLiipImagine_Filter_Loader_BackgroundService',
            'liip_imagine.filter.loader.crop' => 'getLiipImagine_Filter_Loader_CropService',
            'liip_imagine.filter.loader.downscale' => 'getLiipImagine_Filter_Loader_DownscaleService',
            'liip_imagine.filter.loader.grayscale' => 'getLiipImagine_Filter_Loader_GrayscaleService',
            'liip_imagine.filter.loader.interlace' => 'getLiipImagine_Filter_Loader_InterlaceService',
            'liip_imagine.filter.loader.paste' => 'getLiipImagine_Filter_Loader_PasteService',
            'liip_imagine.filter.loader.relative_resize' => 'getLiipImagine_Filter_Loader_RelativeResizeService',
            'liip_imagine.filter.loader.resize' => 'getLiipImagine_Filter_Loader_ResizeService',
            'liip_imagine.filter.loader.rotate' => 'getLiipImagine_Filter_Loader_RotateService',
            'liip_imagine.filter.loader.scale' => 'getLiipImagine_Filter_Loader_ScaleService',
            'liip_imagine.filter.loader.strip' => 'getLiipImagine_Filter_Loader_StripService',
            'liip_imagine.filter.loader.thumbnail' => 'getLiipImagine_Filter_Loader_ThumbnailService',
            'liip_imagine.filter.loader.upscale' => 'getLiipImagine_Filter_Loader_UpscaleService',
            'liip_imagine.filter.loader.watermark' => 'getLiipImagine_Filter_Loader_WatermarkService',
            'liip_imagine.filter.manager' => 'getLiipImagine_Filter_ManagerService',
            'liip_imagine.filter.post_processor.jpegoptim' => 'getLiipImagine_Filter_PostProcessor_JpegoptimService',
            'liip_imagine.filter.post_processor.mozjpeg' => 'getLiipImagine_Filter_PostProcessor_MozjpegService',
            'liip_imagine.filter.post_processor.optipng' => 'getLiipImagine_Filter_PostProcessor_OptipngService',
            'liip_imagine.filter.post_processor.pngquant' => 'getLiipImagine_Filter_PostProcessor_PngquantService',
            'liip_imagine.form.type.image' => 'getLiipImagine_Form_Type_ImageService',
            'liip_imagine.mime_type_guesser' => 'getLiipImagine_MimeTypeGuesserService',
            'liip_imagine.templating.helper' => 'getLiipImagine_Templating_HelperService',
            'locale_listener' => 'getLocaleListenerService',
            'logger' => 'getLoggerService',
            'monolog.handler.console' => 'getMonolog_Handler_ConsoleService',
            'monolog.handler.main' => 'getMonolog_Handler_MainService',
            'monolog.handler.null_internal' => 'getMonolog_Handler_NullInternalService',
            'monolog.logger.assetic' => 'getMonolog_Logger_AsseticService',
            'monolog.logger.cache' => 'getMonolog_Logger_CacheService',
            'monolog.logger.doctrine' => 'getMonolog_Logger_DoctrineService',
            'monolog.logger.doctrine_phpcr' => 'getMonolog_Logger_DoctrinePhpcrService',
            'monolog.logger.elastica' => 'getMonolog_Logger_ElasticaService',
            'monolog.logger.event' => 'getMonolog_Logger_EventService',
            'monolog.logger.php' => 'getMonolog_Logger_PhpService',
            'monolog.logger.profiler' => 'getMonolog_Logger_ProfilerService',
            'monolog.logger.request' => 'getMonolog_Logger_RequestService',
            'monolog.logger.router' => 'getMonolog_Logger_RouterService',
            'monolog.logger.security' => 'getMonolog_Logger_SecurityService',
            'monolog.logger.templating' => 'getMonolog_Logger_TemplatingService',
            'monolog.logger.translation' => 'getMonolog_Logger_TranslationService',
            'monolog.logger.wsse' => 'getMonolog_Logger_WsseService',
            'monolog.processor.psr_log_message' => 'getMonolog_Processor_PsrLogMessageService',
            'mopa_bootstrap.form.type.form_actions' => 'getMopaBootstrap_Form_Type_FormActionsService',
            'mopa_bootstrap.form.type.tab' => 'getMopaBootstrap_Form_Type_TabService',
            'mopa_bootstrap.form.type_extension.button' => 'getMopaBootstrap_Form_TypeExtension_ButtonService',
            'mopa_bootstrap.form.type_extension.date' => 'getMopaBootstrap_Form_TypeExtension_DateService',
            'mopa_bootstrap.form.type_extension.datetime' => 'getMopaBootstrap_Form_TypeExtension_DatetimeService',
            'mopa_bootstrap.form.type_extension.embed_form' => 'getMopaBootstrap_Form_TypeExtension_EmbedFormService',
            'mopa_bootstrap.form.type_extension.error' => 'getMopaBootstrap_Form_TypeExtension_ErrorService',
            'mopa_bootstrap.form.type_extension.help' => 'getMopaBootstrap_Form_TypeExtension_HelpService',
            'mopa_bootstrap.form.type_extension.horizontal' => 'getMopaBootstrap_Form_TypeExtension_HorizontalService',
            'mopa_bootstrap.form.type_extension.legend' => 'getMopaBootstrap_Form_TypeExtension_LegendService',
            'mopa_bootstrap.form.type_extension.offset_button' => 'getMopaBootstrap_Form_TypeExtension_OffsetButtonService',
            'mopa_bootstrap.form.type_extension.static_text' => 'getMopaBootstrap_Form_TypeExtension_StaticTextService',
            'mopa_bootstrap.form.type_extension.tabbed' => 'getMopaBootstrap_Form_TypeExtension_TabbedService',
            'mopa_bootstrap.form.type_extension.time' => 'getMopaBootstrap_Form_TypeExtension_TimeService',
            'mopa_bootstrap.form.type_extension.widget' => 'getMopaBootstrap_Form_TypeExtension_WidgetService',
            'mopa_bootstrap.form.type_extension.widget_collection' => 'getMopaBootstrap_Form_TypeExtension_WidgetCollectionService',
            'mopa_bootstrap.twig.extension.bootstrap_flash' => 'getMopaBootstrap_Twig_Extension_BootstrapFlashService',
            'mopa_bootstrap.twig.extension.bootstrap_form' => 'getMopaBootstrap_Twig_Extension_BootstrapFormService',
            'mopa_bootstrap.twig.extension.bootstrap_icon' => 'getMopaBootstrap_Twig_Extension_BootstrapIconService',
            'pagerfanta.convert_not_valid_current_page_to_not_found_listener' => 'getPagerfanta_ConvertNotValidCurrentPageToNotFoundListenerService',
            'pagerfanta.convert_not_valid_max_per_page_to_not_found_listener' => 'getPagerfanta_ConvertNotValidMaxPerPageToNotFoundListenerService',
            'pagerfanta.view.semantic_ui' => 'getPagerfanta_View_SemanticUiService',
            'pagerfanta.view.semantic_ui_translated' => 'getPagerfanta_View_SemanticUiTranslatedService',
            'profiler' => 'getProfilerService',
            'profiler_listener' => 'getProfilerListenerService',
            'property_accessor' => 'getPropertyAccessorService',
            'request_stack' => 'getRequestStackService',
            'response_listener' => 'getResponseListenerService',
            'router.request_context' => 'getRouter_RequestContextService',
            'router_listener' => 'getRouterListenerService',
            'routing.loader' => 'getRouting_LoaderService',
            'security.access_listener' => 'getSecurity_AccessListenerService',
            'security.access_map' => 'getSecurity_AccessMapService',
            'security.authentication.guard_handler' => 'getSecurity_Authentication_GuardHandlerService',
            'security.authentication.manager' => 'getSecurity_Authentication_ManagerService',
            'security.authentication.trust_resolver' => 'getSecurity_Authentication_TrustResolverService',
            'security.authentication_utils' => 'getSecurity_AuthenticationUtilsService',
            'security.authorization_checker' => 'getSecurity_AuthorizationCheckerService',
            'security.channel_listener' => 'getSecurity_ChannelListenerService',
            'security.context_listener.0' => 'getSecurity_ContextListener_0Service',
            'security.csrf.token_manager' => 'getSecurity_Csrf_TokenManagerService',
            'security.encoder_factory' => 'getSecurity_EncoderFactoryService',
            'security.firewall' => 'getSecurity_FirewallService',
            'security.firewall.map' => 'getSecurity_Firewall_MapService',
            'security.firewall.map.context.api' => 'getSecurity_Firewall_Map_Context_ApiService',
            'security.firewall.map.context.main' => 'getSecurity_Firewall_Map_Context_MainService',
            'security.http_utils' => 'getSecurity_HttpUtilsService',
            'security.logout_url_generator' => 'getSecurity_LogoutUrlGeneratorService',
            'security.password_encoder' => 'getSecurity_PasswordEncoderService',
            'security.rememberme.response_listener' => 'getSecurity_Rememberme_ResponseListenerService',
            'security.role_hierarchy' => 'getSecurity_RoleHierarchyService',
            'security.token_storage' => 'getSecurity_TokenStorageService',
            'security.user_checker' => 'getSecurity_UserCheckerService',
            'security.validator.user_password' => 'getSecurity_Validator_UserPasswordService',
            'sensio_distribution.security_checker' => 'getSensioDistribution_SecurityCheckerService',
            'sensio_distribution.security_checker.command' => 'getSensioDistribution_SecurityChecker_CommandService',
            'sensio_framework_extra.cache.listener' => 'getSensioFrameworkExtra_Cache_ListenerService',
            'sensio_framework_extra.controller.listener' => 'getSensioFrameworkExtra_Controller_ListenerService',
            'sensio_framework_extra.converter.datetime' => 'getSensioFrameworkExtra_Converter_DatetimeService',
            'sensio_framework_extra.converter.doctrine.orm' => 'getSensioFrameworkExtra_Converter_Doctrine_OrmService',
            'sensio_framework_extra.converter.listener' => 'getSensioFrameworkExtra_Converter_ListenerService',
            'sensio_framework_extra.converter.manager' => 'getSensioFrameworkExtra_Converter_ManagerService',
            'sensio_framework_extra.security.listener' => 'getSensioFrameworkExtra_Security_ListenerService',
            'sensio_framework_extra.view.guesser' => 'getSensioFrameworkExtra_View_GuesserService',
            'sensio_framework_extra.view.listener' => 'getSensioFrameworkExtra_View_ListenerService',
            'service_container' => 'getServiceContainerService',
            'session' => 'getSessionService',
            'session.save_listener' => 'getSession_SaveListenerService',
            'session.storage.filesystem' => 'getSession_Storage_FilesystemService',
            'session.storage.metadata_bag' => 'getSession_Storage_MetadataBagService',
            'session.storage.native' => 'getSession_Storage_NativeService',
            'session.storage.php_bridge' => 'getSession_Storage_PhpBridgeService',
            'session_listener' => 'getSessionListenerService',
            'sm.callback.cascade_transition' => 'getSm_Callback_CascadeTransitionService',
            'sm.callback_factory' => 'getSm_CallbackFactoryService',
            'sm.factory' => 'getSm_FactoryService',
            'sonata.block.cache.handler.default' => 'getSonata_Block_Cache_Handler_DefaultService',
            'sonata.block.cache.handler.noop' => 'getSonata_Block_Cache_Handler_NoopService',
            'sonata.block.context_manager.default' => 'getSonata_Block_ContextManager_DefaultService',
            'sonata.block.exception.filter.debug_only' => 'getSonata_Block_Exception_Filter_DebugOnlyService',
            'sonata.block.exception.filter.ignore_block_exception' => 'getSonata_Block_Exception_Filter_IgnoreBlockExceptionService',
            'sonata.block.exception.filter.keep_all' => 'getSonata_Block_Exception_Filter_KeepAllService',
            'sonata.block.exception.filter.keep_none' => 'getSonata_Block_Exception_Filter_KeepNoneService',
            'sonata.block.exception.renderer.inline' => 'getSonata_Block_Exception_Renderer_InlineService',
            'sonata.block.exception.renderer.inline_debug' => 'getSonata_Block_Exception_Renderer_InlineDebugService',
            'sonata.block.exception.renderer.throw' => 'getSonata_Block_Exception_Renderer_ThrowService',
            'sonata.block.exception.strategy.manager' => 'getSonata_Block_Exception_Strategy_ManagerService',
            'sonata.block.form.type.block' => 'getSonata_Block_Form_Type_BlockService',
            'sonata.block.form.type.container_template' => 'getSonata_Block_Form_Type_ContainerTemplateService',
            'sonata.block.loader.chain' => 'getSonata_Block_Loader_ChainService',
            'sonata.block.loader.service' => 'getSonata_Block_Loader_ServiceService',
            'sonata.block.manager' => 'getSonata_Block_ManagerService',
            'sonata.block.menu.registry' => 'getSonata_Block_Menu_RegistryService',
            'sonata.block.renderer.default' => 'getSonata_Block_Renderer_DefaultService',
            'sonata.block.service.container' => 'getSonata_Block_Service_ContainerService',
            'sonata.block.service.empty' => 'getSonata_Block_Service_EmptyService',
            'sonata.block.service.menu' => 'getSonata_Block_Service_MenuService',
            'sonata.block.service.rss' => 'getSonata_Block_Service_RssService',
            'sonata.block.service.template' => 'getSonata_Block_Service_TemplateService',
            'sonata.block.service.text' => 'getSonata_Block_Service_TextService',
            'sonata.block.templating.helper' => 'getSonata_Block_Templating_HelperService',
            'sonata.block.twig.global' => 'getSonata_Block_Twig_GlobalService',
            'stof_doctrine_extensions.uploadable.manager' => 'getStofDoctrineExtensions_Uploadable_ManagerService',
            'streamed_response_listener' => 'getStreamedResponseListenerService',
            'swiftmailer.email_sender.listener' => 'getSwiftmailer_EmailSender_ListenerService',
            'swiftmailer.mailer.default' => 'getSwiftmailer_Mailer_DefaultService',
            'swiftmailer.mailer.default.plugin.messagelogger' => 'getSwiftmailer_Mailer_Default_Plugin_MessageloggerService',
            'swiftmailer.mailer.default.spool' => 'getSwiftmailer_Mailer_Default_SpoolService',
            'swiftmailer.mailer.default.transport' => 'getSwiftmailer_Mailer_Default_TransportService',
            'swiftmailer.mailer.default.transport.eventdispatcher' => 'getSwiftmailer_Mailer_Default_Transport_EventdispatcherService',
            'swiftmailer.mailer.default.transport.real' => 'getSwiftmailer_Mailer_Default_Transport_RealService',
            'sylius.admin_oauth_user.pin_generator.password_reset' => 'getSylius_AdminOauthUser_PinGenerator_PasswordResetService',
            'sylius.admin_oauth_user.pin_uniqueness_checker.password_reset' => 'getSylius_AdminOauthUser_PinUniquenessChecker_PasswordResetService',
            'sylius.admin_oauth_user.reloader' => 'getSylius_AdminOauthUser_ReloaderService',
            'sylius.admin_oauth_user.token_generator.email_verification' => 'getSylius_AdminOauthUser_TokenGenerator_EmailVerificationService',
            'sylius.admin_oauth_user.token_generator.password_reset' => 'getSylius_AdminOauthUser_TokenGenerator_PasswordResetService',
            'sylius.admin_oauth_user.token_uniqueness_checker.email_verification' => 'getSylius_AdminOauthUser_TokenUniquenessChecker_EmailVerificationService',
            'sylius.admin_oauth_user.token_uniqueness_checker.password_reset' => 'getSylius_AdminOauthUser_TokenUniquenessChecker_PasswordResetService',
            'sylius.admin_oauth_user_provider.email_based' => 'getSylius_AdminOauthUserProvider_EmailBasedService',
            'sylius.admin_oauth_user_provider.email_or_name_based' => 'getSylius_AdminOauthUserProvider_EmailOrNameBasedService',
            'sylius.admin_oauth_user_provider.name_based' => 'getSylius_AdminOauthUserProvider_NameBasedService',
            'sylius.attribute_type.checkbox' => 'getSylius_AttributeType_CheckboxService',
            'sylius.attribute_type.date' => 'getSylius_AttributeType_DateService',
            'sylius.attribute_type.datetime' => 'getSylius_AttributeType_DatetimeService',
            'sylius.attribute_type.integer' => 'getSylius_AttributeType_IntegerService',
            'sylius.attribute_type.percent' => 'getSylius_AttributeType_PercentService',
            'sylius.attribute_type.text' => 'getSylius_AttributeType_TextService',
            'sylius.attribute_type.textarea' => 'getSylius_AttributeType_TextareaService',
            'sylius.average_rating_calculator' => 'getSylius_AverageRatingCalculatorService',
            'sylius.average_rating_updater' => 'getSylius_AverageRatingUpdaterService',
            'sylius.canonicalizer' => 'getSylius_CanonicalizerService',
            'sylius.checker.product_variants_parity' => 'getSylius_Checker_ProductVariantsParityService',
            'sylius.console.command.resource_debug' => 'getSylius_Console_Command_ResourceDebugService',
            'sylius.context.locale' => 'getSylius_Context_LocaleService',
            'sylius.controller.admin_oauth_user' => 'getSylius_Controller_AdminOauthUserService',
            'sylius.controller.customer' => 'getSylius_Controller_CustomerService',
            'sylius.controller.customer_group' => 'getSylius_Controller_CustomerGroupService',
            'sylius.controller.locale' => 'getSylius_Controller_LocaleService',
            'sylius.controller.product' => 'getSylius_Controller_ProductService',
            'sylius.controller.product_association' => 'getSylius_Controller_ProductAssociationService',
            'sylius.controller.product_association_type' => 'getSylius_Controller_ProductAssociationTypeService',
            'sylius.controller.product_attribute' => 'getSylius_Controller_ProductAttributeService',
            'sylius.controller.product_attribute_translation' => 'getSylius_Controller_ProductAttributeTranslationService',
            'sylius.controller.product_attribute_value' => 'getSylius_Controller_ProductAttributeValueService',
            'sylius.controller.product_option' => 'getSylius_Controller_ProductOptionService',
            'sylius.controller.product_option_translation' => 'getSylius_Controller_ProductOptionTranslationService',
            'sylius.controller.product_option_value' => 'getSylius_Controller_ProductOptionValueService',
            'sylius.controller.product_option_value_translation' => 'getSylius_Controller_ProductOptionValueTranslationService',
            'sylius.controller.product_review' => 'getSylius_Controller_ProductReviewService',
            'sylius.controller.product_slug' => 'getSylius_Controller_ProductSlugService',
            'sylius.controller.product_translation' => 'getSylius_Controller_ProductTranslationService',
            'sylius.controller.product_variant' => 'getSylius_Controller_ProductVariantService',
            'sylius.controller.security' => 'getSylius_Controller_SecurityService',
            'sylius.controller.shop_user' => 'getSylius_Controller_ShopUserService',
            'sylius.controller.taxon' => 'getSylius_Controller_TaxonService',
            'sylius.controller.taxon_slug' => 'getSylius_Controller_TaxonSlugService',
            'sylius.controller.taxon_translation' => 'getSylius_Controller_TaxonTranslationService',
            'sylius.controller.user_security' => 'getSylius_Controller_UserSecurityService',
            'sylius.custom_grid_renderer.twig' => 'getSylius_CustomGridRenderer_TwigService',
            'sylius.doctrine.orm.event_subscriber.load_metadata.attribute' => 'getSylius_Doctrine_Orm_EventSubscriber_LoadMetadata_AttributeService',
            'sylius.doctrine.orm.event_subscriber.load_metadata.review' => 'getSylius_Doctrine_Orm_EventSubscriber_LoadMetadata_ReviewService',
            'sylius.email_provider' => 'getSylius_EmailProviderService',
            'sylius.email_renderer.adapter.twig' => 'getSylius_EmailRenderer_Adapter_TwigService',
            'sylius.email_sender' => 'getSylius_EmailSenderService',
            'sylius.email_sender.adapter.swiftmailer' => 'getSylius_EmailSender_Adapter_SwiftmailerService',
            'sylius.event_subscriber.orm_mapped_super_class' => 'getSylius_EventSubscriber_OrmMappedSuperClassService',
            'sylius.event_subscriber.orm_repository_class' => 'getSylius_EventSubscriber_OrmRepositoryClassService',
            'sylius.event_subscriber.resource_delete' => 'getSylius_EventSubscriber_ResourceDeleteService',
            'sylius.expression_language' => 'getSylius_ExpressionLanguageService',
            'sylius.factory.admin_oauth_user' => 'getSylius_Factory_AdminOauthUserService',
            'sylius.factory.customer' => 'getSylius_Factory_CustomerService',
            'sylius.factory.customer_group' => 'getSylius_Factory_CustomerGroupService',
            'sylius.factory.email' => 'getSylius_Factory_EmailService',
            'sylius.factory.locale' => 'getSylius_Factory_LocaleService',
            'sylius.factory.product' => 'getSylius_Factory_ProductService',
            'sylius.factory.product_association' => 'getSylius_Factory_ProductAssociationService',
            'sylius.factory.product_association_type' => 'getSylius_Factory_ProductAssociationTypeService',
            'sylius.factory.product_attribute' => 'getSylius_Factory_ProductAttributeService',
            'sylius.factory.product_attribute_translation' => 'getSylius_Factory_ProductAttributeTranslationService',
            'sylius.factory.product_attribute_value' => 'getSylius_Factory_ProductAttributeValueService',
            'sylius.factory.product_option' => 'getSylius_Factory_ProductOptionService',
            'sylius.factory.product_option_translation' => 'getSylius_Factory_ProductOptionTranslationService',
            'sylius.factory.product_option_value' => 'getSylius_Factory_ProductOptionValueService',
            'sylius.factory.product_option_value_translation' => 'getSylius_Factory_ProductOptionValueTranslationService',
            'sylius.factory.product_review' => 'getSylius_Factory_ProductReviewService',
            'sylius.factory.product_reviewer' => 'getSylius_Factory_ProductReviewerService',
            'sylius.factory.product_translation' => 'getSylius_Factory_ProductTranslationService',
            'sylius.factory.product_variant' => 'getSylius_Factory_ProductVariantService',
            'sylius.factory.shop_user' => 'getSylius_Factory_ShopUserService',
            'sylius.factory.taxon' => 'getSylius_Factory_TaxonService',
            'sylius.factory.taxon_translation' => 'getSylius_Factory_TaxonTranslationService',
            'sylius.form.event_subscriber.product_variant_generator' => 'getSylius_Form_EventSubscriber_ProductVariantGeneratorService',
            'sylius.form.extension.type.collection' => 'getSylius_Form_Extension_Type_CollectionService',
            'sylius.form.type.attribute_type_choice' => 'getSylius_Form_Type_AttributeTypeChoiceService',
            'sylius.form.type.customer' => 'getSylius_Form_Type_CustomerService',
            'sylius.form.type.customer_choice' => 'getSylius_Form_Type_CustomerChoiceService',
            'sylius.form.type.customer_group' => 'getSylius_Form_Type_CustomerGroupService',
            'sylius.form.type.customer_group_choice' => 'getSylius_Form_Type_CustomerGroupChoiceService',
            'sylius.form.type.customer_group_code_choice' => 'getSylius_Form_Type_CustomerGroupCodeChoiceService',
            'sylius.form.type.customer_profile' => 'getSylius_Form_Type_CustomerProfileService',
            'sylius.form.type.customer_simple_registration' => 'getSylius_Form_Type_CustomerSimpleRegistrationService',
            'sylius.form.type.data_transformer.products_to_product_associations' => 'getSylius_Form_Type_DataTransformer_ProductsToProductAssociationsService',
            'sylius.form.type.grid_filter.boolean' => 'getSylius_Form_Type_GridFilter_BooleanService',
            'sylius.form.type.grid_filter.string' => 'getSylius_Form_Type_GridFilter_StringService',
            'sylius.form.type.locale' => 'getSylius_Form_Type_LocaleService',
            'sylius.form.type.locale_choice' => 'getSylius_Form_Type_LocaleChoiceService',
            'sylius.form.type.product' => 'getSylius_Form_Type_ProductService',
            'sylius.form.type.product_association' => 'getSylius_Form_Type_ProductAssociationService',
            'sylius.form.type.product_association_type' => 'getSylius_Form_Type_ProductAssociationTypeService',
            'sylius.form.type.product_association_type_choice' => 'getSylius_Form_Type_ProductAssociationTypeChoiceService',
            'sylius.form.type.product_attribute' => 'getSylius_Form_Type_ProductAttributeService',
            'sylius.form.type.product_attribute_choice' => 'getSylius_Form_Type_ProductAttributeChoiceService',
            'sylius.form.type.product_attribute_translation' => 'getSylius_Form_Type_ProductAttributeTranslationService',
            'sylius.form.type.product_attribute_value' => 'getSylius_Form_Type_ProductAttributeValueService',
            'sylius.form.type.product_choice' => 'getSylius_Form_Type_ProductChoiceService',
            'sylius.form.type.product_code_choice' => 'getSylius_Form_Type_ProductCodeChoiceService',
            'sylius.form.type.product_generate_variants' => 'getSylius_Form_Type_ProductGenerateVariantsService',
            'sylius.form.type.product_option' => 'getSylius_Form_Type_ProductOptionService',
            'sylius.form.type.product_option_choice' => 'getSylius_Form_Type_ProductOptionChoiceService',
            'sylius.form.type.product_option_translation' => 'getSylius_Form_Type_ProductOptionTranslationService',
            'sylius.form.type.product_option_value' => 'getSylius_Form_Type_ProductOptionValueService',
            'sylius.form.type.product_option_value_translation' => 'getSylius_Form_Type_ProductOptionValueTranslationService',
            'sylius.form.type.product_review_rating' => 'getSylius_Form_Type_ProductReviewRatingService',
            'sylius.form.type.product_translation' => 'getSylius_Form_Type_ProductTranslationService',
            'sylius.form.type.product_variant' => 'getSylius_Form_Type_ProductVariantService',
            'sylius.form.type.product_variant_generation' => 'getSylius_Form_Type_ProductVariantGenerationService',
            'sylius.form.type.product_view_count' => 'getSylius_Form_Type_ProductViewCountService',
            'sylius.form.type.resource_translations' => 'getSylius_Form_Type_ResourceTranslationsService',
            'sylius.form.type.security_login' => 'getSylius_Form_Type_SecurityLoginService',
            'sylius.form.type.sylius_product_associations' => 'getSylius_Form_Type_SyliusProductAssociationsService',
            'sylius.form.type.taxon' => 'getSylius_Form_Type_TaxonService',
            'sylius.form.type.taxon_choice' => 'getSylius_Form_Type_TaxonChoiceService',
            'sylius.form.type.taxon_code_choice' => 'getSylius_Form_Type_TaxonCodeChoiceService',
            'sylius.form.type.taxon_position' => 'getSylius_Form_Type_TaxonPositionService',
            'sylius.form.type.taxon_translation' => 'getSylius_Form_Type_TaxonTranslationService',
            'sylius.form.type.user_change_password' => 'getSylius_Form_Type_UserChangePasswordService',
            'sylius.form.type.user_login' => 'getSylius_Form_Type_UserLoginService',
            'sylius.form.type.user_request_password_reset' => 'getSylius_Form_Type_UserRequestPasswordResetService',
            'sylius.form.type.user_reset_password' => 'getSylius_Form_Type_UserResetPasswordService',
            'sylius.form_registry.attribute_type' => 'getSylius_FormRegistry_AttributeTypeService',
            'sylius.generator.product_variant' => 'getSylius_Generator_ProductVariantService',
            'sylius.generator.slug' => 'getSylius_Generator_SlugService',
            'sylius.generator.taxon_slug' => 'getSylius_Generator_TaxonSlugService',
            'sylius.grid.array_to_definition_converter' => 'getSylius_Grid_ArrayToDefinitionConverterService',
            'sylius.grid.data_extractor.property_access' => 'getSylius_Grid_DataExtractor_PropertyAccessService',
            'sylius.grid.data_provider' => 'getSylius_Grid_DataProviderService',
            'sylius.grid.data_source_provider' => 'getSylius_Grid_DataSourceProviderService',
            'sylius.grid.filters_applicator' => 'getSylius_Grid_FiltersApplicatorService',
            'sylius.grid.provider' => 'getSylius_Grid_ProviderService',
            'sylius.grid.resource_view_factory' => 'getSylius_Grid_ResourceViewFactoryService',
            'sylius.grid.sorter' => 'getSylius_Grid_SorterService',
            'sylius.grid.view_factory' => 'getSylius_Grid_ViewFactoryService',
            'sylius.grid_driver.doctrine.dbal' => 'getSylius_GridDriver_Doctrine_DbalService',
            'sylius.grid_driver.doctrine.orm' => 'getSylius_GridDriver_Doctrine_OrmService',
            'sylius.grid_field.datetime' => 'getSylius_GridField_DatetimeService',
            'sylius.grid_field.string' => 'getSylius_GridField_StringService',
            'sylius.grid_field.twig' => 'getSylius_GridField_TwigService',
            'sylius.grid_filter.boolean' => 'getSylius_GridFilter_BooleanService',
            'sylius.grid_filter.string' => 'getSylius_GridFilter_StringService',
            'sylius.installer.checker.command_directory' => 'getSylius_Installer_Checker_CommandDirectoryService',
            'sylius.listener.admin_oauth_user.reloader' => 'getSylius_Listener_AdminOauthUser_ReloaderService',
            'sylius.listener.admin_oauth_user_delete' => 'getSylius_Listener_AdminOauthUserDeleteService',
            'sylius.listener.admin_oauth_user_last_login' => 'getSylius_Listener_AdminOauthUserLastLoginService',
            'sylius.listener.canonicalizer' => 'getSylius_Listener_CanonicalizerService',
            'sylius.listener.password_updater' => 'getSylius_Listener_PasswordUpdaterService',
            'sylius.listener.request_locale_setter' => 'getSylius_Listener_RequestLocaleSetterService',
            'sylius.listener.review_change' => 'getSylius_Listener_ReviewChangeService',
            'sylius.listener.shop_user.reloader' => 'getSylius_Listener_ShopUser_ReloaderService',
            'sylius.listener.shop_user_delete' => 'getSylius_Listener_ShopUserDeleteService',
            'sylius.listener.shop_user_last_login' => 'getSylius_Listener_ShopUserLastLoginService',
            'sylius.listener.user_mailer_listener' => 'getSylius_Listener_UserMailerListenerService',
            'sylius.listener.user_registration' => 'getSylius_Listener_UserRegistrationService',
            'sylius.locale_converter' => 'getSylius_LocaleConverterService',
            'sylius.locale_provider' => 'getSylius_LocaleProviderService',
            'sylius.mailer.default_settings_provider' => 'getSylius_Mailer_DefaultSettingsProviderService',
            'sylius.product_variant_resolver.default' => 'getSylius_ProductVariantResolver_DefaultService',
            'sylius.registry.attribute_type' => 'getSylius_Registry_AttributeTypeService',
            'sylius.registry.grid_driver' => 'getSylius_Registry_GridDriverService',
            'sylius.registry.grid_field' => 'getSylius_Registry_GridFieldService',
            'sylius.registry.grid_filter' => 'getSylius_Registry_GridFilterService',
            'sylius.repository.admin_oauth_user' => 'getSylius_Repository_AdminOauthUserService',
            'sylius.repository.customer' => 'getSylius_Repository_CustomerService',
            'sylius.repository.customer_group' => 'getSylius_Repository_CustomerGroupService',
            'sylius.repository.locale' => 'getSylius_Repository_LocaleService',
            'sylius.repository.product' => 'getSylius_Repository_ProductService',
            'sylius.repository.product_association' => 'getSylius_Repository_ProductAssociationService',
            'sylius.repository.product_association_type' => 'getSylius_Repository_ProductAssociationTypeService',
            'sylius.repository.product_attribute' => 'getSylius_Repository_ProductAttributeService',
            'sylius.repository.product_attribute_translation' => 'getSylius_Repository_ProductAttributeTranslationService',
            'sylius.repository.product_attribute_value' => 'getSylius_Repository_ProductAttributeValueService',
            'sylius.repository.product_option' => 'getSylius_Repository_ProductOptionService',
            'sylius.repository.product_option_translation' => 'getSylius_Repository_ProductOptionTranslationService',
            'sylius.repository.product_option_value' => 'getSylius_Repository_ProductOptionValueService',
            'sylius.repository.product_option_value_translation' => 'getSylius_Repository_ProductOptionValueTranslationService',
            'sylius.repository.product_review' => 'getSylius_Repository_ProductReviewService',
            'sylius.repository.product_reviewer' => 'getSylius_Repository_ProductReviewerService',
            'sylius.repository.product_translation' => 'getSylius_Repository_ProductTranslationService',
            'sylius.repository.product_variant' => 'getSylius_Repository_ProductVariantService',
            'sylius.repository.shop_user' => 'getSylius_Repository_ShopUserService',
            'sylius.repository.taxon' => 'getSylius_Repository_TaxonService',
            'sylius.repository.taxon_translation' => 'getSylius_Repository_TaxonTranslationService',
            'sylius.resource_controller.authorization_checker' => 'getSylius_ResourceController_AuthorizationCheckerService',
            'sylius.resource_controller.event_dispatcher' => 'getSylius_ResourceController_EventDispatcherService',
            'sylius.resource_controller.flash_helper' => 'getSylius_ResourceController_FlashHelperService',
            'sylius.resource_controller.form_factory' => 'getSylius_ResourceController_FormFactoryService',
            'sylius.resource_controller.new_resource_factory' => 'getSylius_ResourceController_NewResourceFactoryService',
            'sylius.resource_controller.parameters_parser' => 'getSylius_ResourceController_ParametersParserService',
            'sylius.resource_controller.redirect_handler' => 'getSylius_ResourceController_RedirectHandlerService',
            'sylius.resource_controller.request_configuration_factory' => 'getSylius_ResourceController_RequestConfigurationFactoryService',
            'sylius.resource_controller.resources_collection_provider' => 'getSylius_ResourceController_ResourcesCollectionProviderService',
            'sylius.resource_controller.resources_resolver.grid_aware' => 'getSylius_ResourceController_ResourcesResolver_GridAwareService',
            'sylius.resource_controller.single_resource_provider' => 'getSylius_ResourceController_SingleResourceProviderService',
            'sylius.resource_controller.state_machine' => 'getSylius_ResourceController_StateMachineService',
            'sylius.resource_controller.view_handler' => 'getSylius_ResourceController_ViewHandlerService',
            'sylius.resource_registry' => 'getSylius_ResourceRegistryService',
            'sylius.security.password_encoder' => 'getSylius_Security_PasswordEncoderService',
            'sylius.security.password_updater' => 'getSylius_Security_PasswordUpdaterService',
            'sylius.security.user_login' => 'getSylius_Security_UserLoginService',
            'sylius.setup.locale' => 'getSylius_Setup_LocaleService',
            'sylius.shop_user.pin_generator.password_reset' => 'getSylius_ShopUser_PinGenerator_PasswordResetService',
            'sylius.shop_user.pin_uniqueness_checker.password_reset' => 'getSylius_ShopUser_PinUniquenessChecker_PasswordResetService',
            'sylius.shop_user.reloader' => 'getSylius_ShopUser_ReloaderService',
            'sylius.shop_user.token_generator.email_verification' => 'getSylius_ShopUser_TokenGenerator_EmailVerificationService',
            'sylius.shop_user.token_generator.password_reset' => 'getSylius_ShopUser_TokenGenerator_PasswordResetService',
            'sylius.shop_user.token_uniqueness_checker.email_verification' => 'getSylius_ShopUser_TokenUniquenessChecker_EmailVerificationService',
            'sylius.shop_user.token_uniqueness_checker.password_reset' => 'getSylius_ShopUser_TokenUniquenessChecker_PasswordResetService',
            'sylius.shop_user_provider.email_based' => 'getSylius_ShopUserProvider_EmailBasedService',
            'sylius.shop_user_provider.email_or_name_based' => 'getSylius_ShopUserProvider_EmailOrNameBasedService',
            'sylius.shop_user_provider.name_based' => 'getSylius_ShopUserProvider_NameBasedService',
            'sylius.templating.helper.grid' => 'getSylius_Templating_Helper_GridService',
            'sylius.templating.helper.locale' => 'getSylius_Templating_Helper_LocaleService',
            'sylius.translatable_entity_locale_assigner' => 'getSylius_TranslatableEntityLocaleAssignerService',
            'sylius.translation.translatable_listener.doctrine.orm' => 'getSylius_Translation_TranslatableListener_Doctrine_OrmService',
            'sylius.translation_locale_provider.immutable' => 'getSylius_TranslationLocaleProvider_ImmutableService',
            'sylius.validator.customer_initializer' => 'getSylius_Validator_CustomerInitializerService',
            'sylius.validator.product_code_uniqueness' => 'getSylius_Validator_ProductCodeUniquenessService',
            'sylius.validator.product_variant_combination' => 'getSylius_Validator_ProductVariantCombinationService',
            'sylius.validator.valid_attribute_value' => 'getSylius_Validator_ValidAttributeValueService',
            'templating' => 'getTemplatingService',
            'templating.filename_parser' => 'getTemplating_FilenameParserService',
            'templating.helper.logout_url' => 'getTemplating_Helper_LogoutUrlService',
            'templating.helper.security' => 'getTemplating_Helper_SecurityService',
            'templating.loader' => 'getTemplating_LoaderService',
            'templating.locator' => 'getTemplating_LocatorService',
            'templating.name_parser' => 'getTemplating_NameParserService',
            'translation.dumper.csv' => 'getTranslation_Dumper_CsvService',
            'translation.dumper.ini' => 'getTranslation_Dumper_IniService',
            'translation.dumper.json' => 'getTranslation_Dumper_JsonService',
            'translation.dumper.mo' => 'getTranslation_Dumper_MoService',
            'translation.dumper.php' => 'getTranslation_Dumper_PhpService',
            'translation.dumper.po' => 'getTranslation_Dumper_PoService',
            'translation.dumper.qt' => 'getTranslation_Dumper_QtService',
            'translation.dumper.res' => 'getTranslation_Dumper_ResService',
            'translation.dumper.xliff' => 'getTranslation_Dumper_XliffService',
            'translation.dumper.yml' => 'getTranslation_Dumper_YmlService',
            'translation.extractor' => 'getTranslation_ExtractorService',
            'translation.extractor.php' => 'getTranslation_Extractor_PhpService',
            'translation.loader' => 'getTranslation_LoaderService',
            'translation.loader.csv' => 'getTranslation_Loader_CsvService',
            'translation.loader.dat' => 'getTranslation_Loader_DatService',
            'translation.loader.ini' => 'getTranslation_Loader_IniService',
            'translation.loader.json' => 'getTranslation_Loader_JsonService',
            'translation.loader.mo' => 'getTranslation_Loader_MoService',
            'translation.loader.php' => 'getTranslation_Loader_PhpService',
            'translation.loader.po' => 'getTranslation_Loader_PoService',
            'translation.loader.qt' => 'getTranslation_Loader_QtService',
            'translation.loader.res' => 'getTranslation_Loader_ResService',
            'translation.loader.xliff' => 'getTranslation_Loader_XliffService',
            'translation.loader.yml' => 'getTranslation_Loader_YmlService',
            'translation.writer' => 'getTranslation_WriterService',
            'translator' => 'getTranslatorService',
            'translator.default' => 'getTranslator_DefaultService',
            'translator_listener' => 'getTranslatorListenerService',
            'twig' => 'getTwigService',
            'twig.controller.exception' => 'getTwig_Controller_ExceptionService',
            'twig.controller.preview_error' => 'getTwig_Controller_PreviewErrorService',
            'twig.exception_listener' => 'getTwig_ExceptionListenerService',
            'twig.extension.intl' => 'getTwig_Extension_IntlService',
            'twig.extension.text' => 'getTwig_Extension_TextService',
            'twig.form.renderer' => 'getTwig_Form_RendererService',
            'twig.loader' => 'getTwig_LoaderService',
            'twig.profile' => 'getTwig_ProfileService',
            'twig.runtime.httpkernel' => 'getTwig_Runtime_HttpkernelService',
            'twig.translation.extractor' => 'getTwig_Translation_ExtractorService',
            'uri_signer' => 'getUriSignerService',
            'validate_request_listener' => 'getValidateRequestListenerService',
            'validator' => 'getValidatorService',
            'validator.builder' => 'getValidator_BuilderService',
            'validator.email' => 'getValidator_EmailService',
            'validator.expression' => 'getValidator_ExpressionService',
            'var_dumper.cli_dumper' => 'getVarDumper_CliDumperService',
            'var_dumper.cloner' => 'getVarDumper_ClonerService',
            'web_profiler.controller.exception' => 'getWebProfiler_Controller_ExceptionService',
            'web_profiler.controller.profiler' => 'getWebProfiler_Controller_ProfilerService',
            'web_profiler.controller.router' => 'getWebProfiler_Controller_RouterService',
            'web_profiler.csp.handler' => 'getWebProfiler_Csp_HandlerService',
            'web_profiler.debug_toolbar' => 'getWebProfiler_DebugToolbarService',
            'white_october_pagerfanta.view_factory' => 'getWhiteOctoberPagerfanta_ViewFactoryService',
            'zenstruck_redirect.not_found_listener' => 'getZenstruckRedirect_NotFoundListenerService',
            'zenstruck_redirect.not_found_manager' => 'getZenstruckRedirect_NotFoundManagerService',
            'zenstruck_redirect.redirect.form.type' => 'getZenstruckRedirect_Redirect_Form_TypeService',
            'zenstruck_redirect.redirect_listener' => 'getZenstruckRedirect_RedirectListenerService',
            'zenstruck_redirect.redirect_manager' => 'getZenstruckRedirect_RedirectManagerService',
        );
        $this->privates = array(
            'annotations.reader' => true,
            'assetic.asset_factory' => true,
            'cache.annotations' => true,
            'cmf_media.persistence.phpcr.manager' => true,
            'controller_name_converter' => true,
            'debug.file_link_formatter' => true,
            'debug.log_processor' => true,
            'debug.security.access.decision_manager' => true,
            'doctrine.dbal.logger.profiling.default' => true,
            'fos_elastica.elastica_to_model_transformer.jedisjeux.article' => true,
            'fos_elastica.elastica_to_model_transformer.jedisjeux.person' => true,
            'fos_elastica.elastica_to_model_transformer.jedisjeux.product' => true,
            'fos_elastica.elastica_to_model_transformer.jedisjeux.taxon' => true,
            'fos_elastica.elastica_to_model_transformer.jedisjeux.topic' => true,
            'fos_elastica.elastica_to_model_transformer.jedisjeux.user' => true,
            'hateoas.configuration.relations_repository' => true,
            'hateoas.embeds_factory' => true,
            'hateoas.link_factory' => true,
            'hateoas.links_factory' => true,
            'jms_serializer.metadata.file_locator' => true,
            'jms_serializer.metadata_factory' => true,
            'jms_serializer.unserialize_object_constructor' => true,
            'monolog.processor.psr_log_message' => true,
            'router.request_context' => true,
            'security.access_listener' => true,
            'security.access_map' => true,
            'security.authentication.manager' => true,
            'security.authentication.trust_resolver' => true,
            'security.channel_listener' => true,
            'security.context_listener.0' => true,
            'security.firewall.map' => true,
            'security.http_utils' => true,
            'security.logout_url_generator' => true,
            'security.role_hierarchy' => true,
            'security.user_checker' => true,
            'session.storage.metadata_bag' => true,
            'sonata.block.manager' => true,
            'swiftmailer.mailer.default.transport.eventdispatcher' => true,
            'sylius.expression_language' => true,
            'sylius.resource_controller.event_dispatcher' => true,
            'sylius.resource_controller.flash_helper' => true,
            'sylius.resource_controller.form_factory' => true,
            'sylius.resource_controller.new_resource_factory' => true,
            'sylius.resource_controller.parameters_parser' => true,
            'sylius.resource_controller.redirect_handler' => true,
            'sylius.resource_controller.request_configuration_factory' => true,
            'sylius.resource_controller.resources_collection_provider' => true,
            'sylius.resource_controller.single_resource_provider' => true,
            'sylius.resource_controller.state_machine' => true,
            'sylius.resource_controller.view_handler' => true,
            'sylius.resource_registry' => true,
            'templating.locator' => true,
            'web_profiler.csp.handler' => true,
        );
        $this->aliases = array(
            'app.manager.article' => 'doctrine.orm.default_entity_manager',
            'app.manager.article_content' => 'doctrine_phpcr.odm.default_document_manager',
            'app.manager.article_image' => 'doctrine.orm.default_entity_manager',
            'app.manager.article_review' => 'doctrine.orm.default_entity_manager',
            'app.manager.avatar' => 'doctrine.orm.default_entity_manager',
            'app.manager.block' => 'doctrine.orm.default_entity_manager',
            'app.manager.block_image' => 'doctrine.orm.default_entity_manager',
            'app.manager.blockquote_block' => 'doctrine_phpcr.odm.default_document_manager',
            'app.manager.contact_request' => 'doctrine.orm.default_entity_manager',
            'app.manager.dealer' => 'doctrine.orm.default_entity_manager',
            'app.manager.dealer_image' => 'doctrine.orm.default_entity_manager',
            'app.manager.dealer_price' => 'doctrine.orm.default_entity_manager',
            'app.manager.game_play' => 'doctrine.orm.default_entity_manager',
            'app.manager.game_play_image' => 'doctrine.orm.default_entity_manager',
            'app.manager.left_image_block' => 'doctrine_phpcr.odm.default_document_manager',
            'app.manager.not_found_page' => 'doctrine.orm.default_entity_manager',
            'app.manager.notification' => 'doctrine.orm.default_entity_manager',
            'app.manager.person' => 'doctrine.orm.default_entity_manager',
            'app.manager.person_image' => 'doctrine.orm.default_entity_manager',
            'app.manager.player' => 'doctrine.orm.default_entity_manager',
            'app.manager.post' => 'doctrine.orm.default_entity_manager',
            'app.manager.price_list' => 'doctrine.orm.default_entity_manager',
            'app.manager.product_barcode' => 'doctrine.orm.default_entity_manager',
            'app.manager.product_list' => 'doctrine.orm.default_entity_manager',
            'app.manager.product_list_item' => 'doctrine.orm.default_entity_manager',
            'app.manager.product_variant_image' => 'doctrine.orm.default_entity_manager',
            'app.manager.pub_banner' => 'doctrine.orm.default_entity_manager',
            'app.manager.redirection' => 'doctrine.orm.default_entity_manager',
            'app.manager.right_image_block' => 'doctrine_phpcr.odm.default_document_manager',
            'app.manager.single_image_block' => 'doctrine_phpcr.odm.default_document_manager',
            'app.manager.slide_show_block' => 'doctrine.orm.default_entity_manager',
            'app.manager.string_block' => 'doctrine_phpcr.odm.default_document_manager',
            'app.manager.top_image_block' => 'doctrine_phpcr.odm.default_document_manager',
            'app.manager.topic' => 'doctrine.orm.default_entity_manager',
            'app.manager.well_image_block' => 'doctrine_phpcr.odm.default_document_manager',
            'cache.app_clearer' => 'cache.default_clearer',
            'cmf_core.publish_workflow.checker' => 'cmf_core.publish_workflow.checker.default',
            'cmf_media.upload_file_helper' => 'cmf_media.persistence.phpcr.upload_file_helper',
            'cmf_media.upload_image_helper' => 'cmf_media.persistence.phpcr.upload_image_helper',
            'cmf_routing.content_repository' => 'cmf_routing.phpcr_content_repository',
            'cmf_routing.route_provider' => 'cmf_routing.phpcr_route_provider',
            'console.command.sensiolabs_security_command_securitycheckercommand' => 'sensio_distribution.security_checker.command',
            'console.command.sylius_bundle_resourcebundle_command_debugresourcecommand' => 'sylius.console.command.resource_debug',
            'database_connection' => 'doctrine.dbal.default_connection',
            'doctrine.orm.default_metadata_cache' => 'doctrine_cache.providers.doctrine.orm.default_metadata_cache',
            'doctrine.orm.default_query_cache' => 'doctrine_cache.providers.doctrine.orm.default_query_cache',
            'doctrine.orm.default_result_cache' => 'doctrine_cache.providers.doctrine.orm.default_result_cache',
            'doctrine.orm.entity_manager' => 'doctrine.orm.default_entity_manager',
            'doctrine_phpcr.admin.jackalope_doctrine_dbal.default_connection' => 'doctrine.dbal.default_connection',
            'doctrine_phpcr.jackalope_doctrine_dbal.default_connection' => 'doctrine.dbal.default_connection',
            'doctrine_phpcr.odm.document_manager' => 'doctrine_phpcr.odm.default_document_manager',
            'doctrine_phpcr.session' => 'doctrine_phpcr.default_session',
            'event_dispatcher' => 'debug.event_dispatcher',
            'fos_elastica.client' => 'fos_elastica.client.default',
            'fos_elastica.index' => 'fos_elastica.index.jedisjeux',
            'fos_elastica.manager' => 'fos_elastica.manager.orm',
            'fos_rest.exception_handler' => 'fos_rest.view.exception_wrapper_handler',
            'fos_rest.inflector' => 'fos_rest.inflector.doctrine',
            'fos_rest.router' => 'cmf_routing.router',
            'fos_rest.templating' => 'templating',
            'mailer' => 'swiftmailer.mailer.default',
            'router' => 'cmf_routing.router',
            'serializer' => 'jms_serializer',
            'session.storage' => 'session.storage.native',
            'sonata.block.cache.handler' => 'sonata.block.cache.handler.default',
            'sonata.block.context_manager' => 'sonata.block.context_manager.default',
            'sonata.block.renderer' => 'sonata.block.renderer.default',
            'swiftmailer.mailer' => 'swiftmailer.mailer.default',
            'swiftmailer.plugin.messagelogger' => 'swiftmailer.mailer.default.plugin.messagelogger',
            'swiftmailer.spool' => 'swiftmailer.mailer.default.spool',
            'swiftmailer.transport' => 'swiftmailer.mailer.default.transport',
            'swiftmailer.transport.real' => 'swiftmailer.mailer.default.transport.real',
            'sylius.context.customer' => 'app.context.customer',
            'sylius.email_renderer.adapter' => 'sylius.email_renderer.adapter.twig',
            'sylius.email_sender.adapter' => 'sylius.email_sender.adapter.swiftmailer',
            'sylius.grid.data_extractor' => 'sylius.grid.data_extractor.property_access',
            'sylius.grid.renderer' => 'sylius.custom_grid_renderer.twig',
            'sylius.grid.renderer.twig' => 'sylius.custom_grid_renderer.twig',
            'sylius.manager.admin_oauth_user' => 'doctrine.orm.default_entity_manager',
            'sylius.manager.customer' => 'doctrine.orm.default_entity_manager',
            'sylius.manager.customer_group' => 'doctrine.orm.default_entity_manager',
            'sylius.manager.locale' => 'doctrine.orm.default_entity_manager',
            'sylius.manager.product' => 'doctrine.orm.default_entity_manager',
            'sylius.manager.product_association' => 'doctrine.orm.default_entity_manager',
            'sylius.manager.product_association_type' => 'doctrine.orm.default_entity_manager',
            'sylius.manager.product_attribute' => 'doctrine.orm.default_entity_manager',
            'sylius.manager.product_attribute_translation' => 'doctrine.orm.default_entity_manager',
            'sylius.manager.product_attribute_value' => 'doctrine.orm.default_entity_manager',
            'sylius.manager.product_option' => 'doctrine.orm.default_entity_manager',
            'sylius.manager.product_option_translation' => 'doctrine.orm.default_entity_manager',
            'sylius.manager.product_option_value' => 'doctrine.orm.default_entity_manager',
            'sylius.manager.product_option_value_translation' => 'doctrine.orm.default_entity_manager',
            'sylius.manager.product_review' => 'doctrine.orm.default_entity_manager',
            'sylius.manager.product_reviewer' => 'doctrine.orm.default_entity_manager',
            'sylius.manager.product_translation' => 'doctrine.orm.default_entity_manager',
            'sylius.manager.product_variant' => 'doctrine.orm.default_entity_manager',
            'sylius.manager.shop_user' => 'doctrine.orm.default_entity_manager',
            'sylius.manager.taxon' => 'doctrine.orm.default_entity_manager',
            'sylius.manager.taxon_translation' => 'doctrine.orm.default_entity_manager',
            'sylius.translation_locale_provider' => 'sylius.translation_locale_provider.immutable',
            'zenstruck_redirect.entity_manager' => 'doctrine.orm.default_entity_manager',
        );
    }

    /**
     * {@inheritdoc}
     */
    public function compile()
    {
        throw new LogicException('You cannot compile a dumped frozen container.');
    }

    /**
     * {@inheritdoc}
     */
    public function isFrozen()
    {
        return true;
    }

    /**
     * Gets the 'annotation_reader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Annotations\CachedReader A Doctrine\Common\Annotations\CachedReader instance
     */
    protected function getAnnotationReaderService()
    {
        return $this->services['annotation_reader'] = new \Doctrine\Common\Annotations\CachedReader(${($_ = isset($this->services['annotations.reader']) ? $this->services['annotations.reader'] : $this->getAnnotations_ReaderService()) && false ?: '_'}, new \Symfony\Component\Cache\DoctrineProvider(\Symfony\Component\Cache\Adapter\PhpArrayAdapter::create((__DIR__.'/annotations.php'), ${($_ = isset($this->services['cache.annotations']) ? $this->services['cache.annotations'] : $this->getCache_AnnotationsService()) && false ?: '_'})), true);
    }

    /**
     * Gets the 'app.block.blockquote' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Block\BlockquoteBlockService A AppBundle\Block\BlockquoteBlockService instance
     */
    protected function getApp_Block_BlockquoteService()
    {
        return $this->services['app.block.blockquote'] = new \AppBundle\Block\BlockquoteBlockService('app.block.blockquote', $this->get('templating'));
    }

    /**
     * Gets the 'app.block.single_image' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Block\SingleImageBlockService A AppBundle\Block\SingleImageBlockService instance
     */
    protected function getApp_Block_SingleImageService()
    {
        return $this->services['app.block.single_image'] = new \AppBundle\Block\SingleImageBlockService('app.block.single_image', $this->get('templating'));
    }

    /**
     * Gets the 'app.calculator.product_count_by_person' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Calculator\ProductCountByPersonCalculator A AppBundle\Calculator\ProductCountByPersonCalculator instance
     */
    protected function getApp_Calculator_ProductCountByPersonService()
    {
        return $this->services['app.calculator.product_count_by_person'] = new \AppBundle\Calculator\ProductCountByPersonCalculator();
    }

    /**
     * Gets the 'app.calculator.product_count_by_taxon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Calculator\ProductCountByTaxonCalculator A AppBundle\Calculator\ProductCountByTaxonCalculator instance
     */
    protected function getApp_Calculator_ProductCountByTaxonService()
    {
        return $this->services['app.calculator.product_count_by_taxon'] = new \AppBundle\Calculator\ProductCountByTaxonCalculator($this->get('sylius.repository.product'));
    }

    /**
     * Gets the 'app.calculator.topic_count_by_taxon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Calculator\TopicCountByTaxonCalculator A AppBundle\Calculator\TopicCountByTaxonCalculator instance
     */
    protected function getApp_Calculator_TopicCountByTaxonService()
    {
        return $this->services['app.calculator.topic_count_by_taxon'] = new \AppBundle\Calculator\TopicCountByTaxonCalculator($this->get('app.repository.topic'));
    }

    /**
     * Gets the 'app.context.customer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Context\CustomerContext A AppBundle\Context\CustomerContext instance
     */
    protected function getApp_Context_CustomerService()
    {
        return $this->services['app.context.customer'] = new \AppBundle\Context\CustomerContext($this->get('security.token_storage'), $this->get('security.authorization_checker'));
    }

    /**
     * Gets the 'app.controller.article' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Controller\ArticleController A AppBundle\Controller\ArticleController instance
     */
    protected function getApp_Controller_ArticleService()
    {
        $this->services['app.controller.article'] = $instance = new \AppBundle\Controller\ArticleController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('app.article'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('app.repository.article'), $this->get('app.factory.article'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'app.controller.article_content' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getApp_Controller_ArticleContentService()
    {
        $this->services['app.controller.article_content'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('app.article_content'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('app.repository.article_content'), $this->get('app.factory.article_content'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine_phpcr.odm.default_document_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'app.controller.article_image' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getApp_Controller_ArticleImageService()
    {
        $this->services['app.controller.article_image'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('app.article_image'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('app.repository.article_image'), $this->get('app.factory.article_image'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'app.controller.article_review' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getApp_Controller_ArticleReviewService()
    {
        $this->services['app.controller.article_review'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('app.article_review'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('app.repository.article_review'), $this->get('app.factory.article_review'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'app.controller.avatar' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getApp_Controller_AvatarService()
    {
        $this->services['app.controller.avatar'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('app.avatar'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('app.repository.avatar'), $this->get('app.factory.avatar'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'app.controller.block' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getApp_Controller_BlockService()
    {
        $this->services['app.controller.block'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('app.block'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('app.repository.block'), $this->get('app.factory.block'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'app.controller.block_image' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getApp_Controller_BlockImageService()
    {
        $this->services['app.controller.block_image'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('app.block_image'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('app.repository.block_image'), $this->get('app.factory.block_image'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'app.controller.blockquote_block' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getApp_Controller_BlockquoteBlockService()
    {
        $this->services['app.controller.blockquote_block'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('app.blockquote_block'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('app.repository.blockquote_block'), $this->get('app.factory.blockquote_block'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine_phpcr.odm.default_document_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'app.controller.contact_request' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getApp_Controller_ContactRequestService()
    {
        $this->services['app.controller.contact_request'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('app.contact_request'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('app.repository.contact_request'), $this->get('app.factory.contact_request'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'app.controller.dealer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getApp_Controller_DealerService()
    {
        $this->services['app.controller.dealer'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('app.dealer'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('app.repository.dealer'), $this->get('app.factory.dealer'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'app.controller.dealer_image' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getApp_Controller_DealerImageService()
    {
        $this->services['app.controller.dealer_image'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('app.dealer_image'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('app.repository.dealer_image'), $this->get('app.factory.dealer_image'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'app.controller.dealer_price' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getApp_Controller_DealerPriceService()
    {
        $this->services['app.controller.dealer_price'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('app.dealer_price'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('app.repository.dealer_price'), $this->get('app.factory.dealer_price'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'app.controller.form' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Controller\FormController A AppBundle\Controller\FormController instance
     */
    protected function getApp_Controller_FormService()
    {
        $this->services['app.controller.form'] = $instance = new \AppBundle\Controller\FormController();

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'app.controller.game_play' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getApp_Controller_GamePlayService()
    {
        $this->services['app.controller.game_play'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('app.game_play'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('app.repository.game_play'), $this->get('app.factory.game_play'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'app.controller.game_play_image' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getApp_Controller_GamePlayImageService()
    {
        $this->services['app.controller.game_play_image'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('app.game_play_image'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('app.repository.game_play_image'), $this->get('app.factory.game_play_image'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'app.controller.left_image_block' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getApp_Controller_LeftImageBlockService()
    {
        $this->services['app.controller.left_image_block'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('app.left_image_block'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('app.repository.left_image_block'), $this->get('app.factory.left_image_block'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine_phpcr.odm.default_document_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'app.controller.not_found_page' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getApp_Controller_NotFoundPageService()
    {
        $this->services['app.controller.not_found_page'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('app.not_found_page'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('app.repository.not_found_page'), $this->get('app.factory.not_found_page'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'app.controller.notification' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Controller\NotificationController A AppBundle\Controller\NotificationController instance
     */
    protected function getApp_Controller_NotificationService()
    {
        $this->services['app.controller.notification'] = $instance = new \AppBundle\Controller\NotificationController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('app.notification'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('app.repository.notification'), $this->get('app.factory.notification'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'app.controller.person' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Controller\PersonController A AppBundle\Controller\PersonController instance
     */
    protected function getApp_Controller_PersonService()
    {
        $this->services['app.controller.person'] = $instance = new \AppBundle\Controller\PersonController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('app.person'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('app.repository.person'), $this->get('app.factory.person'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'app.controller.person_image' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getApp_Controller_PersonImageService()
    {
        $this->services['app.controller.person_image'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('app.person_image'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('app.repository.person_image'), $this->get('app.factory.person_image'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'app.controller.player' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getApp_Controller_PlayerService()
    {
        $this->services['app.controller.player'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('app.player'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('app.repository.player'), $this->get('app.factory.player'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'app.controller.post' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Controller\PostController A AppBundle\Controller\PostController instance
     */
    protected function getApp_Controller_PostService()
    {
        $this->services['app.controller.post'] = $instance = new \AppBundle\Controller\PostController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('app.post'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('app.repository.post'), $this->get('app.factory.post'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'app.controller.price_list' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getApp_Controller_PriceListService()
    {
        $this->services['app.controller.price_list'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('app.price_list'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('app.repository.price_list'), $this->get('app.factory.price_list'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'app.controller.product_barcode' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getApp_Controller_ProductBarcodeService()
    {
        $this->services['app.controller.product_barcode'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('app.product_barcode'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('app.repository.product_barcode'), $this->get('app.factory.product_barcode'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'app.controller.product_list' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Controller\ProductListController A AppBundle\Controller\ProductListController instance
     */
    protected function getApp_Controller_ProductListService()
    {
        $this->services['app.controller.product_list'] = $instance = new \AppBundle\Controller\ProductListController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('app.product_list'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('app.repository.product_list'), $this->get('app.factory.product_list'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'app.controller.product_list_item' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Controller\ProductListItemController A AppBundle\Controller\ProductListItemController instance
     */
    protected function getApp_Controller_ProductListItemService()
    {
        $this->services['app.controller.product_list_item'] = $instance = new \AppBundle\Controller\ProductListItemController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('app.product_list_item'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('app.repository.product_list_item'), $this->get('app.factory.product_list_item'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'app.controller.product_variant_image' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getApp_Controller_ProductVariantImageService()
    {
        $this->services['app.controller.product_variant_image'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('app.product_variant_image'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('app.repository.product_variant_image'), $this->get('app.factory.product_variant_image'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'app.controller.pub_banner' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getApp_Controller_PubBannerService()
    {
        $this->services['app.controller.pub_banner'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('app.pub_banner'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('app.repository.pub_banner'), $this->get('app.factory.pub_banner'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'app.controller.redirection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getApp_Controller_RedirectionService()
    {
        $this->services['app.controller.redirection'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('app.redirection'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('app.repository.redirection'), $this->get('app.factory.redirection'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'app.controller.right_image_block' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getApp_Controller_RightImageBlockService()
    {
        $this->services['app.controller.right_image_block'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('app.right_image_block'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('app.repository.right_image_block'), $this->get('app.factory.right_image_block'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine_phpcr.odm.default_document_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'app.controller.search' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Controller\SearchController A AppBundle\Controller\SearchController instance
     */
    protected function getApp_Controller_SearchService()
    {
        $this->services['app.controller.search'] = $instance = new \AppBundle\Controller\SearchController();

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'app.controller.single_image_block' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getApp_Controller_SingleImageBlockService()
    {
        $this->services['app.controller.single_image_block'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('app.single_image_block'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('app.repository.single_image_block'), $this->get('app.factory.single_image_block'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine_phpcr.odm.default_document_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'app.controller.slide_show_block' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getApp_Controller_SlideShowBlockService()
    {
        $this->services['app.controller.slide_show_block'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('app.slide_show_block'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('app.repository.slide_show_block'), $this->get('app.factory.slide_show_block'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'app.controller.string_block' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getApp_Controller_StringBlockService()
    {
        $this->services['app.controller.string_block'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('app.string_block'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('app.repository.string_block'), $this->get('app.factory.string_block'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine_phpcr.odm.default_document_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'app.controller.top_image_block' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getApp_Controller_TopImageBlockService()
    {
        $this->services['app.controller.top_image_block'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('app.top_image_block'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('app.repository.top_image_block'), $this->get('app.factory.top_image_block'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine_phpcr.odm.default_document_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'app.controller.topic' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Controller\TopicController A AppBundle\Controller\TopicController instance
     */
    protected function getApp_Controller_TopicService()
    {
        $this->services['app.controller.topic'] = $instance = new \AppBundle\Controller\TopicController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('app.topic'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('app.repository.topic'), $this->get('app.factory.topic'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'app.controller.well_image_block' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getApp_Controller_WellImageBlockService()
    {
        $this->services['app.controller.well_image_block'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('app.well_image_block'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('app.repository.well_image_block'), $this->get('app.factory.well_image_block'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine_phpcr.odm.default_document_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'app.factory.article' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Factory\ArticleFactory A AppBundle\Factory\ArticleFactory instance
     */
    protected function getApp_Factory_ArticleService()
    {
        $this->services['app.factory.article'] = $instance = new \AppBundle\Factory\ArticleFactory('AppBundle\\Entity\\Article');

        $instance->setProductRepository($this->get('sylius.repository.product'));
        $instance->setCustomerContext($this->get('app.context.customer'));
        $instance->setBlockFactory($this->get('app.factory.block'));

        return $instance;
    }

    /**
     * Gets the 'app.factory.article_content' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Factory\ArticleContentFactory A AppBundle\Factory\ArticleContentFactory instance
     */
    protected function getApp_Factory_ArticleContentService()
    {
        $this->services['app.factory.article_content'] = $instance = new \AppBundle\Factory\ArticleContentFactory('AppBundle\\Document\\ArticleContent');

        $instance->setDocumentManager($this->get('doctrine_phpcr.odm.default_document_manager'));

        return $instance;
    }

    /**
     * Gets the 'app.factory.article_image' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Resource\Factory\Factory A Sylius\Component\Resource\Factory\Factory instance
     */
    protected function getApp_Factory_ArticleImageService()
    {
        return $this->services['app.factory.article_image'] = new \Sylius\Component\Resource\Factory\Factory('AppBundle\\Entity\\ArticleImage');
    }

    /**
     * Gets the 'app.factory.article_review' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Resource\Factory\Factory A Sylius\Component\Resource\Factory\Factory instance
     */
    protected function getApp_Factory_ArticleReviewService()
    {
        return $this->services['app.factory.article_review'] = new \Sylius\Component\Resource\Factory\Factory('AppBundle\\Entity\\ArticleReview');
    }

    /**
     * Gets the 'app.factory.avatar' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Resource\Factory\Factory A Sylius\Component\Resource\Factory\Factory instance
     */
    protected function getApp_Factory_AvatarService()
    {
        return $this->services['app.factory.avatar'] = new \Sylius\Component\Resource\Factory\Factory('AppBundle\\Entity\\Avatar');
    }

    /**
     * Gets the 'app.factory.block' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Resource\Factory\Factory A Sylius\Component\Resource\Factory\Factory instance
     */
    protected function getApp_Factory_BlockService()
    {
        return $this->services['app.factory.block'] = new \Sylius\Component\Resource\Factory\Factory('AppBundle\\Entity\\Block');
    }

    /**
     * Gets the 'app.factory.block_image' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Resource\Factory\Factory A Sylius\Component\Resource\Factory\Factory instance
     */
    protected function getApp_Factory_BlockImageService()
    {
        return $this->services['app.factory.block_image'] = new \Sylius\Component\Resource\Factory\Factory('AppBundle\\Entity\\BlockImage');
    }

    /**
     * Gets the 'app.factory.blockquote_block' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Factory\BlockquoteFactory A AppBundle\Factory\BlockquoteFactory instance
     */
    protected function getApp_Factory_BlockquoteBlockService()
    {
        return $this->services['app.factory.blockquote_block'] = new \AppBundle\Factory\BlockquoteFactory('AppBundle\\Document\\BlockquoteBlock');
    }

    /**
     * Gets the 'app.factory.contact_request' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Factory\ContactRequestFactory A AppBundle\Factory\ContactRequestFactory instance
     */
    protected function getApp_Factory_ContactRequestService()
    {
        $this->services['app.factory.contact_request'] = $instance = new \AppBundle\Factory\ContactRequestFactory('AppBundle\\Entity\\ContactRequest');

        $instance->setCustomerContext($this->get('app.context.customer'));

        return $instance;
    }

    /**
     * Gets the 'app.factory.dealer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Resource\Factory\Factory A Sylius\Component\Resource\Factory\Factory instance
     */
    protected function getApp_Factory_DealerService()
    {
        return $this->services['app.factory.dealer'] = new \Sylius\Component\Resource\Factory\Factory('AppBundle\\Entity\\Dealer');
    }

    /**
     * Gets the 'app.factory.dealer_image' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Resource\Factory\Factory A Sylius\Component\Resource\Factory\Factory instance
     */
    protected function getApp_Factory_DealerImageService()
    {
        return $this->services['app.factory.dealer_image'] = new \Sylius\Component\Resource\Factory\Factory('AppBundle\\Entity\\DealerImage');
    }

    /**
     * Gets the 'app.factory.dealer_price' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Resource\Factory\Factory A Sylius\Component\Resource\Factory\Factory instance
     */
    protected function getApp_Factory_DealerPriceService()
    {
        return $this->services['app.factory.dealer_price'] = new \Sylius\Component\Resource\Factory\Factory('AppBundle\\Entity\\DealerPrice');
    }

    /**
     * Gets the 'app.factory.game_play' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Factory\GamePlayFactory A AppBundle\Factory\GamePlayFactory instance
     */
    protected function getApp_Factory_GamePlayService()
    {
        $this->services['app.factory.game_play'] = $instance = new \AppBundle\Factory\GamePlayFactory('AppBundle\\Entity\\GamePlay');

        $instance->setProductRepository($this->get('sylius.repository.product'));
        $instance->setCustomerContext($this->get('app.context.customer'));

        return $instance;
    }

    /**
     * Gets the 'app.factory.game_play_image' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Resource\Factory\Factory A Sylius\Component\Resource\Factory\Factory instance
     */
    protected function getApp_Factory_GamePlayImageService()
    {
        return $this->services['app.factory.game_play_image'] = new \Sylius\Component\Resource\Factory\Factory('AppBundle\\Entity\\GamePlayImage');
    }

    /**
     * Gets the 'app.factory.left_image_block' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Factory\SingleImageBlockFactory A AppBundle\Factory\SingleImageBlockFactory instance
     */
    protected function getApp_Factory_LeftImageBlockService()
    {
        return $this->services['app.factory.left_image_block'] = new \AppBundle\Factory\SingleImageBlockFactory('AppBundle\\Document\\LeftImageBlock');
    }

    /**
     * Gets the 'app.factory.not_found_page' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Resource\Factory\Factory A Sylius\Component\Resource\Factory\Factory instance
     */
    protected function getApp_Factory_NotFoundPageService()
    {
        return $this->services['app.factory.not_found_page'] = new \Sylius\Component\Resource\Factory\Factory('AppBundle\\Entity\\NotFound');
    }

    /**
     * Gets the 'app.factory.notification' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Factory\NotificationFactory A AppBundle\Factory\NotificationFactory instance
     */
    protected function getApp_Factory_NotificationService()
    {
        $this->services['app.factory.notification'] = $instance = new \AppBundle\Factory\NotificationFactory('AppBundle\\Entity\\Notification');

        $instance->setRouter($this->get('cmf_routing.router'));
        $instance->setTranslator($this->get('translator.default'));

        return $instance;
    }

    /**
     * Gets the 'app.factory.person' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Resource\Factory\Factory A Sylius\Component\Resource\Factory\Factory instance
     */
    protected function getApp_Factory_PersonService()
    {
        return $this->services['app.factory.person'] = new \Sylius\Component\Resource\Factory\Factory('AppBundle\\Entity\\Person');
    }

    /**
     * Gets the 'app.factory.person_image' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Resource\Factory\Factory A Sylius\Component\Resource\Factory\Factory instance
     */
    protected function getApp_Factory_PersonImageService()
    {
        return $this->services['app.factory.person_image'] = new \Sylius\Component\Resource\Factory\Factory('AppBundle\\Entity\\PersonImage');
    }

    /**
     * Gets the 'app.factory.player' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Resource\Factory\Factory A Sylius\Component\Resource\Factory\Factory instance
     */
    protected function getApp_Factory_PlayerService()
    {
        return $this->services['app.factory.player'] = new \Sylius\Component\Resource\Factory\Factory('AppBundle\\Entity\\Player');
    }

    /**
     * Gets the 'app.factory.post' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Factory\PostFactory A AppBundle\Factory\PostFactory instance
     */
    protected function getApp_Factory_PostService()
    {
        $this->services['app.factory.post'] = $instance = new \AppBundle\Factory\PostFactory('AppBundle\\Entity\\Post');

        $instance->setCustomerContext($this->get('app.context.customer'));

        return $instance;
    }

    /**
     * Gets the 'app.factory.price_list' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Resource\Factory\Factory A Sylius\Component\Resource\Factory\Factory instance
     */
    protected function getApp_Factory_PriceListService()
    {
        return $this->services['app.factory.price_list'] = new \Sylius\Component\Resource\Factory\Factory('AppBundle\\Entity\\PriceList');
    }

    /**
     * Gets the 'app.factory.product_barcode' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Resource\Factory\Factory A Sylius\Component\Resource\Factory\Factory instance
     */
    protected function getApp_Factory_ProductBarcodeService()
    {
        return $this->services['app.factory.product_barcode'] = new \Sylius\Component\Resource\Factory\Factory('AppBundle\\Entity\\ProductBarcode');
    }

    /**
     * Gets the 'app.factory.product_list' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Factory\ProductListFactory A AppBundle\Factory\ProductListFactory instance
     */
    protected function getApp_Factory_ProductListService()
    {
        return $this->services['app.factory.product_list'] = new \AppBundle\Factory\ProductListFactory('AppBundle\\Entity\\ProductList', $this->get('app.context.customer'), $this->get('translator.default'));
    }

    /**
     * Gets the 'app.factory.product_list_item' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Resource\Factory\Factory A Sylius\Component\Resource\Factory\Factory instance
     */
    protected function getApp_Factory_ProductListItemService()
    {
        return $this->services['app.factory.product_list_item'] = new \Sylius\Component\Resource\Factory\Factory('AppBundle\\Entity\\ProductListItem');
    }

    /**
     * Gets the 'app.factory.product_variant_image' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Resource\Factory\Factory A Sylius\Component\Resource\Factory\Factory instance
     */
    protected function getApp_Factory_ProductVariantImageService()
    {
        return $this->services['app.factory.product_variant_image'] = new \Sylius\Component\Resource\Factory\Factory('AppBundle\\Entity\\ProductVariantImage');
    }

    /**
     * Gets the 'app.factory.pub_banner' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Resource\Factory\Factory A Sylius\Component\Resource\Factory\Factory instance
     */
    protected function getApp_Factory_PubBannerService()
    {
        return $this->services['app.factory.pub_banner'] = new \Sylius\Component\Resource\Factory\Factory('AppBundle\\Entity\\PubBanner');
    }

    /**
     * Gets the 'app.factory.redirection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Resource\Factory\Factory A Sylius\Component\Resource\Factory\Factory instance
     */
    protected function getApp_Factory_RedirectionService()
    {
        return $this->services['app.factory.redirection'] = new \Sylius\Component\Resource\Factory\Factory('AppBundle\\Entity\\Redirection');
    }

    /**
     * Gets the 'app.factory.right_image_block' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Factory\SingleImageBlockFactory A AppBundle\Factory\SingleImageBlockFactory instance
     */
    protected function getApp_Factory_RightImageBlockService()
    {
        return $this->services['app.factory.right_image_block'] = new \AppBundle\Factory\SingleImageBlockFactory('AppBundle\\Document\\RightImageBlock');
    }

    /**
     * Gets the 'app.factory.single_image_block' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Factory\SingleImageBlockFactory A AppBundle\Factory\SingleImageBlockFactory instance
     */
    protected function getApp_Factory_SingleImageBlockService()
    {
        return $this->services['app.factory.single_image_block'] = new \AppBundle\Factory\SingleImageBlockFactory('AppBundle\\Document\\SingleImageBlock');
    }

    /**
     * Gets the 'app.factory.slide_show_block' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Resource\Factory\Factory A Sylius\Component\Resource\Factory\Factory instance
     */
    protected function getApp_Factory_SlideShowBlockService()
    {
        return $this->services['app.factory.slide_show_block'] = new \Sylius\Component\Resource\Factory\Factory('AppBundle\\Entity\\SlideShowBlock');
    }

    /**
     * Gets the 'app.factory.string_block' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Factory\StringBlockFactory A AppBundle\Factory\StringBlockFactory instance
     */
    protected function getApp_Factory_StringBlockService()
    {
        return $this->services['app.factory.string_block'] = new \AppBundle\Factory\StringBlockFactory('AppBundle\\Document\\StringBlock', $this->get('doctrine_phpcr.odm.default_document_manager'), '/cms/content');
    }

    /**
     * Gets the 'app.factory.top_image_block' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Factory\SingleImageBlockFactory A AppBundle\Factory\SingleImageBlockFactory instance
     */
    protected function getApp_Factory_TopImageBlockService()
    {
        return $this->services['app.factory.top_image_block'] = new \AppBundle\Factory\SingleImageBlockFactory('AppBundle\\Document\\TopImageBlock');
    }

    /**
     * Gets the 'app.factory.topic' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Factory\TopicFactory A AppBundle\Factory\TopicFactory instance
     */
    protected function getApp_Factory_TopicService()
    {
        $this->services['app.factory.topic'] = $instance = new \AppBundle\Factory\TopicFactory('AppBundle\\Entity\\Topic');

        $instance->setCustomerContext($this->get('app.context.customer'));
        $instance->setGamePlayRepository($this->get('app.repository.game_play'));
        $instance->setPostFactory($this->get('app.factory.post'));

        return $instance;
    }

    /**
     * Gets the 'app.factory.well_image_block' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Factory\SingleImageBlockFactory A AppBundle\Factory\SingleImageBlockFactory instance
     */
    protected function getApp_Factory_WellImageBlockService()
    {
        return $this->services['app.factory.well_image_block'] = new \AppBundle\Factory\SingleImageBlockFactory('AppBundle\\Document\\WellImageBlock');
    }

    /**
     * Gets the 'app.form.filter.article' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Form\Filter\ArticleFilterType A AppBundle\Form\Filter\ArticleFilterType instance
     */
    protected function getApp_Form_Filter_ArticleService()
    {
        return $this->services['app.form.filter.article'] = new \AppBundle\Form\Filter\ArticleFilterType();
    }

    /**
     * Gets the 'app.form.filter.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Form\Filter\ProductFilterType A AppBundle\Form\Filter\ProductFilterType instance
     */
    protected function getApp_Form_Filter_ProductService()
    {
        return $this->services['app.form.filter.product'] = new \AppBundle\Form\Filter\ProductFilterType();
    }

    /**
     * Gets the 'app.form.filter.query' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Form\Filter\QueryFilterType A AppBundle\Form\Filter\QueryFilterType instance
     */
    protected function getApp_Form_Filter_QueryService()
    {
        return $this->services['app.form.filter.query'] = new \AppBundle\Form\Filter\QueryFilterType();
    }

    /**
     * Gets the 'app.form.type.article' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Form\Type\ArticleType A AppBundle\Form\Type\ArticleType instance
     */
    protected function getApp_Form_Type_ArticleService()
    {
        $this->services['app.form.type.article'] = $instance = new \AppBundle\Form\Type\ArticleType();

        $instance->setManager($this->get('doctrine.orm.default_entity_manager'));

        return $instance;
    }

    /**
     * Gets the 'app.form.type.dealer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Form\Type\DealerType A AppBundle\Form\Type\DealerType instance
     */
    protected function getApp_Form_Type_DealerService()
    {
        $this->services['app.form.type.dealer'] = $instance = new \AppBundle\Form\Type\DealerType();

        $instance->setManager($this->get('doctrine.orm.default_entity_manager'));

        return $instance;
    }

    /**
     * Gets the 'app.form.type.game_rate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Form\Type\GameRateType A AppBundle\Form\Type\GameRateType instance
     */
    protected function getApp_Form_Type_GameRateService()
    {
        return $this->services['app.form.type.game_rate'] = new \AppBundle\Form\Type\GameRateType();
    }

    /**
     * Gets the 'app.form.type.post' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Form\Type\PostType A AppBundle\Form\Type\PostType instance
     */
    protected function getApp_Form_Type_PostService()
    {
        return $this->services['app.form.type.post'] = new \AppBundle\Form\Type\PostType();
    }

    /**
     * Gets the 'app.form.type.topic' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Form\Type\TopicType A AppBundle\Form\Type\TopicType instance
     */
    protected function getApp_Form_Type_TopicService()
    {
        $this->services['app.form.type.topic'] = $instance = new \AppBundle\Form\Type\TopicType();

        $instance->setAuthorizationChecker($this->get('security.authorization_checker'));

        return $instance;
    }

    /**
     * Gets the 'app.google_analytics.client' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Google_Client A Google_Client instance
     */
    protected function getApp_GoogleAnalytics_ClientService()
    {
        $this->services['app.google_analytics.client'] = $instance = new \Google_Client();

        $instance->setApplicationName('Jedisjeux');
        $instance->setAuthConfig(($this->targetDirs[3].'/app/Resources/credentials/client_secret.json'));
        $instance->addScope('https://www.googleapis.com/auth/analytics.readonly');

        return $instance;
    }

    /**
     * Gets the 'app.google_analytics.page_views' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\GoogleAnalytics\PageViewsService A AppBundle\GoogleAnalytics\PageViewsService instance
     */
    protected function getApp_GoogleAnalytics_PageViewsService()
    {
        return $this->services['app.google_analytics.page_views'] = new \AppBundle\GoogleAnalytics\PageViewsService($this->get('app.google_analytics.client'), 'XXXXXXXX');
    }

    /**
     * Gets the 'app.notification_manager.article' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\NotificationManager\ArticleNotificationManager A AppBundle\NotificationManager\ArticleNotificationManager instance
     */
    protected function getApp_NotificationManager_ArticleService()
    {
        return $this->services['app.notification_manager.article'] = new \AppBundle\NotificationManager\ArticleNotificationManager($this->get('app.factory.notification'), $this->get('doctrine.orm.default_entity_manager'), $this->get('sylius.repository.shop_user'), $this->get('cmf_routing.router'), $this->get('translator'));
    }

    /**
     * Gets the 'app.notification_manager.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\NotificationManager\ProductNotificationManager A AppBundle\NotificationManager\ProductNotificationManager instance
     */
    protected function getApp_NotificationManager_ProductService()
    {
        return $this->services['app.notification_manager.product'] = new \AppBundle\NotificationManager\ProductNotificationManager($this->get('app.factory.notification'), $this->get('doctrine.orm.default_entity_manager'), $this->get('sylius.repository.shop_user'), $this->get('cmf_routing.router'), $this->get('translator'));
    }

    /**
     * Gets the 'app.publication_manager.article' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\PublicationManager\ArticlePublicationManager A AppBundle\PublicationManager\ArticlePublicationManager instance
     */
    protected function getApp_PublicationManager_ArticleService()
    {
        return $this->services['app.publication_manager.article'] = new \AppBundle\PublicationManager\ArticlePublicationManager($this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'app.repository.article' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Repository\ArticleRepository A AppBundle\Repository\ArticleRepository instance
     */
    protected function getApp_Repository_ArticleService()
    {
        return $this->services['app.repository.article'] = new \AppBundle\Repository\ArticleRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('AppBundle\\Entity\\Article'));
    }

    /**
     * Gets the 'app.repository.article_content' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\DocumentRepository A Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\DocumentRepository instance
     */
    protected function getApp_Repository_ArticleContentService()
    {
        return $this->services['app.repository.article_content'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\DocumentRepository($this->get('doctrine_phpcr.odm.default_document_manager'), $this->get('doctrine_phpcr.odm.default_document_manager')->getClassMetadata('AppBundle\\Document\\ArticleContent'));
    }

    /**
     * Gets the 'app.repository.article_image' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository A Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository instance
     */
    protected function getApp_Repository_ArticleImageService()
    {
        return $this->services['app.repository.article_image'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('AppBundle\\Entity\\ArticleImage'));
    }

    /**
     * Gets the 'app.repository.article_review' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository A Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository instance
     */
    protected function getApp_Repository_ArticleReviewService()
    {
        return $this->services['app.repository.article_review'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('AppBundle\\Entity\\ArticleReview'));
    }

    /**
     * Gets the 'app.repository.avatar' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository A Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository instance
     */
    protected function getApp_Repository_AvatarService()
    {
        return $this->services['app.repository.avatar'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('AppBundle\\Entity\\Avatar'));
    }

    /**
     * Gets the 'app.repository.block' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository A Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository instance
     */
    protected function getApp_Repository_BlockService()
    {
        return $this->services['app.repository.block'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('AppBundle\\Entity\\Block'));
    }

    /**
     * Gets the 'app.repository.block_image' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository A Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository instance
     */
    protected function getApp_Repository_BlockImageService()
    {
        return $this->services['app.repository.block_image'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('AppBundle\\Entity\\BlockImage'));
    }

    /**
     * Gets the 'app.repository.blockquote_block' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\DocumentRepository A Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\DocumentRepository instance
     */
    protected function getApp_Repository_BlockquoteBlockService()
    {
        return $this->services['app.repository.blockquote_block'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\DocumentRepository($this->get('doctrine_phpcr.odm.default_document_manager'), $this->get('doctrine_phpcr.odm.default_document_manager')->getClassMetadata('AppBundle\\Document\\BlockquoteBlock'));
    }

    /**
     * Gets the 'app.repository.contact_request' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Repository\ContactRequestRepository A AppBundle\Repository\ContactRequestRepository instance
     */
    protected function getApp_Repository_ContactRequestService()
    {
        return $this->services['app.repository.contact_request'] = new \AppBundle\Repository\ContactRequestRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('AppBundle\\Entity\\ContactRequest'));
    }

    /**
     * Gets the 'app.repository.dealer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Repository\DealerRepository A AppBundle\Repository\DealerRepository instance
     */
    protected function getApp_Repository_DealerService()
    {
        return $this->services['app.repository.dealer'] = new \AppBundle\Repository\DealerRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('AppBundle\\Entity\\Dealer'));
    }

    /**
     * Gets the 'app.repository.dealer_image' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository A Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository instance
     */
    protected function getApp_Repository_DealerImageService()
    {
        return $this->services['app.repository.dealer_image'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('AppBundle\\Entity\\DealerImage'));
    }

    /**
     * Gets the 'app.repository.dealer_price' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Repository\DealerPriceRepository A AppBundle\Repository\DealerPriceRepository instance
     */
    protected function getApp_Repository_DealerPriceService()
    {
        return $this->services['app.repository.dealer_price'] = new \AppBundle\Repository\DealerPriceRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('AppBundle\\Entity\\DealerPrice'));
    }

    /**
     * Gets the 'app.repository.game_play' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Repository\GamePlayRepository A AppBundle\Repository\GamePlayRepository instance
     */
    protected function getApp_Repository_GamePlayService()
    {
        return $this->services['app.repository.game_play'] = new \AppBundle\Repository\GamePlayRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('AppBundle\\Entity\\GamePlay'));
    }

    /**
     * Gets the 'app.repository.game_play_image' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository A Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository instance
     */
    protected function getApp_Repository_GamePlayImageService()
    {
        return $this->services['app.repository.game_play_image'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('AppBundle\\Entity\\GamePlayImage'));
    }

    /**
     * Gets the 'app.repository.left_image_block' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\DocumentRepository A Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\DocumentRepository instance
     */
    protected function getApp_Repository_LeftImageBlockService()
    {
        return $this->services['app.repository.left_image_block'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\DocumentRepository($this->get('doctrine_phpcr.odm.default_document_manager'), $this->get('doctrine_phpcr.odm.default_document_manager')->getClassMetadata('AppBundle\\Document\\LeftImageBlock'));
    }

    /**
     * Gets the 'app.repository.not_found_page' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository A Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository instance
     */
    protected function getApp_Repository_NotFoundPageService()
    {
        return $this->services['app.repository.not_found_page'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('AppBundle\\Entity\\NotFound'));
    }

    /**
     * Gets the 'app.repository.notification' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository A Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository instance
     */
    protected function getApp_Repository_NotificationService()
    {
        return $this->services['app.repository.notification'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('AppBundle\\Entity\\Notification'));
    }

    /**
     * Gets the 'app.repository.person' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Repository\PersonRepository A AppBundle\Repository\PersonRepository instance
     */
    protected function getApp_Repository_PersonService()
    {
        return $this->services['app.repository.person'] = new \AppBundle\Repository\PersonRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('AppBundle\\Entity\\Person'));
    }

    /**
     * Gets the 'app.repository.person_image' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository A Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository instance
     */
    protected function getApp_Repository_PersonImageService()
    {
        return $this->services['app.repository.person_image'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('AppBundle\\Entity\\PersonImage'));
    }

    /**
     * Gets the 'app.repository.player' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository A Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository instance
     */
    protected function getApp_Repository_PlayerService()
    {
        return $this->services['app.repository.player'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('AppBundle\\Entity\\Player'));
    }

    /**
     * Gets the 'app.repository.post' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Repository\PostRepository A AppBundle\Repository\PostRepository instance
     */
    protected function getApp_Repository_PostService()
    {
        return $this->services['app.repository.post'] = new \AppBundle\Repository\PostRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('AppBundle\\Entity\\Post'));
    }

    /**
     * Gets the 'app.repository.price_list' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository A Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository instance
     */
    protected function getApp_Repository_PriceListService()
    {
        return $this->services['app.repository.price_list'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('AppBundle\\Entity\\PriceList'));
    }

    /**
     * Gets the 'app.repository.product_barcode' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository A Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository instance
     */
    protected function getApp_Repository_ProductBarcodeService()
    {
        return $this->services['app.repository.product_barcode'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('AppBundle\\Entity\\ProductBarcode'));
    }

    /**
     * Gets the 'app.repository.product_list' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Repository\ProductListRepository A AppBundle\Repository\ProductListRepository instance
     */
    protected function getApp_Repository_ProductListService()
    {
        return $this->services['app.repository.product_list'] = new \AppBundle\Repository\ProductListRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('AppBundle\\Entity\\ProductList'));
    }

    /**
     * Gets the 'app.repository.product_list_item' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Repository\ProductListItemRepository A AppBundle\Repository\ProductListItemRepository instance
     */
    protected function getApp_Repository_ProductListItemService()
    {
        return $this->services['app.repository.product_list_item'] = new \AppBundle\Repository\ProductListItemRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('AppBundle\\Entity\\ProductListItem'));
    }

    /**
     * Gets the 'app.repository.product_variant_image' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository A Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository instance
     */
    protected function getApp_Repository_ProductVariantImageService()
    {
        return $this->services['app.repository.product_variant_image'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('AppBundle\\Entity\\ProductVariantImage'));
    }

    /**
     * Gets the 'app.repository.pub_banner' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository A Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository instance
     */
    protected function getApp_Repository_PubBannerService()
    {
        return $this->services['app.repository.pub_banner'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('AppBundle\\Entity\\PubBanner'));
    }

    /**
     * Gets the 'app.repository.redirection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository A Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository instance
     */
    protected function getApp_Repository_RedirectionService()
    {
        return $this->services['app.repository.redirection'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('AppBundle\\Entity\\Redirection'));
    }

    /**
     * Gets the 'app.repository.right_image_block' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\DocumentRepository A Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\DocumentRepository instance
     */
    protected function getApp_Repository_RightImageBlockService()
    {
        return $this->services['app.repository.right_image_block'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\DocumentRepository($this->get('doctrine_phpcr.odm.default_document_manager'), $this->get('doctrine_phpcr.odm.default_document_manager')->getClassMetadata('AppBundle\\Document\\RightImageBlock'));
    }

    /**
     * Gets the 'app.repository.single_image_block' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\DocumentRepository A Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\DocumentRepository instance
     */
    protected function getApp_Repository_SingleImageBlockService()
    {
        return $this->services['app.repository.single_image_block'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\DocumentRepository($this->get('doctrine_phpcr.odm.default_document_manager'), $this->get('doctrine_phpcr.odm.default_document_manager')->getClassMetadata('AppBundle\\Document\\SingleImageBlock'));
    }

    /**
     * Gets the 'app.repository.slide_show_block' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository A Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository instance
     */
    protected function getApp_Repository_SlideShowBlockService()
    {
        return $this->services['app.repository.slide_show_block'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('AppBundle\\Entity\\SlideShowBlock'));
    }

    /**
     * Gets the 'app.repository.string_block' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Repository\StringBlockRepository A AppBundle\Repository\StringBlockRepository instance
     */
    protected function getApp_Repository_StringBlockService()
    {
        return $this->services['app.repository.string_block'] = new \AppBundle\Repository\StringBlockRepository($this->get('doctrine_phpcr.odm.default_document_manager'), $this->get('doctrine_phpcr.odm.default_document_manager')->getClassMetadata('AppBundle\\Document\\StringBlock'));
    }

    /**
     * Gets the 'app.repository.top_image_block' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\DocumentRepository A Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\DocumentRepository instance
     */
    protected function getApp_Repository_TopImageBlockService()
    {
        return $this->services['app.repository.top_image_block'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\DocumentRepository($this->get('doctrine_phpcr.odm.default_document_manager'), $this->get('doctrine_phpcr.odm.default_document_manager')->getClassMetadata('AppBundle\\Document\\TopImageBlock'));
    }

    /**
     * Gets the 'app.repository.topic' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Repository\TopicRepository A AppBundle\Repository\TopicRepository instance
     */
    protected function getApp_Repository_TopicService()
    {
        return $this->services['app.repository.topic'] = new \AppBundle\Repository\TopicRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('AppBundle\\Entity\\Topic'));
    }

    /**
     * Gets the 'app.repository.well_image_block' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\DocumentRepository A Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\DocumentRepository instance
     */
    protected function getApp_Repository_WellImageBlockService()
    {
        return $this->services['app.repository.well_image_block'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\DocumentRepository($this->get('doctrine_phpcr.odm.default_document_manager'), $this->get('doctrine_phpcr.odm.default_document_manager')->getClassMetadata('AppBundle\\Document\\WellImageBlock'));
    }

    /**
     * Gets the 'app.resource.article_content.doctrine.odm.phpcr.event_listener.name_filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameFilterListener A Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameFilterListener instance
     */
    protected function getApp_Resource_ArticleContent_Doctrine_Odm_Phpcr_EventListener_NameFilterService()
    {
        return $this->services['app.resource.article_content.doctrine.odm.phpcr.event_listener.name_filter'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameFilterListener($this->get('doctrine_phpcr.odm.default_document_manager'));
    }

    /**
     * Gets the 'app.resource.article_content.doctrine.odm.phpcr.event_listener.name_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameResolverListener A Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameResolverListener instance
     */
    protected function getApp_Resource_ArticleContent_Doctrine_Odm_Phpcr_EventListener_NameResolverService()
    {
        return $this->services['app.resource.article_content.doctrine.odm.phpcr.event_listener.name_resolver'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameResolverListener($this->get('doctrine_phpcr.odm.default_document_manager'));
    }

    /**
     * Gets the 'app.resource.blockquote_block.doctrine.odm.phpcr.event_listener.name_filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameFilterListener A Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameFilterListener instance
     */
    protected function getApp_Resource_BlockquoteBlock_Doctrine_Odm_Phpcr_EventListener_NameFilterService()
    {
        return $this->services['app.resource.blockquote_block.doctrine.odm.phpcr.event_listener.name_filter'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameFilterListener($this->get('doctrine_phpcr.odm.default_document_manager'));
    }

    /**
     * Gets the 'app.resource.blockquote_block.doctrine.odm.phpcr.event_listener.name_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameResolverListener A Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameResolverListener instance
     */
    protected function getApp_Resource_BlockquoteBlock_Doctrine_Odm_Phpcr_EventListener_NameResolverService()
    {
        return $this->services['app.resource.blockquote_block.doctrine.odm.phpcr.event_listener.name_resolver'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameResolverListener($this->get('doctrine_phpcr.odm.default_document_manager'));
    }

    /**
     * Gets the 'app.resource.left_image_block.doctrine.odm.phpcr.event_listener.name_filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameFilterListener A Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameFilterListener instance
     */
    protected function getApp_Resource_LeftImageBlock_Doctrine_Odm_Phpcr_EventListener_NameFilterService()
    {
        return $this->services['app.resource.left_image_block.doctrine.odm.phpcr.event_listener.name_filter'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameFilterListener($this->get('doctrine_phpcr.odm.default_document_manager'));
    }

    /**
     * Gets the 'app.resource.left_image_block.doctrine.odm.phpcr.event_listener.name_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameResolverListener A Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameResolverListener instance
     */
    protected function getApp_Resource_LeftImageBlock_Doctrine_Odm_Phpcr_EventListener_NameResolverService()
    {
        return $this->services['app.resource.left_image_block.doctrine.odm.phpcr.event_listener.name_resolver'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameResolverListener($this->get('doctrine_phpcr.odm.default_document_manager'));
    }

    /**
     * Gets the 'app.resource.right_image_block.doctrine.odm.phpcr.event_listener.name_filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameFilterListener A Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameFilterListener instance
     */
    protected function getApp_Resource_RightImageBlock_Doctrine_Odm_Phpcr_EventListener_NameFilterService()
    {
        return $this->services['app.resource.right_image_block.doctrine.odm.phpcr.event_listener.name_filter'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameFilterListener($this->get('doctrine_phpcr.odm.default_document_manager'));
    }

    /**
     * Gets the 'app.resource.right_image_block.doctrine.odm.phpcr.event_listener.name_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameResolverListener A Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameResolverListener instance
     */
    protected function getApp_Resource_RightImageBlock_Doctrine_Odm_Phpcr_EventListener_NameResolverService()
    {
        return $this->services['app.resource.right_image_block.doctrine.odm.phpcr.event_listener.name_resolver'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameResolverListener($this->get('doctrine_phpcr.odm.default_document_manager'));
    }

    /**
     * Gets the 'app.resource.single_image_block.doctrine.odm.phpcr.event_listener.name_filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameFilterListener A Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameFilterListener instance
     */
    protected function getApp_Resource_SingleImageBlock_Doctrine_Odm_Phpcr_EventListener_NameFilterService()
    {
        return $this->services['app.resource.single_image_block.doctrine.odm.phpcr.event_listener.name_filter'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameFilterListener($this->get('doctrine_phpcr.odm.default_document_manager'));
    }

    /**
     * Gets the 'app.resource.single_image_block.doctrine.odm.phpcr.event_listener.name_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameResolverListener A Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameResolverListener instance
     */
    protected function getApp_Resource_SingleImageBlock_Doctrine_Odm_Phpcr_EventListener_NameResolverService()
    {
        return $this->services['app.resource.single_image_block.doctrine.odm.phpcr.event_listener.name_resolver'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameResolverListener($this->get('doctrine_phpcr.odm.default_document_manager'));
    }

    /**
     * Gets the 'app.resource.string_block.doctrine.odm.phpcr.event_listener.name_filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameFilterListener A Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameFilterListener instance
     */
    protected function getApp_Resource_StringBlock_Doctrine_Odm_Phpcr_EventListener_NameFilterService()
    {
        return $this->services['app.resource.string_block.doctrine.odm.phpcr.event_listener.name_filter'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameFilterListener($this->get('doctrine_phpcr.odm.default_document_manager'));
    }

    /**
     * Gets the 'app.resource.string_block.doctrine.odm.phpcr.event_listener.name_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameResolverListener A Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameResolverListener instance
     */
    protected function getApp_Resource_StringBlock_Doctrine_Odm_Phpcr_EventListener_NameResolverService()
    {
        return $this->services['app.resource.string_block.doctrine.odm.phpcr.event_listener.name_resolver'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameResolverListener($this->get('doctrine_phpcr.odm.default_document_manager'));
    }

    /**
     * Gets the 'app.resource.top_image_block.doctrine.odm.phpcr.event_listener.name_filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameFilterListener A Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameFilterListener instance
     */
    protected function getApp_Resource_TopImageBlock_Doctrine_Odm_Phpcr_EventListener_NameFilterService()
    {
        return $this->services['app.resource.top_image_block.doctrine.odm.phpcr.event_listener.name_filter'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameFilterListener($this->get('doctrine_phpcr.odm.default_document_manager'));
    }

    /**
     * Gets the 'app.resource.top_image_block.doctrine.odm.phpcr.event_listener.name_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameResolverListener A Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameResolverListener instance
     */
    protected function getApp_Resource_TopImageBlock_Doctrine_Odm_Phpcr_EventListener_NameResolverService()
    {
        return $this->services['app.resource.top_image_block.doctrine.odm.phpcr.event_listener.name_resolver'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameResolverListener($this->get('doctrine_phpcr.odm.default_document_manager'));
    }

    /**
     * Gets the 'app.resource.well_image_block.doctrine.odm.phpcr.event_listener.name_filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameFilterListener A Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameFilterListener instance
     */
    protected function getApp_Resource_WellImageBlock_Doctrine_Odm_Phpcr_EventListener_NameFilterService()
    {
        return $this->services['app.resource.well_image_block.doctrine.odm.phpcr.event_listener.name_filter'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameFilterListener($this->get('doctrine_phpcr.odm.default_document_manager'));
    }

    /**
     * Gets the 'app.resource.well_image_block.doctrine.odm.phpcr.event_listener.name_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameResolverListener A Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameResolverListener instance
     */
    protected function getApp_Resource_WellImageBlock_Doctrine_Odm_Phpcr_EventListener_NameResolverService()
    {
        return $this->services['app.resource.well_image_block.doctrine.odm.phpcr.event_listener.name_resolver'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ODM\PHPCR\EventListener\NameResolverListener($this->get('doctrine_phpcr.odm.default_document_manager'));
    }

    /**
     * Gets the 'app.security.api_entry_point' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Security\Authentication\EntryPoint\ApiEntryPoint A AppBundle\Security\Authentication\EntryPoint\ApiEntryPoint instance
     */
    protected function getApp_Security_ApiEntryPointService()
    {
        return $this->services['app.security.api_entry_point'] = new \AppBundle\Security\Authentication\EntryPoint\ApiEntryPoint();
    }

    /**
     * Gets the 'app.serializer.liip_serializer_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Handler\LiipSerializeHandler A AppBundle\Handler\LiipSerializeHandler instance
     */
    protected function getApp_Serializer_LiipSerializerHandlerService()
    {
        return $this->services['app.serializer.liip_serializer_handler'] = new \AppBundle\Handler\LiipSerializeHandler($this->get('liip_imagine.cache.manager'));
    }

    /**
     * Gets the 'app.subscriber.add_topic_follower' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\EventSubscriber\AddTopicFollowerSubscriber A AppBundle\EventSubscriber\AddTopicFollowerSubscriber instance
     */
    protected function getApp_Subscriber_AddTopicFollowerService()
    {
        return $this->services['app.subscriber.add_topic_follower'] = new \AppBundle\EventSubscriber\AddTopicFollowerSubscriber($this->get('app.context.customer'));
    }

    /**
     * Gets the 'app.subscriber.calculate_post_count_by_topic' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\EventSubscriber\CalculatePostCountByTopicSubscriber A AppBundle\EventSubscriber\CalculatePostCountByTopicSubscriber instance
     */
    protected function getApp_Subscriber_CalculatePostCountByTopicService()
    {
        return $this->services['app.subscriber.calculate_post_count_by_topic'] = new \AppBundle\EventSubscriber\CalculatePostCountByTopicSubscriber($this->get('app.updater.post_count_by_topic'));
    }

    /**
     * Gets the 'app.subscriber.calculate_product_count_by_person' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\EventSubscriber\CalculateProductCountByPersonSubscriber A AppBundle\EventSubscriber\CalculateProductCountByPersonSubscriber instance
     */
    protected function getApp_Subscriber_CalculateProductCountByPersonService()
    {
        return $this->services['app.subscriber.calculate_product_count_by_person'] = new \AppBundle\EventSubscriber\CalculateProductCountByPersonSubscriber($this->get('app.updater.product_count_by_person'));
    }

    /**
     * Gets the 'app.subscriber.calculate_product_count_by_taxon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\EventSubscriber\CalculateProductCountByTaxonSubscriber A AppBundle\EventSubscriber\CalculateProductCountByTaxonSubscriber instance
     */
    protected function getApp_Subscriber_CalculateProductCountByTaxonService()
    {
        return $this->services['app.subscriber.calculate_product_count_by_taxon'] = new \AppBundle\EventSubscriber\CalculateProductCountByTaxonSubscriber($this->get('app.updater.product_count_by_taxon'));
    }

    /**
     * Gets the 'app.subscriber.calculate_topic_count_by_taxon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\EventSubscriber\CalculateTopicCountByTaxonSubscriber A AppBundle\EventSubscriber\CalculateTopicCountByTaxonSubscriber instance
     */
    protected function getApp_Subscriber_CalculateTopicCountByTaxonService()
    {
        return $this->services['app.subscriber.calculate_topic_count_by_taxon'] = new \AppBundle\EventSubscriber\CalculateTopicCountByTaxonSubscriber($this->get('app.updater.topic_count_by_taxon'));
    }

    /**
     * Gets the 'app.subscriber.create_topic_for_article' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\EventSubscriber\CreateTopicForArticleSubscriber A AppBundle\EventSubscriber\CreateTopicForArticleSubscriber instance
     */
    protected function getApp_Subscriber_CreateTopicForArticleService()
    {
        return $this->services['app.subscriber.create_topic_for_article'] = new \AppBundle\EventSubscriber\CreateTopicForArticleSubscriber($this->get('doctrine.orm.default_entity_manager'), $this->get('app.repository.topic'), $this->get('app.factory.topic'));
    }

    /**
     * Gets the 'app.subscriber.create_topic_for_game_play' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\EventSubscriber\CreateTopicForGamePlaySubscriber A AppBundle\EventSubscriber\CreateTopicForGamePlaySubscriber instance
     */
    protected function getApp_Subscriber_CreateTopicForGamePlayService()
    {
        return $this->services['app.subscriber.create_topic_for_game_play'] = new \AppBundle\EventSubscriber\CreateTopicForGamePlaySubscriber($this->get('doctrine.orm.default_entity_manager'), $this->get('app.repository.topic'), $this->get('app.factory.topic'));
    }

    /**
     * Gets the 'app.subscriber.create_topic_notification' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\EventSubscriber\CreateTopicNotificationSubscriber A AppBundle\EventSubscriber\CreateTopicNotificationSubscriber instance
     */
    protected function getApp_Subscriber_CreateTopicNotificationService()
    {
        return $this->services['app.subscriber.create_topic_notification'] = new \AppBundle\EventSubscriber\CreateTopicNotificationSubscriber($this->get('app.context.customer'), $this->get('app.factory.notification'), $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'app.subscriber.load_customer_element_object' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\EventSubscriber\CustomerListElementReferenceSubscriber A AppBundle\EventSubscriber\CustomerListElementReferenceSubscriber instance
     */
    protected function getApp_Subscriber_LoadCustomerElementObjectService()
    {
        return $this->services['app.subscriber.load_customer_element_object'] = new \AppBundle\EventSubscriber\CustomerListElementReferenceSubscriber();
    }

    /**
     * Gets the 'app.subscriber.send_contact_email' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\EventSubscriber\SendContactEmailSubscriber A AppBundle\EventSubscriber\SendContactEmailSubscriber instance
     */
    protected function getApp_Subscriber_SendContactEmailService()
    {
        return $this->services['app.subscriber.send_contact_email'] = new \AppBundle\EventSubscriber\SendContactEmailSubscriber($this->get('sylius.email_sender'));
    }

    /**
     * Gets the 'app.subscriber.send_registration_email' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\EventSubscriber\SendRegistrationEmailSubscriber A AppBundle\EventSubscriber\SendRegistrationEmailSubscriber instance
     */
    protected function getApp_Subscriber_SendRegistrationEmailService()
    {
        return $this->services['app.subscriber.send_registration_email'] = new \AppBundle\EventSubscriber\SendRegistrationEmailSubscriber($this->get('sylius.email_sender'));
    }

    /**
     * Gets the 'app.text.filter.bbcode2html' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\TextFilter\Bbcode2Html A AppBundle\TextFilter\Bbcode2Html instance
     */
    protected function getApp_Text_Filter_Bbcode2htmlService()
    {
        return $this->services['app.text.filter.bbcode2html'] = new \AppBundle\TextFilter\Bbcode2Html($this->get('doctrine.dbal.default_connection'), $this->get('sylius.repository.product_variant'));
    }

    /**
     * Gets the 'app.updater.post_count_by_topic' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Updater\PostCountByTopicUpdater A AppBundle\Updater\PostCountByTopicUpdater instance
     */
    protected function getApp_Updater_PostCountByTopicService()
    {
        return $this->services['app.updater.post_count_by_topic'] = new \AppBundle\Updater\PostCountByTopicUpdater();
    }

    /**
     * Gets the 'app.updater.product_count_by_person' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Updater\ProductCountByPersonUpdater A AppBundle\Updater\ProductCountByPersonUpdater instance
     */
    protected function getApp_Updater_ProductCountByPersonService()
    {
        return $this->services['app.updater.product_count_by_person'] = new \AppBundle\Updater\ProductCountByPersonUpdater($this->get('app.calculator.product_count_by_person'));
    }

    /**
     * Gets the 'app.updater.product_count_by_taxon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Updater\ProductCountByTaxonUpdater A AppBundle\Updater\ProductCountByTaxonUpdater instance
     */
    protected function getApp_Updater_ProductCountByTaxonService()
    {
        return $this->services['app.updater.product_count_by_taxon'] = new \AppBundle\Updater\ProductCountByTaxonUpdater($this->get('app.calculator.product_count_by_taxon'));
    }

    /**
     * Gets the 'app.updater.topic_count_by_taxon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Updater\TopicCountByTaxonUpdater A AppBundle\Updater\TopicCountByTaxonUpdater instance
     */
    protected function getApp_Updater_TopicCountByTaxonService()
    {
        return $this->services['app.updater.topic_count_by_taxon'] = new \AppBundle\Updater\TopicCountByTaxonUpdater($this->get('app.calculator.topic_count_by_taxon'));
    }

    /**
     * Gets the 'assetic.asset_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Assetic\Factory\LazyAssetManager A Assetic\Factory\LazyAssetManager instance
     */
    protected function getAssetic_AssetManagerService()
    {
        $a = $this->get('templating.loader');

        $this->services['assetic.asset_manager'] = $instance = new \Assetic\Factory\LazyAssetManager(${($_ = isset($this->services['assetic.asset_factory']) ? $this->services['assetic.asset_factory'] : $this->getAssetic_AssetFactoryService()) && false ?: '_'}, array('twig' => new \Assetic\Factory\Loader\CachedFormulaLoader(new \Assetic\Extension\Twig\TwigFormulaLoader($this->get('twig'), $this->get('monolog.logger.assetic', ContainerInterface::NULL_ON_INVALID_REFERENCE)), new \Assetic\Cache\ConfigCache((__DIR__.'/assetic/config')), true)));

        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'FrameworkBundle', ($this->targetDirs[3].'/app/Resources/FrameworkBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'FrameworkBundle', ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SecurityBundle', ($this->targetDirs[3].'/app/Resources/SecurityBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SecurityBundle', ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/SecurityBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'TwigBundle', ($this->targetDirs[3].'/app/Resources/TwigBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'TwigBundle', ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/TwigBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'MonologBundle', ($this->targetDirs[3].'/app/Resources/MonologBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'MonologBundle', ($this->targetDirs[3].'/vendor/symfony/monolog-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SwiftmailerBundle', ($this->targetDirs[3].'/app/Resources/SwiftmailerBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SwiftmailerBundle', ($this->targetDirs[3].'/vendor/symfony/swiftmailer-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'AsseticBundle', ($this->targetDirs[3].'/app/Resources/AsseticBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'AsseticBundle', ($this->targetDirs[3].'/vendor/symfony/assetic-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SensioFrameworkExtraBundle', ($this->targetDirs[3].'/app/Resources/SensioFrameworkExtraBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SensioFrameworkExtraBundle', ($this->targetDirs[3].'/vendor/sensio/framework-extra-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'JMSSerializerBundle', ($this->targetDirs[3].'/app/Resources/JMSSerializerBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'JMSSerializerBundle', ($this->targetDirs[3].'/vendor/jms/serializer-bundle/JMS/SerializerBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'JMSTranslationBundle', ($this->targetDirs[3].'/app/Resources/JMSTranslationBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'JMSTranslationBundle', ($this->targetDirs[3].'/vendor/jms/translation-bundle/JMS/TranslationBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'StofDoctrineExtensionsBundle', ($this->targetDirs[3].'/app/Resources/StofDoctrineExtensionsBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'StofDoctrineExtensionsBundle', ($this->targetDirs[3].'/vendor/stof/doctrine-extensions-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'WhiteOctoberPagerfantaBundle', ($this->targetDirs[3].'/app/Resources/WhiteOctoberPagerfantaBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'WhiteOctoberPagerfantaBundle', ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'BazingaHateoasBundle', ($this->targetDirs[3].'/app/Resources/BazingaHateoasBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'BazingaHateoasBundle', ($this->targetDirs[3].'/vendor/willdurand/hateoas-bundle/Bazinga/Bundle/HateoasBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SyliusLocaleBundle', ($this->targetDirs[3].'/app/Resources/SyliusLocaleBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SyliusLocaleBundle', ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SyliusProductBundle', ($this->targetDirs[3].'/app/Resources/SyliusProductBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SyliusProductBundle', ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SyliusUiBundle', ($this->targetDirs[3].'/app/Resources/SyliusUiBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SyliusUiBundle', ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SyliusUserBundle', ($this->targetDirs[3].'/app/Resources/SyliusUserBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SyliusUserBundle', ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SyliusCustomerBundle', ($this->targetDirs[3].'/app/Resources/SyliusCustomerBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SyliusCustomerBundle', ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SyliusMailerBundle', ($this->targetDirs[3].'/app/Resources/SyliusMailerBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SyliusMailerBundle', ($this->targetDirs[3].'/vendor/sylius/mailer-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SyliusReviewBundle', ($this->targetDirs[3].'/app/Resources/SyliusReviewBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SyliusReviewBundle', ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SyliusResourceBundle', ($this->targetDirs[3].'/app/Resources/SyliusResourceBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SyliusResourceBundle', ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SyliusAttributeBundle', ($this->targetDirs[3].'/app/Resources/SyliusAttributeBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SyliusAttributeBundle', ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SyliusTaxonomyBundle', ($this->targetDirs[3].'/app/Resources/SyliusTaxonomyBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SyliusTaxonomyBundle', ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'winzouStateMachineBundle', ($this->targetDirs[3].'/app/Resources/winzouStateMachineBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'winzouStateMachineBundle', ($this->targetDirs[3].'/vendor/winzou/state-machine-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SonataBlockBundle', ($this->targetDirs[3].'/app/Resources/SonataBlockBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SonataBlockBundle', ($this->targetDirs[3].'/vendor/sonata-project/block-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'CmfCoreBundle', ($this->targetDirs[3].'/app/Resources/CmfCoreBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'CmfCoreBundle', ($this->targetDirs[3].'/vendor/symfony-cmf/core-bundle/src/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'CmfBlockBundle', ($this->targetDirs[3].'/app/Resources/CmfBlockBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'CmfBlockBundle', ($this->targetDirs[3].'/vendor/symfony-cmf/block-bundle/src/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'CmfMediaBundle', ($this->targetDirs[3].'/app/Resources/CmfMediaBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'CmfMediaBundle', ($this->targetDirs[3].'/vendor/symfony-cmf/media-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'CmfRoutingBundle', ($this->targetDirs[3].'/app/Resources/CmfRoutingBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'CmfRoutingBundle', ($this->targetDirs[3].'/vendor/symfony-cmf/routing-bundle/src/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SyliusGridBundle', ($this->targetDirs[3].'/app/Resources/SyliusGridBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SyliusGridBundle', ($this->targetDirs[3].'/vendor/sylius/grid-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'FOSRestBundle', ($this->targetDirs[3].'/app/Resources/FOSRestBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'FOSRestBundle', ($this->targetDirs[3].'/vendor/friendsofsymfony/rest-bundle/FOS/RestBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'FOSJsRoutingBundle', ($this->targetDirs[3].'/app/Resources/FOSJsRoutingBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'FOSJsRoutingBundle', ($this->targetDirs[3].'/vendor/friendsofsymfony/jsrouting-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'FOSElasticaBundle', ($this->targetDirs[3].'/app/Resources/FOSElasticaBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'FOSElasticaBundle', ($this->targetDirs[3].'/vendor/friendsofsymfony/elastica-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'DoctrinePHPCRBundle', ($this->targetDirs[3].'/app/Resources/DoctrinePHPCRBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'DoctrinePHPCRBundle', ($this->targetDirs[3].'/vendor/doctrine/phpcr-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'DoctrineCacheBundle', ($this->targetDirs[3].'/app/Resources/DoctrineCacheBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'DoctrineCacheBundle', ($this->targetDirs[3].'/vendor/doctrine/doctrine-cache-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'DoctrineBundle', ($this->targetDirs[3].'/app/Resources/DoctrineBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'DoctrineBundle', ($this->targetDirs[3].'/vendor/doctrine/doctrine-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'DoctrineMigrationsBundle', ($this->targetDirs[3].'/app/Resources/DoctrineMigrationsBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'DoctrineMigrationsBundle', ($this->targetDirs[3].'/vendor/doctrine/doctrine-migrations-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'InfiniteFormBundle', ($this->targetDirs[3].'/app/Resources/InfiniteFormBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'InfiniteFormBundle', ($this->targetDirs[3].'/vendor/infinite-networks/form-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'KnpMenuBundle', ($this->targetDirs[3].'/app/Resources/KnpMenuBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'KnpMenuBundle', ($this->targetDirs[3].'/vendor/knplabs/knp-menu-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'MopaBootstrapBundle', ($this->targetDirs[3].'/app/Resources/MopaBootstrapBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'MopaBootstrapBundle', ($this->targetDirs[3].'/vendor/mopa/bootstrap-bundle/Mopa/Bundle/BootstrapBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'LiipImagineBundle', ($this->targetDirs[3].'/app/Resources/LiipImagineBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'LiipImagineBundle', ($this->targetDirs[3].'/vendor/liip/imagine-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'IvoryCKEditorBundle', ($this->targetDirs[3].'/app/Resources/IvoryCKEditorBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'IvoryCKEditorBundle', ($this->targetDirs[3].'/vendor/egeloen/ckeditor-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'DoctrineBehaviorsBundle', ($this->targetDirs[3].'/app/Resources/DoctrineBehaviorsBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'DoctrineBehaviorsBundle', ($this->targetDirs[3].'/vendor/knplabs/doctrine-behaviors/src/Bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ZenstruckRedirectBundle', ($this->targetDirs[3].'/app/Resources/ZenstruckRedirectBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ZenstruckRedirectBundle', ($this->targetDirs[3].'/vendor/zenstruck/redirect-bundle/src/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'BmatznerJQueryUIBundle', ($this->targetDirs[3].'/app/Resources/BmatznerJQueryUIBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'BmatznerJQueryUIBundle', ($this->targetDirs[3].'/vendor/bmatzner/jquery-ui-bundle/Bmatzner/JQueryUIBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'BmatznerJQueryBundle', ($this->targetDirs[3].'/app/Resources/BmatznerJQueryBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'BmatznerJQueryBundle', ($this->targetDirs[3].'/vendor/bmatzner/jquery-bundle/Bmatzner/JQueryBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'BmatznerFontAwesomeBundle', ($this->targetDirs[3].'/app/Resources/BmatznerFontAwesomeBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'BmatznerFontAwesomeBundle', ($this->targetDirs[3].'/vendor/bmatzner/fontawesome-bundle/Bmatzner/FontAwesomeBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'AppBundle', ($this->targetDirs[3].'/app/Resources/AppBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'AppBundle', ($this->targetDirs[3].'/src/AppBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'DebugBundle', ($this->targetDirs[3].'/app/Resources/DebugBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'DebugBundle', ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/DebugBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'WebProfilerBundle', ($this->targetDirs[3].'/app/Resources/WebProfilerBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'WebProfilerBundle', ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/WebProfilerBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SensioDistributionBundle', ($this->targetDirs[3].'/app/Resources/SensioDistributionBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SensioDistributionBundle', ($this->targetDirs[3].'/vendor/sensio/distribution-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, '', ($this->targetDirs[3].'/app/Resources/views'), '/\\.[^.]+\\.twig$/'), 'twig');

        return $instance;
    }

    /**
     * Gets the 'assetic.controller' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\AsseticBundle\Controller\AsseticController A Symfony\Bundle\AsseticBundle\Controller\AsseticController instance
     */
    protected function getAssetic_ControllerService()
    {
        return $this->services['assetic.controller'] = new \Symfony\Bundle\AsseticBundle\Controller\AsseticController($this->get('assetic.asset_manager'), new \Assetic\Cache\FilesystemCache((__DIR__.'/assetic/assets')), false, $this->get('profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'assetic.filter_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\AsseticBundle\FilterManager A Symfony\Bundle\AsseticBundle\FilterManager instance
     */
    protected function getAssetic_FilterManagerService()
    {
        return $this->services['assetic.filter_manager'] = new \Symfony\Bundle\AsseticBundle\FilterManager($this, array());
    }

    /**
     * Gets the 'assetic.request_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\AsseticBundle\EventListener\RequestListener A Symfony\Bundle\AsseticBundle\EventListener\RequestListener instance
     */
    protected function getAssetic_RequestListenerService()
    {
        return $this->services['assetic.request_listener'] = new \Symfony\Bundle\AsseticBundle\EventListener\RequestListener();
    }

    /**
     * Gets the 'assets._version__default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Asset\VersionStrategy\StaticVersionStrategy A Symfony\Component\Asset\VersionStrategy\StaticVersionStrategy instance
     */
    protected function getAssets_VersionDefaultService()
    {
        return $this->services['assets._version__default'] = new \Symfony\Component\Asset\VersionStrategy\StaticVersionStrategy('v0.4', '%s?version=%s');
    }

    /**
     * Gets the 'assets.context' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Asset\Context\RequestStackContext A Symfony\Component\Asset\Context\RequestStackContext instance
     */
    protected function getAssets_ContextService()
    {
        return $this->services['assets.context'] = new \Symfony\Component\Asset\Context\RequestStackContext($this->get('request_stack'));
    }

    /**
     * Gets the 'assets.packages' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Asset\Packages A Symfony\Component\Asset\Packages instance
     */
    protected function getAssets_PackagesService()
    {
        return $this->services['assets.packages'] = new \Symfony\Component\Asset\Packages(new \Symfony\Component\Asset\PathPackage('', $this->get('assets._version__default'), $this->get('assets.context')), array());
    }

    /**
     * Gets the 'bazinga_hateoas.expression_language' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Bazinga\Bundle\HateoasBundle\ExpressionLanguage\ExpressionLanguage A Bazinga\Bundle\HateoasBundle\ExpressionLanguage\ExpressionLanguage instance
     */
    protected function getBazingaHateoas_ExpressionLanguageService()
    {
        return $this->services['bazinga_hateoas.expression_language'] = new \Bazinga\Bundle\HateoasBundle\ExpressionLanguage\ExpressionLanguage();
    }

    /**
     * Gets the 'cache.app' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Cache\Adapter\FilesystemAdapter A Symfony\Component\Cache\Adapter\FilesystemAdapter instance
     */
    protected function getCache_AppService()
    {
        $this->services['cache.app'] = $instance = new \Symfony\Component\Cache\Adapter\FilesystemAdapter('H+mb-yjNNb', 0, (__DIR__.'/pools'));

        if ($this->has('monolog.logger.cache')) {
            $instance->setLogger($this->get('monolog.logger.cache', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }

        return $instance;
    }

    /**
     * Gets the 'cache.default_clearer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer A Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer instance
     */
    protected function getCache_DefaultClearerService()
    {
        $this->services['cache.default_clearer'] = $instance = new \Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer();

        $instance->addPool($this->get('cache.app'));
        $instance->addPool($this->get('cache.system'));
        $instance->addPool(${($_ = isset($this->services['cache.annotations']) ? $this->services['cache.annotations'] : $this->getCache_AnnotationsService()) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the 'cache.system' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface A Symfony\Component\Cache\Adapter\AdapterInterface instance
     */
    protected function getCache_SystemService()
    {
        return $this->services['cache.system'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('vk4VlOcKNM', 0, 'mSAx1P1h9OTOq7lHVG7fHU', (__DIR__.'/pools'), $this->get('monolog.logger.cache', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'cache_clearer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer A Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer instance
     */
    protected function getCacheClearerService()
    {
        return $this->services['cache_clearer'] = new \Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer(array(0 => $this->get('cache.default_clearer')));
    }

    /**
     * Gets the 'cache_warmer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate A Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate instance
     */
    protected function getCacheWarmerService()
    {
        $a = $this->get('kernel');
        $b = $this->get('templating.filename_parser');
        $c = $this->get('doctrine_phpcr');

        $d = new \Symfony\Bundle\FrameworkBundle\CacheWarmer\TemplateFinder($a, $b, ($this->targetDirs[3].'/app/Resources'));

        return $this->services['cache_warmer'] = new \Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate(array(0 => new \Symfony\Bundle\FrameworkBundle\CacheWarmer\TemplatePathsCacheWarmer($d, ${($_ = isset($this->services['templating.locator']) ? $this->services['templating.locator'] : $this->getTemplating_LocatorService()) && false ?: '_'}), 1 => new \Symfony\Bundle\AsseticBundle\CacheWarmer\AssetManagerCacheWarmer($this), 2 => $this->get('kernel.class_cache.cache_warmer'), 3 => new \Symfony\Bundle\FrameworkBundle\CacheWarmer\TranslationsCacheWarmer($this->get('translator.default')), 4 => new \Symfony\Bundle\FrameworkBundle\CacheWarmer\ValidatorCacheWarmer($this->get('validator.builder'), (__DIR__.'/validation.php'), \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('WvUIk8LfIg', 0, 'mSAx1P1h9OTOq7lHVG7fHU', (__DIR__.'/pools'), $this->get('monolog.logger.cache', ContainerInterface::NULL_ON_INVALID_REFERENCE))), 5 => new \Symfony\Bundle\FrameworkBundle\CacheWarmer\RouterCacheWarmer($this->get('cmf_routing.router')), 6 => new \Symfony\Bundle\FrameworkBundle\CacheWarmer\AnnotationsCacheWarmer(${($_ = isset($this->services['annotations.reader']) ? $this->services['annotations.reader'] : $this->getAnnotations_ReaderService()) && false ?: '_'}, (__DIR__.'/annotations.php'), ${($_ = isset($this->services['cache.annotations']) ? $this->services['cache.annotations'] : $this->getCache_AnnotationsService()) && false ?: '_'}), 7 => new \Symfony\Bundle\TwigBundle\CacheWarmer\TemplateCacheCacheWarmer($this, $d, array()), 8 => new \Symfony\Bundle\TwigBundle\CacheWarmer\TemplateCacheWarmer($this->get('twig'), new \Symfony\Bundle\TwigBundle\TemplateIterator($a, ($this->targetDirs[3].'/app'), array())), 9 => new \Symfony\Bridge\Doctrine\CacheWarmer\ProxyCacheWarmer($c), 10 => new \Doctrine\Bundle\PHPCRBundle\CacheWarmer\UniqueNodeTypeCacheWarmer($c), 11 => new \Symfony\Bridge\Doctrine\CacheWarmer\ProxyCacheWarmer($this->get('doctrine'))));
    }

    /**
     * Gets the 'cmf.block.action' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Bundle\BlockBundle\Block\ActionBlockService A Symfony\Cmf\Bundle\BlockBundle\Block\ActionBlockService instance
     */
    protected function getCmf_Block_ActionService()
    {
        return $this->services['cmf.block.action'] = new \Symfony\Cmf\Bundle\BlockBundle\Block\ActionBlockService($this->get('request_stack'), 'cmf.block.action', $this->get('templating'), $this->get('fragment.handler'));
    }

    /**
     * Gets the 'cmf.block.container' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Bundle\BlockBundle\Block\ContainerBlockService A Symfony\Cmf\Bundle\BlockBundle\Block\ContainerBlockService instance
     */
    protected function getCmf_Block_ContainerService()
    {
        return $this->services['cmf.block.container'] = new \Symfony\Cmf\Bundle\BlockBundle\Block\ContainerBlockService('cmf.block.container', $this->get('templating'), $this->get('sonata.block.renderer.default'), '');
    }

    /**
     * Gets the 'cmf.block.reference' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Bundle\BlockBundle\Block\ReferenceBlockService A Symfony\Cmf\Bundle\BlockBundle\Block\ReferenceBlockService instance
     */
    protected function getCmf_Block_ReferenceService()
    {
        return $this->services['cmf.block.reference'] = new \Symfony\Cmf\Bundle\BlockBundle\Block\ReferenceBlockService('cmf.block.reference', $this->get('templating'), $this->get('sonata.block.renderer.default'), $this->get('sonata.block.context_manager.default'));
    }

    /**
     * Gets the 'cmf.block.rss_controller' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Bundle\BlockBundle\Controller\RssController A Symfony\Cmf\Bundle\BlockBundle\Controller\RssController instance
     */
    protected function getCmf_Block_RssControllerService()
    {
        $this->services['cmf.block.rss_controller'] = $instance = new \Symfony\Cmf\Bundle\BlockBundle\Controller\RssController();

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'cmf.block.service' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Bundle\BlockBundle\Block\PhpcrBlockLoader A Symfony\Cmf\Bundle\BlockBundle\Block\PhpcrBlockLoader instance
     */
    protected function getCmf_Block_ServiceService()
    {
        $this->services['cmf.block.service'] = $instance = new \Symfony\Cmf\Bundle\BlockBundle\Block\PhpcrBlockLoader($this->get('doctrine_phpcr'), $this->get('cmf_core.publish_workflow.checker.default'), $this->get('request_stack'), $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE), 'sonata.block.service.empty');

        $instance->setManagerName(NULL);

        return $instance;
    }

    /**
     * Gets the 'cmf.block.simple' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Bundle\BlockBundle\Block\SimpleBlockService A Symfony\Cmf\Bundle\BlockBundle\Block\SimpleBlockService instance
     */
    protected function getCmf_Block_SimpleService()
    {
        return $this->services['cmf.block.simple'] = new \Symfony\Cmf\Bundle\BlockBundle\Block\SimpleBlockService('cmf.block.simple', $this->get('templating'));
    }

    /**
     * Gets the 'cmf.block.slideshow' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Bundle\BlockBundle\Block\ContainerBlockService A Symfony\Cmf\Bundle\BlockBundle\Block\ContainerBlockService instance
     */
    protected function getCmf_Block_SlideshowService()
    {
        return $this->services['cmf.block.slideshow'] = new \Symfony\Cmf\Bundle\BlockBundle\Block\ContainerBlockService('cmf.block.slideshow', $this->get('templating'), $this->get('sonata.block.renderer.default'), 'CmfBlockBundle:Block:block_slideshow.html.twig');
    }

    /**
     * Gets the 'cmf.block.string' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Bundle\BlockBundle\Block\StringBlockService A Symfony\Cmf\Bundle\BlockBundle\Block\StringBlockService instance
     */
    protected function getCmf_Block_StringService()
    {
        return $this->services['cmf.block.string'] = new \Symfony\Cmf\Bundle\BlockBundle\Block\StringBlockService('cmf.block.string', $this->get('templating'));
    }

    /**
     * Gets the 'cmf_block.initializer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Bundle\PHPCRBundle\Initializer\GenericInitializer A Doctrine\Bundle\PHPCRBundle\Initializer\GenericInitializer instance
     */
    protected function getCmfBlock_InitializerService()
    {
        return $this->services['cmf_block.initializer'] = new \Doctrine\Bundle\PHPCRBundle\Initializer\GenericInitializer('CmfBlockBundle', array(0 => '/cms/content'));
    }

    /**
     * Gets the 'cmf_block.templating.helper.block' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Bundle\BlockBundle\Templating\Helper\CmfBlockHelper A Symfony\Cmf\Bundle\BlockBundle\Templating\Helper\CmfBlockHelper instance
     */
    protected function getCmfBlock_Templating_Helper_BlockService()
    {
        return $this->services['cmf_block.templating.helper.block'] = new \Symfony\Cmf\Bundle\BlockBundle\Templating\Helper\CmfBlockHelper($this->get('sonata.block.templating.helper'), $this->get('cmf_block.templating.helper.embed_blocks_parser'), $this->get('logger'));
    }

    /**
     * Gets the 'cmf_block.templating.helper.embed_blocks_parser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Bundle\BlockBundle\Templating\Helper\EmbedBlocksParser A Symfony\Cmf\Bundle\BlockBundle\Templating\Helper\EmbedBlocksParser instance
     */
    protected function getCmfBlock_Templating_Helper_EmbedBlocksParserService()
    {
        return $this->services['cmf_block.templating.helper.embed_blocks_parser'] = new \Symfony\Cmf\Bundle\BlockBundle\Templating\Helper\EmbedBlocksParser('%embed-block|', '|end%');
    }

    /**
     * Gets the 'cmf_block.twig.embed_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Bundle\BlockBundle\Twig\Extension\CmfBlockExtension A Symfony\Cmf\Bundle\BlockBundle\Twig\Extension\CmfBlockExtension instance
     */
    protected function getCmfBlock_Twig_EmbedExtensionService()
    {
        return $this->services['cmf_block.twig.embed_extension'] = new \Symfony\Cmf\Bundle\BlockBundle\Twig\Extension\CmfBlockExtension($this->get('cmf_block.templating.helper.block'));
    }

    /**
     * Gets the 'cmf_core.form.type.checkbox_url_label' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Bundle\CoreBundle\Form\Type\CheckboxUrlLabelFormType A Symfony\Cmf\Bundle\CoreBundle\Form\Type\CheckboxUrlLabelFormType instance
     */
    protected function getCmfCore_Form_Type_CheckboxUrlLabelService()
    {
        return $this->services['cmf_core.form.type.checkbox_url_label'] = new \Symfony\Cmf\Bundle\CoreBundle\Form\Type\CheckboxUrlLabelFormType($this->get('cmf_routing.router'));
    }

    /**
     * Gets the 'cmf_core.publish_workflow.access_decision_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Authorization\AccessDecisionManager A Symfony\Component\Security\Core\Authorization\AccessDecisionManager instance
     */
    protected function getCmfCore_PublishWorkflow_AccessDecisionManagerService()
    {
        return $this->services['cmf_core.publish_workflow.access_decision_manager'] = new \Symfony\Component\Security\Core\Authorization\AccessDecisionManager(array(0 => new \Symfony\Cmf\Bundle\CoreBundle\PublishWorkflow\Voter\PublishableVoter(), 1 => new \Symfony\Cmf\Bundle\CoreBundle\PublishWorkflow\Voter\PublishTimePeriodVoter()), 'unanimous', true);
    }

    /**
     * Gets the 'cmf_core.publish_workflow.checker.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Bundle\CoreBundle\PublishWorkflow\PublishWorkflowChecker A Symfony\Cmf\Bundle\CoreBundle\PublishWorkflow\PublishWorkflowChecker instance
     */
    protected function getCmfCore_PublishWorkflow_Checker_DefaultService()
    {
        return $this->services['cmf_core.publish_workflow.checker.default'] = new \Symfony\Cmf\Bundle\CoreBundle\PublishWorkflow\PublishWorkflowChecker($this->get('security.token_storage'), $this->get('security.authorization_checker'), $this->get('cmf_core.publish_workflow.access_decision_manager'), 'ROLE_CAN_VIEW_NON_PUBLISHED');
    }

    /**
     * Gets the 'cmf_core.publish_workflow.request_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Bundle\CoreBundle\EventListener\PublishWorkflowListener A Symfony\Cmf\Bundle\CoreBundle\EventListener\PublishWorkflowListener instance
     */
    protected function getCmfCore_PublishWorkflow_RequestListenerService()
    {
        return $this->services['cmf_core.publish_workflow.request_listener'] = new \Symfony\Cmf\Bundle\CoreBundle\EventListener\PublishWorkflowListener($this->get('cmf_core.publish_workflow.checker.default'));
    }

    /**
     * Gets the 'cmf_media.browser_file_helper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Bundle\MediaBundle\File\BrowserFileHelper A Symfony\Cmf\Bundle\MediaBundle\File\BrowserFileHelper instance
     */
    protected function getCmfMedia_BrowserFileHelperService()
    {
        return $this->services['cmf_media.browser_file_helper'] = new \Symfony\Cmf\Bundle\MediaBundle\File\BrowserFileHelper(NULL);
    }

    /**
     * Gets the 'cmf_media.file_controller' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Bundle\MediaBundle\Controller\FileController A Symfony\Cmf\Bundle\MediaBundle\Controller\FileController instance
     */
    protected function getCmfMedia_FileControllerService()
    {
        return $this->services['cmf_media.file_controller'] = new \Symfony\Cmf\Bundle\MediaBundle\Controller\FileController($this->get('doctrine_phpcr'), NULL, '', '/cms/media', ${($_ = isset($this->services['cmf_media.persistence.phpcr.manager']) ? $this->services['cmf_media.persistence.phpcr.manager'] : $this->getCmfMedia_Persistence_Phpcr_ManagerService()) && false ?: '_'}, $this->get('cmf_media.persistence.phpcr.upload_file_helper'), 'ROLE_CAN_UPLOAD_FILE', $this->get('security.authorization_checker', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('security.token_storage', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'cmf_media.form.type.file' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Bundle\MediaBundle\Form\Type\FileType A Symfony\Cmf\Bundle\MediaBundle\Form\Type\FileType instance
     */
    protected function getCmfMedia_Form_Type_FileService()
    {
        return $this->services['cmf_media.form.type.file'] = new \Symfony\Cmf\Bundle\MediaBundle\Form\Type\FileType('Symfony\\Cmf\\Bundle\\MediaBundle\\Doctrine\\Phpcr\\File', $this->get('cmf_media.persistence.phpcr.upload_file_helper'));
    }

    /**
     * Gets the 'cmf_media.form.type.image' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Bundle\MediaBundle\Form\Type\ImageType A Symfony\Cmf\Bundle\MediaBundle\Form\Type\ImageType instance
     */
    protected function getCmfMedia_Form_Type_ImageService()
    {
        return $this->services['cmf_media.form.type.image'] = new \Symfony\Cmf\Bundle\MediaBundle\Form\Type\ImageType('Symfony\\Cmf\\Bundle\\MediaBundle\\Doctrine\\Phpcr\\Image', $this->get('cmf_media.persistence.phpcr.upload_file_helper'), true, 'image_upload_thumbnail');
    }

    /**
     * Gets the 'cmf_media.image_controller' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Bundle\MediaBundle\Controller\ImageController A Symfony\Cmf\Bundle\MediaBundle\Controller\ImageController instance
     */
    protected function getCmfMedia_ImageControllerService()
    {
        return $this->services['cmf_media.image_controller'] = new \Symfony\Cmf\Bundle\MediaBundle\Controller\ImageController($this->get('doctrine_phpcr'), NULL, '', '/cms/media', ${($_ = isset($this->services['cmf_media.persistence.phpcr.manager']) ? $this->services['cmf_media.persistence.phpcr.manager'] : $this->getCmfMedia_Persistence_Phpcr_ManagerService()) && false ?: '_'}, $this->get('cmf_media.persistence.phpcr.upload_image_helper'), 'ROLE_CAN_UPLOAD_FILE', $this->get('security.authorization_checker', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('security.token_storage', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'cmf_media.initializer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Bundle\PHPCRBundle\Initializer\GenericInitializer A Doctrine\Bundle\PHPCRBundle\Initializer\GenericInitializer instance
     */
    protected function getCmfMedia_InitializerService()
    {
        return $this->services['cmf_media.initializer'] = new \Doctrine\Bundle\PHPCRBundle\Initializer\GenericInitializer('CmfMediaBundle', array(0 => '/cms/media'), '
<cmf = \'http://cmf.symfony.com/phpcr/1.0\'>

[cmf:mediaNode] > nt:hierarchyNode, cmf:media

[cmf:media] mixin
  - description (string)
  - copyright (string)
  - authorName (string)
  - metadata (string) multiple
  - metadataKeys (string) multiple
  - metadataNulls (string) multiple

[cmf:image] > cmf:media mixin
  - width (long) mandatory
  - height (long) mandatory
            ');
    }

    /**
     * Gets the 'cmf_media.liip_imagine.doctrine_phpcr.binary.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Bundle\MediaBundle\Adapter\LiipImagine\CmfMediaDoctrineLoader A Symfony\Cmf\Bundle\MediaBundle\Adapter\LiipImagine\CmfMediaDoctrineLoader instance
     */
    protected function getCmfMedia_LiipImagine_DoctrinePhpcr_Binary_LoaderService()
    {
        return $this->services['cmf_media.liip_imagine.doctrine_phpcr.binary.loader'] = new \Symfony\Cmf\Bundle\MediaBundle\Adapter\LiipImagine\CmfMediaDoctrineLoader($this->get('liip_imagine'), $this->get('doctrine_phpcr'), NULL, ${($_ = isset($this->services['cmf_media.persistence.phpcr.manager']) ? $this->services['cmf_media.persistence.phpcr.manager'] : $this->getCmfMedia_Persistence_Phpcr_ManagerService()) && false ?: '_'}, 'Symfony\\Cmf\\Bundle\\MediaBundle\\Doctrine\\Phpcr\\Image');
    }

    /**
     * Gets the 'cmf_media.persistence.phpcr.subscriber.image_dimensions' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Bundle\MediaBundle\Doctrine\DoctrineImageDimensionsSubscriber A Symfony\Cmf\Bundle\MediaBundle\Doctrine\DoctrineImageDimensionsSubscriber instance
     */
    protected function getCmfMedia_Persistence_Phpcr_Subscriber_ImageDimensionsService()
    {
        return $this->services['cmf_media.persistence.phpcr.subscriber.image_dimensions'] = new \Symfony\Cmf\Bundle\MediaBundle\Doctrine\DoctrineImageDimensionsSubscriber($this->get('liip_imagine'));
    }

    /**
     * Gets the 'cmf_media.persistence.phpcr.subscriber.imagine_cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Bundle\MediaBundle\Doctrine\ImagineCacheInvalidatorSubscriber A Symfony\Cmf\Bundle\MediaBundle\Doctrine\ImagineCacheInvalidatorSubscriber instance
     */
    protected function getCmfMedia_Persistence_Phpcr_Subscriber_ImagineCacheService()
    {
        $this->services['cmf_media.persistence.phpcr.subscriber.imagine_cache'] = $instance = new \Symfony\Cmf\Bundle\MediaBundle\Doctrine\ImagineCacheInvalidatorSubscriber(${($_ = isset($this->services['cmf_media.persistence.phpcr.manager']) ? $this->services['cmf_media.persistence.phpcr.manager'] : $this->getCmfMedia_Persistence_Phpcr_ManagerService()) && false ?: '_'}, $this->get('liip_imagine.cache.manager'), array('upload_thumbnail' => 'image_upload_thumbnail', 0 => 'cmf_full', 1 => 'cmf_thumbnail', 2 => 'cmf_thumbnail_S', 3 => 'cmf_block_medium', 4 => 'cmf_magazine_item', 5 => 'cmf_magazine_item_wide', 6 => 'cmf_block'));

        $instance->setRequest(NULL);

        return $instance;
    }

    /**
     * Gets the 'cmf_media.persistence.phpcr.subscriber.stream_rewind' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Bundle\MediaBundle\Doctrine\DoctrineStreamRewindSubscriber A Symfony\Cmf\Bundle\MediaBundle\Doctrine\DoctrineStreamRewindSubscriber instance
     */
    protected function getCmfMedia_Persistence_Phpcr_Subscriber_StreamRewindService()
    {
        return $this->services['cmf_media.persistence.phpcr.subscriber.stream_rewind'] = new \Symfony\Cmf\Bundle\MediaBundle\Doctrine\DoctrineStreamRewindSubscriber();
    }

    /**
     * Gets the 'cmf_media.persistence.phpcr.upload_file_helper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Bundle\MediaBundle\File\UploadFileHelperDoctrine A Symfony\Cmf\Bundle\MediaBundle\File\UploadFileHelperDoctrine instance
     */
    protected function getCmfMedia_Persistence_Phpcr_UploadFileHelperService()
    {
        $this->services['cmf_media.persistence.phpcr.upload_file_helper'] = $instance = new \Symfony\Cmf\Bundle\MediaBundle\File\UploadFileHelperDoctrine($this->get('doctrine_phpcr'), NULL, 'Symfony\\Cmf\\Bundle\\MediaBundle\\Doctrine\\Phpcr\\File', '/cms/media', ${($_ = isset($this->services['cmf_media.persistence.phpcr.manager']) ? $this->services['cmf_media.persistence.phpcr.manager'] : $this->getCmfMedia_Persistence_Phpcr_ManagerService()) && false ?: '_'});

        $instance->addEditorHelper('default', $this->get('cmf_media.upload_editor_helper.default'));
        $instance->addEditorHelper('ckeditor', $this->get('cmf_media.upload_editor_helper.ckeditor'));

        return $instance;
    }

    /**
     * Gets the 'cmf_media.persistence.phpcr.upload_image_helper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Bundle\MediaBundle\File\UploadFileHelperDoctrine A Symfony\Cmf\Bundle\MediaBundle\File\UploadFileHelperDoctrine instance
     */
    protected function getCmfMedia_Persistence_Phpcr_UploadImageHelperService()
    {
        $this->services['cmf_media.persistence.phpcr.upload_image_helper'] = $instance = new \Symfony\Cmf\Bundle\MediaBundle\File\UploadFileHelperDoctrine($this->get('doctrine_phpcr'), NULL, 'Symfony\\Cmf\\Bundle\\MediaBundle\\Doctrine\\Phpcr\\Image', '/cms/media', ${($_ = isset($this->services['cmf_media.persistence.phpcr.manager']) ? $this->services['cmf_media.persistence.phpcr.manager'] : $this->getCmfMedia_Persistence_Phpcr_ManagerService()) && false ?: '_'});

        $instance->addEditorHelper('default', $this->get('cmf_media.upload_editor_helper.default'));
        $instance->addEditorHelper('ckeditor', $this->get('cmf_media.upload_editor_helper.ckeditor'));

        return $instance;
    }

    /**
     * Gets the 'cmf_media.serializer.handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Bundle\MediaBundle\Serializer\Handler A Symfony\Cmf\Bundle\MediaBundle\Serializer\Handler instance
     */
    protected function getCmfMedia_Serializer_HandlerService()
    {
        return $this->services['cmf_media.serializer.handler'] = new \Symfony\Cmf\Bundle\MediaBundle\Serializer\Handler(${($_ = isset($this->services['cmf_media.persistence.phpcr.manager']) ? $this->services['cmf_media.persistence.phpcr.manager'] : $this->getCmfMedia_Persistence_Phpcr_ManagerService()) && false ?: '_'}, $this->get('cmf_routing.router'));
    }

    /**
     * Gets the 'cmf_media.upload_editor_helper.ckeditor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Bundle\MediaBundle\Editor\Helper\UploadCkeditorHelper A Symfony\Cmf\Bundle\MediaBundle\Editor\Helper\UploadCkeditorHelper instance
     */
    protected function getCmfMedia_UploadEditorHelper_CkeditorService()
    {
        return $this->services['cmf_media.upload_editor_helper.ckeditor'] = new \Symfony\Cmf\Bundle\MediaBundle\Editor\Helper\UploadCkeditorHelper(${($_ = isset($this->services['cmf_media.persistence.phpcr.manager']) ? $this->services['cmf_media.persistence.phpcr.manager'] : $this->getCmfMedia_Persistence_Phpcr_ManagerService()) && false ?: '_'}, $this->get('cmf_routing.router'));
    }

    /**
     * Gets the 'cmf_media.upload_editor_helper.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Bundle\MediaBundle\Editor\Helper\UploadDefaultHelper A Symfony\Cmf\Bundle\MediaBundle\Editor\Helper\UploadDefaultHelper instance
     */
    protected function getCmfMedia_UploadEditorHelper_DefaultService()
    {
        return $this->services['cmf_media.upload_editor_helper.default'] = new \Symfony\Cmf\Bundle\MediaBundle\Editor\Helper\UploadDefaultHelper(${($_ = isset($this->services['cmf_media.persistence.phpcr.manager']) ? $this->services['cmf_media.persistence.phpcr.manager'] : $this->getCmfMedia_Persistence_Phpcr_ManagerService()) && false ?: '_'}, $this->get('cmf_routing.router'), array('description' => 'description', 'caption' => 'description'));
    }

    /**
     * Gets the 'cmf_routing.dynamic_router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Bundle\RoutingBundle\Routing\DynamicRouter A Symfony\Cmf\Bundle\RoutingBundle\Routing\DynamicRouter instance
     */
    protected function getCmfRouting_DynamicRouterService()
    {
        $this->services['cmf_routing.dynamic_router'] = $instance = new \Symfony\Cmf\Bundle\RoutingBundle\Routing\DynamicRouter(${($_ = isset($this->services['router.request_context']) ? $this->services['router.request_context'] : $this->getRouter_RequestContextService()) && false ?: '_'}, $this->get('cmf_routing.nested_matcher'), $this->get('cmf_routing.generator'), '', $this->get('debug.event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('cmf_routing.phpcr_route_provider'));

        $instance->setRequestStack($this->get('request_stack'));
        $instance->addRouteEnhancer($this->get('cmf_routing.enhancer.route_content'), 100);
        $instance->addRouteEnhancer(new \Symfony\Cmf\Component\Routing\Enhancer\FieldPresenceEnhancer(NULL, '_controller', 'cmf_content.controller:indexAction'), -100);
        $instance->addRouteEnhancer(new \Symfony\Cmf\Component\Routing\Enhancer\ContentRepositoryEnhancer($this->get('cmf_routing.phpcr_content_repository')), 100);

        return $instance;
    }

    /**
     * Gets the 'cmf_routing.enhancer.route_content' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Component\Routing\Enhancer\RouteContentEnhancer A Symfony\Cmf\Component\Routing\Enhancer\RouteContentEnhancer instance
     */
    protected function getCmfRouting_Enhancer_RouteContentService()
    {
        return $this->services['cmf_routing.enhancer.route_content'] = new \Symfony\Cmf\Component\Routing\Enhancer\RouteContentEnhancer('_route_object', '_content');
    }

    /**
     * Gets the 'cmf_routing.final_matcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Component\Routing\NestedMatcher\UrlMatcher A Symfony\Cmf\Component\Routing\NestedMatcher\UrlMatcher instance
     */
    protected function getCmfRouting_FinalMatcherService()
    {
        return $this->services['cmf_routing.final_matcher'] = new \Symfony\Cmf\Component\Routing\NestedMatcher\UrlMatcher(new \Symfony\Component\Routing\RouteCollection(), new \Symfony\Component\Routing\RequestContext());
    }

    /**
     * Gets the 'cmf_routing.generator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Component\Routing\ContentAwareGenerator A Symfony\Cmf\Component\Routing\ContentAwareGenerator instance
     */
    protected function getCmfRouting_GeneratorService()
    {
        $this->services['cmf_routing.generator'] = $instance = new \Symfony\Cmf\Component\Routing\ContentAwareGenerator($this->get('cmf_routing.phpcr_route_provider'), $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE));

        $instance->setContentRepository($this->get('cmf_routing.phpcr_content_repository'));

        return $instance;
    }

    /**
     * Gets the 'cmf_routing.initializer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Bundle\PHPCRBundle\Initializer\GenericInitializer A Doctrine\Bundle\PHPCRBundle\Initializer\GenericInitializer instance
     */
    protected function getCmfRouting_InitializerService()
    {
        return $this->services['cmf_routing.initializer'] = new \Doctrine\Bundle\PHPCRBundle\Initializer\GenericInitializer('CmfRoutingBundle', array(0 => '/cms/routes'));
    }

    /**
     * Gets the 'cmf_routing.nested_matcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Component\Routing\NestedMatcher\NestedMatcher A Symfony\Cmf\Component\Routing\NestedMatcher\NestedMatcher instance
     */
    protected function getCmfRouting_NestedMatcherService()
    {
        return $this->services['cmf_routing.nested_matcher'] = new \Symfony\Cmf\Component\Routing\NestedMatcher\NestedMatcher($this->get('cmf_routing.phpcr_route_provider'), $this->get('cmf_routing.final_matcher'));
    }

    /**
     * Gets the 'cmf_routing.persistence.doctrine.route_condition_metadata_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Bundle\RoutingBundle\Doctrine\RouteConditionMetadataListener A Symfony\Cmf\Bundle\RoutingBundle\Doctrine\RouteConditionMetadataListener instance
     */
    protected function getCmfRouting_Persistence_Doctrine_RouteConditionMetadataListenerService()
    {
        return $this->services['cmf_routing.persistence.doctrine.route_condition_metadata_listener'] = new \Symfony\Cmf\Bundle\RoutingBundle\Doctrine\RouteConditionMetadataListener();
    }

    /**
     * Gets the 'cmf_routing.phpcr_candidates_prefix' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Bundle\RoutingBundle\Doctrine\Phpcr\PrefixCandidates A Symfony\Cmf\Bundle\RoutingBundle\Doctrine\Phpcr\PrefixCandidates instance
     */
    protected function getCmfRouting_PhpcrCandidatesPrefixService()
    {
        $this->services['cmf_routing.phpcr_candidates_prefix'] = $instance = new \Symfony\Cmf\Bundle\RoutingBundle\Doctrine\Phpcr\PrefixCandidates(array(0 => '/cms/routes'), array(), $this->get('doctrine_phpcr'), 20);

        $instance->setManagerName(NULL);

        return $instance;
    }

    /**
     * Gets the 'cmf_routing.phpcr_content_repository' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Bundle\RoutingBundle\Doctrine\Phpcr\ContentRepository A Symfony\Cmf\Bundle\RoutingBundle\Doctrine\Phpcr\ContentRepository instance
     */
    protected function getCmfRouting_PhpcrContentRepositoryService()
    {
        $this->services['cmf_routing.phpcr_content_repository'] = $instance = new \Symfony\Cmf\Bundle\RoutingBundle\Doctrine\Phpcr\ContentRepository($this->get('doctrine_phpcr'));

        $instance->setManagerName(NULL);

        return $instance;
    }

    /**
     * Gets the 'cmf_routing.phpcr_route_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Bundle\RoutingBundle\Doctrine\Phpcr\RouteProvider A Symfony\Cmf\Bundle\RoutingBundle\Doctrine\Phpcr\RouteProvider instance
     */
    protected function getCmfRouting_PhpcrRouteProviderService()
    {
        $this->services['cmf_routing.phpcr_route_provider'] = $instance = new \Symfony\Cmf\Bundle\RoutingBundle\Doctrine\Phpcr\RouteProvider($this->get('doctrine_phpcr'), $this->get('cmf_routing.phpcr_candidates_prefix'), NULL, $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE));

        $instance->setManagerName(NULL);
        $instance->setRouteCollectionLimit(0);

        return $instance;
    }

    /**
     * Gets the 'cmf_routing.phpcrodm_route_idprefix_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Bundle\RoutingBundle\Doctrine\Phpcr\IdPrefixListener A Symfony\Cmf\Bundle\RoutingBundle\Doctrine\Phpcr\IdPrefixListener instance
     */
    protected function getCmfRouting_PhpcrodmRouteIdprefixListenerService()
    {
        return $this->services['cmf_routing.phpcrodm_route_idprefix_listener'] = new \Symfony\Cmf\Bundle\RoutingBundle\Doctrine\Phpcr\IdPrefixListener($this->get('cmf_routing.phpcr_candidates_prefix'));
    }

    /**
     * Gets the 'cmf_routing.redirect_controller' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Bundle\RoutingBundle\Controller\RedirectController A Symfony\Cmf\Bundle\RoutingBundle\Controller\RedirectController instance
     */
    protected function getCmfRouting_RedirectControllerService()
    {
        return $this->services['cmf_routing.redirect_controller'] = new \Symfony\Cmf\Bundle\RoutingBundle\Controller\RedirectController($this->get('cmf_routing.router'));
    }

    /**
     * Gets the 'cmf_routing.route_type_form_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Bundle\RoutingBundle\Form\Type\RouteTypeType A Symfony\Cmf\Bundle\RoutingBundle\Form\Type\RouteTypeType instance
     */
    protected function getCmfRouting_RouteTypeFormTypeService()
    {
        return $this->services['cmf_routing.route_type_form_type'] = new \Symfony\Cmf\Bundle\RoutingBundle\Form\Type\RouteTypeType();
    }

    /**
     * Gets the 'cmf_routing.router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Component\Routing\ChainRouter A Symfony\Cmf\Component\Routing\ChainRouter instance
     */
    protected function getCmfRouting_RouterService()
    {
        $a = ${($_ = isset($this->services['router.request_context']) ? $this->services['router.request_context'] : $this->getRouter_RequestContextService()) && false ?: '_'};

        $b = new \Symfony\Bundle\FrameworkBundle\Routing\Router($this, (__DIR__.'/assetic/routing.yml'), array('cache_dir' => __DIR__, 'debug' => true, 'generator_class' => 'Symfony\\Component\\Routing\\Generator\\UrlGenerator', 'generator_base_class' => 'Symfony\\Component\\Routing\\Generator\\UrlGenerator', 'generator_dumper_class' => 'Symfony\\Component\\Routing\\Generator\\Dumper\\PhpGeneratorDumper', 'generator_cache_class' => 'appDevDebugProjectContainerUrlGenerator', 'matcher_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher', 'matcher_base_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher', 'matcher_dumper_class' => 'Symfony\\Component\\Routing\\Matcher\\Dumper\\PhpMatcherDumper', 'matcher_cache_class' => 'appDevDebugProjectContainerUrlMatcher', 'strict_requirements' => true, 'resource_type' => 'yaml'), $a, $this->get('monolog.logger.router', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        $b->setConfigCacheFactory($this->get('config_cache_factory'));

        $this->services['cmf_routing.router'] = $instance = new \Symfony\Cmf\Component\Routing\ChainRouter($this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE));

        $instance->setContext($a);
        $instance->add($b, '100');
        $instance->add($this->get('cmf_routing.dynamic_router'), '20');

        return $instance;
    }

    /**
     * Gets the 'cmf_routing.validator.route_defaults' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Cmf\Bundle\RoutingBundle\Validator\Constraints\RouteDefaultsValidator A Symfony\Cmf\Bundle\RoutingBundle\Validator\Constraints\RouteDefaultsValidator instance
     */
    protected function getCmfRouting_Validator_RouteDefaultsService()
    {
        return $this->services['cmf_routing.validator.route_defaults'] = new \Symfony\Cmf\Bundle\RoutingBundle\Validator\Constraints\RouteDefaultsValidator($this->get('debug.controller_resolver'), $this->get('templating'));
    }

    /**
     * Gets the 'config_cache_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Config\ResourceCheckerConfigCacheFactory A Symfony\Component\Config\ResourceCheckerConfigCacheFactory instance
     */
    protected function getConfigCacheFactoryService()
    {
        return $this->services['config_cache_factory'] = new \Symfony\Component\Config\ResourceCheckerConfigCacheFactory(array(0 => new \Symfony\Component\Config\Resource\SelfCheckingResourceChecker()));
    }

    /**
     * Gets the 'data_collector.dump' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\DataCollector\DumpDataCollector A Symfony\Component\HttpKernel\DataCollector\DumpDataCollector instance
     */
    protected function getDataCollector_DumpService()
    {
        return $this->services['data_collector.dump'] = new \Symfony\Component\HttpKernel\DataCollector\DumpDataCollector($this->get('debug.stopwatch', ContainerInterface::NULL_ON_INVALID_REFERENCE), ${($_ = isset($this->services['debug.file_link_formatter']) ? $this->services['debug.file_link_formatter'] : $this->getDebug_FileLinkFormatterService()) && false ?: '_'}, 'UTF-8', $this->get('request_stack'), NULL);
    }

    /**
     * Gets the 'data_collector.form' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\DataCollector\FormDataCollector A Symfony\Component\Form\Extension\DataCollector\FormDataCollector instance
     */
    protected function getDataCollector_FormService()
    {
        return $this->services['data_collector.form'] = new \Symfony\Component\Form\Extension\DataCollector\FormDataCollector($this->get('data_collector.form.extractor'), false);
    }

    /**
     * Gets the 'data_collector.form.extractor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\DataCollector\FormDataExtractor A Symfony\Component\Form\Extension\DataCollector\FormDataExtractor instance
     */
    protected function getDataCollector_Form_ExtractorService()
    {
        return $this->services['data_collector.form.extractor'] = new \Symfony\Component\Form\Extension\DataCollector\FormDataExtractor();
    }

    /**
     * Gets the 'data_collector.request' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\DataCollector\RequestDataCollector A Symfony\Bundle\FrameworkBundle\DataCollector\RequestDataCollector instance
     */
    protected function getDataCollector_RequestService()
    {
        return $this->services['data_collector.request'] = new \Symfony\Bundle\FrameworkBundle\DataCollector\RequestDataCollector();
    }

    /**
     * Gets the 'data_collector.router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector A Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector instance
     */
    protected function getDataCollector_RouterService()
    {
        return $this->services['data_collector.router'] = new \Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector();
    }

    /**
     * Gets the 'data_collector.translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\DataCollector\TranslationDataCollector A Symfony\Component\Translation\DataCollector\TranslationDataCollector instance
     */
    protected function getDataCollector_TranslationService()
    {
        return $this->services['data_collector.translation'] = new \Symfony\Component\Translation\DataCollector\TranslationDataCollector($this->get('translator'));
    }

    /**
     * Gets the 'debug.argument_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\TraceableArgumentResolver A Symfony\Component\HttpKernel\Controller\TraceableArgumentResolver instance
     */
    protected function getDebug_ArgumentResolverService()
    {
        return $this->services['debug.argument_resolver'] = new \Symfony\Component\HttpKernel\Controller\TraceableArgumentResolver(new \Symfony\Component\HttpKernel\Controller\ArgumentResolver(new \Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory(), array(0 => new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver(), 1 => new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver(), 2 => new \Symfony\Bundle\SecurityBundle\SecurityUserValueResolver($this->get('security.token_storage')), 3 => new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver(), 4 => new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver())), $this->get('debug.stopwatch'));
    }

    /**
     * Gets the 'debug.controller_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\TraceableControllerResolver A Symfony\Component\HttpKernel\Controller\TraceableControllerResolver instance
     */
    protected function getDebug_ControllerResolverService()
    {
        return $this->services['debug.controller_resolver'] = new \Symfony\Component\HttpKernel\Controller\TraceableControllerResolver(new \Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver($this, ${($_ = isset($this->services['controller_name_converter']) ? $this->services['controller_name_converter'] : $this->getControllerNameConverterService()) && false ?: '_'}, $this->get('monolog.logger.request', ContainerInterface::NULL_ON_INVALID_REFERENCE)), $this->get('debug.stopwatch'), $this->get('debug.argument_resolver'));
    }

    /**
     * Gets the 'debug.debug_handlers_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener A Symfony\Component\HttpKernel\EventListener\DebugHandlersListener instance
     */
    protected function getDebug_DebugHandlersListenerService()
    {
        return $this->services['debug.debug_handlers_listener'] = new \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener(NULL, $this->get('monolog.logger.php', ContainerInterface::NULL_ON_INVALID_REFERENCE), -1, -1, true, ${($_ = isset($this->services['debug.file_link_formatter']) ? $this->services['debug.file_link_formatter'] : $this->getDebug_FileLinkFormatterService()) && false ?: '_'}, true);
    }

    /**
     * Gets the 'debug.dump_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\DumpListener A Symfony\Component\HttpKernel\EventListener\DumpListener instance
     */
    protected function getDebug_DumpListenerService()
    {
        return $this->services['debug.dump_listener'] = new \Symfony\Component\HttpKernel\EventListener\DumpListener($this->get('var_dumper.cloner'), $this->get('var_dumper.cli_dumper'));
    }

    /**
     * Gets the 'debug.event_dispatcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher A Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher instance
     */
    protected function getDebug_EventDispatcherService()
    {
        $this->services['debug.event_dispatcher'] = $instance = new \Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher(new \Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher($this), $this->get('debug.stopwatch'), $this->get('monolog.logger.event', ContainerInterface::NULL_ON_INVALID_REFERENCE));

        $instance->addListenerService('sylius.customer.post_register', array(0 => 'sylius.listener.user_registration', 1 => 'sendVerificationEmail'), 0);
        $instance->addListenerService('kernel.controller', array(0 => 'data_collector.router', 1 => 'onKernelController'), 0);
        $instance->addListenerService('kernel.request', array(0 => 'assetic.request_listener', 1 => 'onKernelRequest'), 0);
        $instance->addListenerService('kernel.request', array(0 => 'sylius.listener.request_locale_setter', 1 => 'onKernelRequest'), 4);
        $instance->addListenerService('sylius.user.pre_password_reset', array(0 => 'sylius.listener.password_updater', 1 => 'genericEventUpdater'), 0);
        $instance->addListenerService('sylius.user.pre_password_change', array(0 => 'sylius.listener.password_updater', 1 => 'genericEventUpdater'), 0);
        $instance->addListenerService('sylius.customer.pre_update', array(0 => 'sylius.listener.password_updater', 1 => 'customerUpdateEvent'), 0);
        $instance->addListenerService('sylius.user.password_reset.request.pin', array(0 => 'sylius.listener.user_mailer_listener', 1 => 'sendResetPasswordPinEmail'), 0);
        $instance->addListenerService('sylius.user.password_reset.request.token', array(0 => 'sylius.listener.user_mailer_listener', 1 => 'sendResetPasswordTokenEmail'), 0);
        $instance->addListenerService('sylius.user.email_verification.token', array(0 => 'sylius.listener.user_mailer_listener', 1 => 'sendVerificationTokenEmail'), 0);
        $instance->addListenerService('sylius.shop_user.post_create', array(0 => 'sylius.listener.shop_user.reloader', 1 => 'reloadUser'), 0);
        $instance->addListenerService('sylius.shop_user.post_update', array(0 => 'sylius.listener.shop_user.reloader', 1 => 'reloadUser'), 0);
        $instance->addListenerService('sylius.shop_user.pre_delete', array(0 => 'sylius.listener.shop_user_delete', 1 => 'deleteUser'), 0);
        $instance->addListenerService('sylius.admin_oauth_user.post_create', array(0 => 'sylius.listener.admin_oauth_user.reloader', 1 => 'reloadUser'), 0);
        $instance->addListenerService('sylius.admin_oauth_user.post_update', array(0 => 'sylius.listener.admin_oauth_user.reloader', 1 => 'reloadUser'), 0);
        $instance->addListenerService('sylius.admin_oauth_user.pre_delete', array(0 => 'sylius.listener.admin_oauth_user_delete', 1 => 'deleteUser'), 0);
        $instance->addListenerService('sylius.product_review.post_update', array(0 => 'sylius.listener.review_change', 1 => 'recalculateSubjectRating'), 0);
        $instance->addListenerService('sylius.product_review.post_delete', array(0 => 'sylius.listener.review_change', 1 => 'recalculateSubjectRating'), 0);
        $instance->addListenerService('app.article_content.pre_create', array(0 => 'app.resource.article_content.doctrine.odm.phpcr.event_listener.name_filter', 1 => 'onEvent'), 0);
        $instance->addListenerService('app.article_content.pre_update', array(0 => 'app.resource.article_content.doctrine.odm.phpcr.event_listener.name_filter', 1 => 'onEvent'), 0);
        $instance->addListenerService('app.article_content.pre_create', array(0 => 'app.resource.article_content.doctrine.odm.phpcr.event_listener.name_resolver', 1 => 'onEvent'), 0);
        $instance->addListenerService('app.article_content.pre_update', array(0 => 'app.resource.article_content.doctrine.odm.phpcr.event_listener.name_resolver', 1 => 'onEvent'), 0);
        $instance->addListenerService('app.blockquote_block.pre_create', array(0 => 'app.resource.blockquote_block.doctrine.odm.phpcr.event_listener.name_filter', 1 => 'onEvent'), 0);
        $instance->addListenerService('app.blockquote_block.pre_update', array(0 => 'app.resource.blockquote_block.doctrine.odm.phpcr.event_listener.name_filter', 1 => 'onEvent'), 0);
        $instance->addListenerService('app.blockquote_block.pre_create', array(0 => 'app.resource.blockquote_block.doctrine.odm.phpcr.event_listener.name_resolver', 1 => 'onEvent'), 0);
        $instance->addListenerService('app.blockquote_block.pre_update', array(0 => 'app.resource.blockquote_block.doctrine.odm.phpcr.event_listener.name_resolver', 1 => 'onEvent'), 0);
        $instance->addListenerService('app.left_image_block.pre_create', array(0 => 'app.resource.left_image_block.doctrine.odm.phpcr.event_listener.name_filter', 1 => 'onEvent'), 0);
        $instance->addListenerService('app.left_image_block.pre_update', array(0 => 'app.resource.left_image_block.doctrine.odm.phpcr.event_listener.name_filter', 1 => 'onEvent'), 0);
        $instance->addListenerService('app.left_image_block.pre_create', array(0 => 'app.resource.left_image_block.doctrine.odm.phpcr.event_listener.name_resolver', 1 => 'onEvent'), 0);
        $instance->addListenerService('app.left_image_block.pre_update', array(0 => 'app.resource.left_image_block.doctrine.odm.phpcr.event_listener.name_resolver', 1 => 'onEvent'), 0);
        $instance->addListenerService('app.right_image_block.pre_create', array(0 => 'app.resource.right_image_block.doctrine.odm.phpcr.event_listener.name_filter', 1 => 'onEvent'), 0);
        $instance->addListenerService('app.right_image_block.pre_update', array(0 => 'app.resource.right_image_block.doctrine.odm.phpcr.event_listener.name_filter', 1 => 'onEvent'), 0);
        $instance->addListenerService('app.right_image_block.pre_create', array(0 => 'app.resource.right_image_block.doctrine.odm.phpcr.event_listener.name_resolver', 1 => 'onEvent'), 0);
        $instance->addListenerService('app.right_image_block.pre_update', array(0 => 'app.resource.right_image_block.doctrine.odm.phpcr.event_listener.name_resolver', 1 => 'onEvent'), 0);
        $instance->addListenerService('app.single_image_block.pre_create', array(0 => 'app.resource.single_image_block.doctrine.odm.phpcr.event_listener.name_filter', 1 => 'onEvent'), 0);
        $instance->addListenerService('app.single_image_block.pre_update', array(0 => 'app.resource.single_image_block.doctrine.odm.phpcr.event_listener.name_filter', 1 => 'onEvent'), 0);
        $instance->addListenerService('app.single_image_block.pre_create', array(0 => 'app.resource.single_image_block.doctrine.odm.phpcr.event_listener.name_resolver', 1 => 'onEvent'), 0);
        $instance->addListenerService('app.single_image_block.pre_update', array(0 => 'app.resource.single_image_block.doctrine.odm.phpcr.event_listener.name_resolver', 1 => 'onEvent'), 0);
        $instance->addListenerService('app.string_block.pre_create', array(0 => 'app.resource.string_block.doctrine.odm.phpcr.event_listener.name_filter', 1 => 'onEvent'), 0);
        $instance->addListenerService('app.string_block.pre_update', array(0 => 'app.resource.string_block.doctrine.odm.phpcr.event_listener.name_filter', 1 => 'onEvent'), 0);
        $instance->addListenerService('app.string_block.pre_create', array(0 => 'app.resource.string_block.doctrine.odm.phpcr.event_listener.name_resolver', 1 => 'onEvent'), 0);
        $instance->addListenerService('app.string_block.pre_update', array(0 => 'app.resource.string_block.doctrine.odm.phpcr.event_listener.name_resolver', 1 => 'onEvent'), 0);
        $instance->addListenerService('app.top_image_block.pre_create', array(0 => 'app.resource.top_image_block.doctrine.odm.phpcr.event_listener.name_filter', 1 => 'onEvent'), 0);
        $instance->addListenerService('app.top_image_block.pre_update', array(0 => 'app.resource.top_image_block.doctrine.odm.phpcr.event_listener.name_filter', 1 => 'onEvent'), 0);
        $instance->addListenerService('app.top_image_block.pre_create', array(0 => 'app.resource.top_image_block.doctrine.odm.phpcr.event_listener.name_resolver', 1 => 'onEvent'), 0);
        $instance->addListenerService('app.top_image_block.pre_update', array(0 => 'app.resource.top_image_block.doctrine.odm.phpcr.event_listener.name_resolver', 1 => 'onEvent'), 0);
        $instance->addListenerService('app.well_image_block.pre_create', array(0 => 'app.resource.well_image_block.doctrine.odm.phpcr.event_listener.name_filter', 1 => 'onEvent'), 0);
        $instance->addListenerService('app.well_image_block.pre_update', array(0 => 'app.resource.well_image_block.doctrine.odm.phpcr.event_listener.name_filter', 1 => 'onEvent'), 0);
        $instance->addListenerService('app.well_image_block.pre_create', array(0 => 'app.resource.well_image_block.doctrine.odm.phpcr.event_listener.name_resolver', 1 => 'onEvent'), 0);
        $instance->addListenerService('app.well_image_block.pre_update', array(0 => 'app.resource.well_image_block.doctrine.odm.phpcr.event_listener.name_resolver', 1 => 'onEvent'), 0);
        $instance->addListenerService('kernel.response', array(0 => 'sonata.block.cache.handler.default', 1 => 'onKernelResponse'), 0);
        $instance->addListenerService('kernel.request', array(0 => 'fos_rest.body_listener', 1 => 'onKernelRequest'), 10);
        $instance->addListenerService('kernel.request', array(0 => 'knp_menu.listener.voters', 1 => 'onKernelRequest'), 0);
        $instance->addListenerService('kernel.exception', array(0 => 'zenstruck_redirect.redirect_listener', 1 => 'onKernelException'), 10);
        $instance->addListenerService('kernel.exception', array(0 => 'zenstruck_redirect.not_found_listener', 1 => 'onKernelException'), 0);
        $instance->addSubscriberService('app.subscriber.create_topic_for_article', 'AppBundle\\EventSubscriber\\CreateTopicForArticleSubscriber');
        $instance->addSubscriberService('app.subscriber.create_topic_for_game_play', 'AppBundle\\EventSubscriber\\CreateTopicForGamePlaySubscriber');
        $instance->addSubscriberService('app.subscriber.add_topic_follower', 'AppBundle\\EventSubscriber\\AddTopicFollowerSubscriber');
        $instance->addSubscriberService('app.subscriber.create_topic_notification', 'AppBundle\\EventSubscriber\\CreateTopicNotificationSubscriber');
        $instance->addSubscriberService('app.subscriber.send_registration_email', 'AppBundle\\EventSubscriber\\SendRegistrationEmailSubscriber');
        $instance->addSubscriberService('app.subscriber.send_contact_email', 'AppBundle\\EventSubscriber\\SendContactEmailSubscriber');
        $instance->addSubscriberService('app.subscriber.calculate_topic_count_by_taxon', 'AppBundle\\EventSubscriber\\CalculateTopicCountByTaxonSubscriber');
        $instance->addSubscriberService('app.subscriber.calculate_post_count_by_topic', 'AppBundle\\EventSubscriber\\CalculatePostCountByTopicSubscriber');
        $instance->addSubscriberService('app.subscriber.calculate_product_count_by_taxon', 'AppBundle\\EventSubscriber\\CalculateProductCountByTaxonSubscriber');
        $instance->addSubscriberService('app.subscriber.calculate_product_count_by_person', 'AppBundle\\EventSubscriber\\CalculateProductCountByPersonSubscriber');
        $instance->addSubscriberService('response_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener');
        $instance->addSubscriberService('streamed_response_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener');
        $instance->addSubscriberService('locale_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener');
        $instance->addSubscriberService('validate_request_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener');
        $instance->addSubscriberService('translator_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\TranslatorListener');
        $instance->addSubscriberService('session_listener', 'Symfony\\Bundle\\FrameworkBundle\\EventListener\\SessionListener');
        $instance->addSubscriberService('session.save_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener');
        $instance->addSubscriberService('fragment.listener', 'Symfony\\Component\\HttpKernel\\EventListener\\FragmentListener');
        $instance->addSubscriberService('profiler_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\ProfilerListener');
        $instance->addSubscriberService('data_collector.request', 'Symfony\\Bundle\\FrameworkBundle\\DataCollector\\RequestDataCollector');
        $instance->addSubscriberService('debug.debug_handlers_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener');
        $instance->addSubscriberService('router_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\RouterListener');
        $instance->addSubscriberService('security.firewall', 'Symfony\\Component\\Security\\Http\\Firewall');
        $instance->addSubscriberService('security.rememberme.response_listener', 'Symfony\\Component\\Security\\Http\\RememberMe\\ResponseListener');
        $instance->addSubscriberService('twig.exception_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\ExceptionListener');
        $instance->addSubscriberService('monolog.handler.console', 'Symfony\\Bridge\\Monolog\\Handler\\ConsoleHandler');
        $instance->addSubscriberService('swiftmailer.email_sender.listener', 'Symfony\\Bundle\\SwiftmailerBundle\\EventListener\\EmailSenderListener');
        $instance->addSubscriberService('sensio_framework_extra.controller.listener', 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener');
        $instance->addSubscriberService('sensio_framework_extra.converter.listener', 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener');
        $instance->addSubscriberService('sensio_framework_extra.view.listener', 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener');
        $instance->addSubscriberService('sensio_framework_extra.cache.listener', 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener');
        $instance->addSubscriberService('sensio_framework_extra.security.listener', 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\SecurityListener');
        $instance->addSubscriberService('pagerfanta.convert_not_valid_max_per_page_to_not_found_listener', 'WhiteOctober\\PagerfantaBundle\\EventListener\\ConvertNotValidMaxPerPageToNotFoundListener');
        $instance->addSubscriberService('pagerfanta.convert_not_valid_current_page_to_not_found_listener', 'WhiteOctober\\PagerfantaBundle\\EventListener\\ConvertNotValidCurrentPageToNotFoundListener');
        $instance->addSubscriberService('sylius.listener.shop_user_last_login', 'Sylius\\Bundle\\UserBundle\\EventListener\\UserLastLoginSubscriber');
        $instance->addSubscriberService('sylius.listener.admin_oauth_user_last_login', 'Sylius\\Bundle\\UserBundle\\EventListener\\UserLastLoginSubscriber');
        $instance->addSubscriberService('sylius.event_subscriber.resource_delete', 'Sylius\\Bundle\\ResourceBundle\\EventListener\\ResourceDeleteSubscriber');
        $instance->addSubscriberService('cmf_core.publish_workflow.request_listener', 'Symfony\\Cmf\\Bundle\\CoreBundle\\EventListener\\PublishWorkflowListener');
        $instance->addSubscriberService('debug.dump_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\DumpListener');
        $instance->addSubscriberService('web_profiler.debug_toolbar', 'Symfony\\Bundle\\WebProfilerBundle\\EventListener\\WebDebugToolbarListener');

        return $instance;
    }

    /**
     * Gets the 'debug.stopwatch' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Stopwatch\Stopwatch A Symfony\Component\Stopwatch\Stopwatch instance
     */
    protected function getDebug_StopwatchService()
    {
        return $this->services['debug.stopwatch'] = new \Symfony\Component\Stopwatch\Stopwatch();
    }

    /**
     * Gets the 'doctrine' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Registry A Doctrine\Bundle\DoctrineBundle\Registry instance
     */
    protected function getDoctrineService()
    {
        return $this->services['doctrine'] = new \Doctrine\Bundle\DoctrineBundle\Registry($this, array('default' => 'doctrine.dbal.default_connection'), array('default' => 'doctrine.orm.default_entity_manager'), 'default', 'default');
    }

    /**
     * Gets the 'doctrine.dbal.connection_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\ConnectionFactory A Doctrine\Bundle\DoctrineBundle\ConnectionFactory instance
     */
    protected function getDoctrine_Dbal_ConnectionFactoryService()
    {
        return $this->services['doctrine.dbal.connection_factory'] = new \Doctrine\Bundle\DoctrineBundle\ConnectionFactory(array());
    }

    /**
     * Gets the 'doctrine.dbal.default_connection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\DBAL\Connection A Doctrine\DBAL\Connection instance
     */
    protected function getDoctrine_Dbal_DefaultConnectionService()
    {
        $a = $this->get('annotation_reader');
        $b = $this->get('fos_elastica.indexable');

        $c = new \Doctrine\DBAL\Logging\LoggerChain();
        $c->addLogger(new \Symfony\Bridge\Doctrine\Logger\DbalLogger($this->get('monolog.logger.doctrine', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('debug.stopwatch', ContainerInterface::NULL_ON_INVALID_REFERENCE)));
        $c->addLogger(${($_ = isset($this->services['doctrine.dbal.logger.profiling.default']) ? $this->services['doctrine.dbal.logger.profiling.default'] : $this->getDoctrine_Dbal_Logger_Profiling_DefaultService()) && false ?: '_'});

        $d = new \Doctrine\DBAL\Configuration();
        $d->setSQLLogger($c);

        $e = new \Knp\DoctrineBehaviors\Reflection\ClassAnalyzer();

        $f = new \Gedmo\SoftDeleteable\SoftDeleteableListener();
        $f->setAnnotationReader($a);

        $g = new \Gedmo\Sortable\SortableListener();
        $g->setAnnotationReader($a);

        $h = new \Gedmo\Sluggable\SluggableListener();
        $h->setAnnotationReader($a);

        $i = new \Gedmo\Tree\TreeListener();
        $i->setAnnotationReader($a);

        $j = new \Doctrine\ORM\Tools\ResolveTargetEntityListener();
        $j->addResolveTargetEntity('Sylius\\Component\\Locale\\Model\\LocaleInterface', 'Sylius\\Component\\Locale\\Model\\Locale', array());
        $j->addResolveTargetEntity('Sylius\\Component\\Product\\Model\\ProductInterface', 'AppBundle\\Entity\\Product', array());
        $j->addResolveTargetEntity('Sylius\\Component\\Product\\Model\\ProductTranslationInterface', 'AppBundle\\Entity\\ProductTranslation', array());
        $j->addResolveTargetEntity('Sylius\\Component\\Product\\Model\\ProductVariantInterface', 'AppBundle\\Entity\\ProductVariant', array());
        $j->addResolveTargetEntity('Sylius\\Component\\Product\\Model\\ProductOptionInterface', 'Sylius\\Component\\Product\\Model\\ProductOption', array());
        $j->addResolveTargetEntity('Sylius\\Component\\Product\\Model\\ProductOptionTranslationInterface', 'Sylius\\Component\\Product\\Model\\ProductOptionTranslation', array());
        $j->addResolveTargetEntity('Sylius\\Component\\Product\\Model\\ProductOptionValueInterface', 'Sylius\\Component\\Product\\Model\\ProductOptionValue', array());
        $j->addResolveTargetEntity('Sylius\\Component\\Product\\Model\\ProductOptionValueTranslationInterface', 'Sylius\\Component\\Product\\Model\\ProductOptionValueTranslation', array());
        $j->addResolveTargetEntity('Sylius\\Component\\Product\\Model\\ProductAssociationInterface', 'Sylius\\Component\\Product\\Model\\ProductAssociation', array());
        $j->addResolveTargetEntity('Sylius\\Component\\Product\\Model\\ProductAssociationTypeInterface', 'Sylius\\Component\\Product\\Model\\ProductAssociationType', array());
        $j->addResolveTargetEntity('Sylius\\Component\\User\\Model\\UserInterface', 'AppBundle\\Entity\\User', array());
        $j->addResolveTargetEntity('Sylius\\Component\\User\\Model\\UserOAuthInterface', 'Sylius\\Component\\User\\Model\\UserOAuth', array());
        $j->addResolveTargetEntity('Sylius\\Component\\Customer\\Model\\CustomerInterface', 'AppBundle\\Entity\\Customer', array());
        $j->addResolveTargetEntity('Sylius\\Component\\Customer\\Model\\CustomerGroupInterface', 'Sylius\\Component\\Customer\\Model\\CustomerGroup', array());
        $j->addResolveTargetEntity('Sylius\\Component\\Review\\Model\\ReviewerInterface', 'AppBundle\\Entity\\Customer', array());
        $j->addResolveTargetEntity('Sylius\\Component\\Review\\Model\\ReviewInterface', 'AppBundle\\Entity\\ProductReview', array());
        $j->addResolveTargetEntity('Sylius\\Component\\Product\\Model\\ProductAttributeInterface', 'Sylius\\Component\\Product\\Model\\ProductAttribute', array());
        $j->addResolveTargetEntity('Sylius\\Component\\Product\\Model\\ProductAttributeTranslationInterface', 'Sylius\\Component\\Product\\Model\\ProductAttributeTranslation', array());
        $j->addResolveTargetEntity('Sylius\\Component\\Product\\Model\\ProductAttributeValueInterface', 'Sylius\\Component\\Product\\Model\\ProductAttributeValue', array());
        $j->addResolveTargetEntity('Sylius\\Component\\Taxonomy\\Model\\TaxonInterface', 'AppBundle\\Entity\\Taxon', array());
        $j->addResolveTargetEntity('Sylius\\Component\\Taxonomy\\Model\\TaxonTranslationInterface', 'AppBundle\\Entity\\TaxonTranslation', array());

        $k = new \Symfony\Bridge\Doctrine\ContainerAwareEventManager($this);
        $k->addEventSubscriber($this->get('sylius.event_subscriber.orm_mapped_super_class'));
        $k->addEventSubscriber($this->get('sylius.event_subscriber.orm_repository_class'));
        $k->addEventSubscriber($this->get('sylius.translation.translatable_listener.doctrine.orm'));
        $k->addEventSubscriber(new \Zenstruck\RedirectBundle\EventListener\Doctrine\RemoveNotFoundSubscriber($this));
        $k->addEventSubscriber(new \Knp\DoctrineBehaviors\ORM\Sluggable\SluggableSubscriber($e, true, 'Knp\\DoctrineBehaviors\\Model\\Sluggable\\Sluggable'));
        $k->addEventSubscriber(new \Knp\DoctrineBehaviors\ORM\Blameable\BlameableSubscriber($e, true, 'Knp\\DoctrineBehaviors\\Model\\Blameable\\Blameable', new \Knp\DoctrineBehaviors\ORM\Blameable\UserCallable($this), 'Sylius\\Component\\User\\Model\\User'));
        $k->addEventSubscriber(new \Knp\DoctrineBehaviors\ORM\Timestampable\TimestampableSubscriber($e, true, 'Knp\\DoctrineBehaviors\\Model\\Timestampable\\Timestampable', 'datetime'));
        $k->addEventSubscriber(new \Knp\DoctrineBehaviors\ORM\SoftDeletable\SoftDeletableSubscriber($e, true, 'Knp\\DoctrineBehaviors\\Model\\SoftDeletable\\SoftDeletable'));
        $k->addEventSubscriber($this->get('cmf_routing.persistence.doctrine.route_condition_metadata_listener'));
        $k->addEventSubscriber($this->get('sylius.doctrine.orm.event_subscriber.load_metadata.attribute'));
        $k->addEventSubscriber($this->get('sylius.doctrine.orm.event_subscriber.load_metadata.review'));
        $k->addEventSubscriber($f);
        $k->addEventSubscriber($g);
        $k->addEventSubscriber($h);
        $k->addEventSubscriber($i);
        $k->addEventSubscriber($this->get('app.subscriber.load_customer_element_object'));
        $k->addEventListener(array(0 => 'loadClassMetadata'), $j);
        $k->addEventListener(array(0 => 'loadClassMetadata'), $this->get('doctrine.orm.default_listeners.attach_entity_listeners'));
        $k->addEventListener(array(0 => 'postPersist', 1 => 'postUpdate', 2 => 'preRemove', 3 => 'postFlush'), new \FOS\ElasticaBundle\Doctrine\Listener($this->get('fos_elastica.object_persister.jedisjeux.topic'), $b, array('identifier' => 'id', 'indexName' => 'jedisjeux', 'typeName' => 'topic'), NULL));
        $k->addEventListener(array(0 => 'postGenerateSchema'), 'doctrine_phpcr.jackalope_doctrine_dbal.schema_listener');
        $k->addEventListener(array(0 => 'postPersist', 1 => 'postUpdate', 2 => 'preRemove', 3 => 'postFlush'), new \FOS\ElasticaBundle\Doctrine\Listener($this->get('fos_elastica.object_persister.jedisjeux.person'), $b, array('identifier' => 'id', 'indexName' => 'jedisjeux', 'typeName' => 'person'), NULL));
        $k->addEventListener(array(0 => 'postPersist', 1 => 'postUpdate', 2 => 'preRemove', 3 => 'postFlush'), new \FOS\ElasticaBundle\Doctrine\Listener($this->get('fos_elastica.object_persister.jedisjeux.taxon'), $b, array('identifier' => 'id', 'indexName' => 'jedisjeux', 'typeName' => 'taxon'), NULL));
        $k->addEventListener(array(0 => 'postPersist', 1 => 'postUpdate', 2 => 'preRemove', 3 => 'postFlush'), new \FOS\ElasticaBundle\Doctrine\Listener($this->get('fos_elastica.object_persister.jedisjeux.product'), $b, array('identifier' => 'id', 'indexName' => 'jedisjeux', 'typeName' => 'product'), NULL));
        $k->addEventListener(array(0 => 'postPersist', 1 => 'postUpdate', 2 => 'preRemove', 3 => 'postFlush'), new \FOS\ElasticaBundle\Doctrine\Listener($this->get('fos_elastica.object_persister.jedisjeux.user'), $b, array('identifier' => 'id', 'indexName' => 'jedisjeux', 'typeName' => 'user'), NULL));
        $k->addEventListener(array(0 => 'postPersist', 1 => 'postUpdate', 2 => 'preRemove', 3 => 'postFlush'), new \FOS\ElasticaBundle\Doctrine\Listener($this->get('fos_elastica.object_persister.jedisjeux.article'), $b, array('identifier' => 'id', 'indexName' => 'jedisjeux', 'typeName' => 'article'), NULL));
        $k->addEventListener(array(0 => 'prePersist', 1 => 'preUpdate'), $this->get('sylius.listener.password_updater'));
        $k->addEventListener(array(0 => 'prePersist', 1 => 'preUpdate'), $this->get('sylius.listener.canonicalizer'));

        return $this->services['doctrine.dbal.default_connection'] = $this->get('doctrine.dbal.connection_factory')->createConnection(array('driver' => 'pdo_mysql', 'host' => 'jdj.dev', 'port' => NULL, 'dbname' => 'jdj_dev', 'user' => 'root', 'password' => 'vagrant', 'charset' => 'UTF8', 'driverOptions' => array(), 'defaultTableOptions' => array()), $d, $k, array());
    }

    /**
     * Gets the 'doctrine.orm.default_entity_listener_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerAwareEntityListenerResolver A Doctrine\Bundle\DoctrineBundle\Mapping\ContainerAwareEntityListenerResolver instance
     */
    protected function getDoctrine_Orm_DefaultEntityListenerResolverService()
    {
        return $this->services['doctrine.orm.default_entity_listener_resolver'] = new \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerAwareEntityListenerResolver($this);
    }

    /**
     * Gets the 'doctrine.orm.default_entity_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Doctrine\ORM\EntityManager A Doctrine\ORM\EntityManager instance
     */
    public function getDoctrine_Orm_DefaultEntityManagerService($lazyLoad = true)
    {
        if ($lazyLoad) {

            return $this->services['doctrine.orm.default_entity_manager'] = DoctrineORMEntityManager_000000004b511ba6000000000f6225f6877f40b66baaf9ca0d0afe40b8a3d26d::staticProxyConstructor(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) {
                    $wrappedInstance = $this->getDoctrine_Orm_DefaultEntityManagerService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        $a = new \Doctrine\Common\Persistence\Mapping\Driver\MappingDriverChain();
        $a->addDriver(new \Doctrine\ORM\Mapping\Driver\AnnotationDriver($this->get('annotation_reader'), array(0 => ($this->targetDirs[3].'/src/AppBundle/Entity'))), 'AppBundle\\Entity');
        $a->addDriver(new \Doctrine\ORM\Mapping\Driver\XmlDriver(new \Doctrine\Common\Persistence\Mapping\Driver\SymfonyFileLocator(array(($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/config/doctrine/model') => 'Sylius\\Component\\Locale\\Model'), '.orm.xml')), 'Sylius\\Component\\Locale\\Model');
        $a->addDriver(new \Doctrine\ORM\Mapping\Driver\XmlDriver(new \Doctrine\Common\Persistence\Mapping\Driver\SymfonyFileLocator(array(($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/config/doctrine/model') => 'Sylius\\Component\\Product\\Model'), '.orm.xml')), 'Sylius\\Component\\Product\\Model');
        $a->addDriver(new \Doctrine\ORM\Mapping\Driver\XmlDriver(new \Doctrine\Common\Persistence\Mapping\Driver\SymfonyFileLocator(array(($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/config/doctrine/model') => 'Sylius\\Component\\User\\Model'), '.orm.xml')), 'Sylius\\Component\\User\\Model');
        $a->addDriver(new \Doctrine\ORM\Mapping\Driver\XmlDriver(new \Doctrine\Common\Persistence\Mapping\Driver\SymfonyFileLocator(array(($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/config/doctrine/model') => 'Sylius\\Component\\Customer\\Model'), '.orm.xml')), 'Sylius\\Component\\Customer\\Model');
        $a->addDriver(new \Doctrine\ORM\Mapping\Driver\XmlDriver(new \Doctrine\Common\Persistence\Mapping\Driver\SymfonyFileLocator(array(($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/config/doctrine/model') => 'Sylius\\Component\\Review\\Model'), '.orm.xml')), 'Sylius\\Component\\Review\\Model');
        $a->addDriver(new \Doctrine\ORM\Mapping\Driver\XmlDriver(new \Doctrine\Common\Persistence\Mapping\Driver\SymfonyFileLocator(array(($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/config/doctrine/model') => 'Sylius\\Component\\Attribute\\Model'), '.orm.xml')), 'Sylius\\Component\\Attribute\\Model');
        $a->addDriver(new \Doctrine\ORM\Mapping\Driver\XmlDriver(new \Doctrine\Common\Persistence\Mapping\Driver\SymfonyFileLocator(array(($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/config/doctrine/model') => 'Sylius\\Component\\Taxonomy\\Model'), '.orm.xml')), 'Sylius\\Component\\Taxonomy\\Model');
        $a->addDriver(new \Doctrine\ORM\Mapping\Driver\XmlDriver(new \Doctrine\Common\Persistence\Mapping\Driver\SymfonyFileLocator(array(($this->targetDirs[3].'/vendor/zenstruck/redirect-bundle/src/Resources/config/doctrine-mapping') => 'Zenstruck\\RedirectBundle\\Model'), '.orm.xml')), 'Zenstruck\\RedirectBundle\\Model');

        $b = new \Doctrine\ORM\Configuration();
        $b->setEntityNamespaces(array('AppBundle' => 'AppBundle\\Entity'));
        $b->setMetadataCacheImpl($this->get('doctrine_cache.providers.doctrine.orm.default_metadata_cache'));
        $b->setQueryCacheImpl($this->get('doctrine_cache.providers.doctrine.orm.default_query_cache'));
        $b->setResultCacheImpl($this->get('doctrine_cache.providers.doctrine.orm.default_result_cache'));
        $b->setMetadataDriverImpl($a);
        $b->setProxyDir((__DIR__.'/doctrine/orm/Proxies'));
        $b->setProxyNamespace('Proxies');
        $b->setAutoGenerateProxyClasses(true);
        $b->setClassMetadataFactoryName('Doctrine\\ORM\\Mapping\\ClassMetadataFactory');
        $b->setDefaultRepositoryClassName('Doctrine\\ORM\\EntityRepository');
        $b->setNamingStrategy(new \Doctrine\ORM\Mapping\UnderscoreNamingStrategy());
        $b->setQuoteStrategy(new \Doctrine\ORM\Mapping\DefaultQuoteStrategy());
        $b->setEntityListenerResolver($this->get('doctrine.orm.default_entity_listener_resolver'));

        $instance = \Doctrine\ORM\EntityManager::create($this->get('doctrine.dbal.default_connection'), $b);

        $this->get('doctrine.orm.default_manager_configurator')->configure($instance);

        return $instance;
    }

    /**
     * Gets the 'doctrine.orm.default_entity_manager.property_info_extractor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Doctrine\PropertyInfo\DoctrineExtractor A Symfony\Bridge\Doctrine\PropertyInfo\DoctrineExtractor instance
     */
    protected function getDoctrine_Orm_DefaultEntityManager_PropertyInfoExtractorService()
    {
        return $this->services['doctrine.orm.default_entity_manager.property_info_extractor'] = new \Symfony\Bridge\Doctrine\PropertyInfo\DoctrineExtractor($this->get('doctrine.orm.default_entity_manager')->getMetadataFactory());
    }

    /**
     * Gets the 'doctrine.orm.default_listeners.attach_entity_listeners' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\ORM\Tools\AttachEntityListenersListener A Doctrine\ORM\Tools\AttachEntityListenersListener instance
     */
    protected function getDoctrine_Orm_DefaultListeners_AttachEntityListenersService()
    {
        return $this->services['doctrine.orm.default_listeners.attach_entity_listeners'] = new \Doctrine\ORM\Tools\AttachEntityListenersListener();
    }

    /**
     * Gets the 'doctrine.orm.default_manager_configurator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator A Doctrine\Bundle\DoctrineBundle\ManagerConfigurator instance
     */
    protected function getDoctrine_Orm_DefaultManagerConfiguratorService()
    {
        return $this->services['doctrine.orm.default_manager_configurator'] = new \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator(array(), array());
    }

    /**
     * Gets the 'doctrine.orm.validator.unique' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntityValidator A Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntityValidator instance
     */
    protected function getDoctrine_Orm_Validator_UniqueService()
    {
        return $this->services['doctrine.orm.validator.unique'] = new \Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntityValidator($this->get('doctrine'));
    }

    /**
     * Gets the 'doctrine.orm.validator_initializer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Doctrine\Validator\DoctrineInitializer A Symfony\Bridge\Doctrine\Validator\DoctrineInitializer instance
     */
    protected function getDoctrine_Orm_ValidatorInitializerService()
    {
        return $this->services['doctrine.orm.validator_initializer'] = new \Symfony\Bridge\Doctrine\Validator\DoctrineInitializer($this->get('doctrine'));
    }

    /**
     * Gets the 'doctrine_cache.providers.doctrine.orm.default_metadata_cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Cache\ArrayCache A Doctrine\Common\Cache\ArrayCache instance
     */
    protected function getDoctrineCache_Providers_Doctrine_Orm_DefaultMetadataCacheService()
    {
        $this->services['doctrine_cache.providers.doctrine.orm.default_metadata_cache'] = $instance = new \Doctrine\Common\Cache\ArrayCache();

        $instance->setNamespace('sf2orm_default_b37af60fec2ac64f1d40f7497f6cb3f39115c2720f8c26917e380c3ec7d49449');

        return $instance;
    }

    /**
     * Gets the 'doctrine_cache.providers.doctrine.orm.default_query_cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Cache\ArrayCache A Doctrine\Common\Cache\ArrayCache instance
     */
    protected function getDoctrineCache_Providers_Doctrine_Orm_DefaultQueryCacheService()
    {
        $this->services['doctrine_cache.providers.doctrine.orm.default_query_cache'] = $instance = new \Doctrine\Common\Cache\ArrayCache();

        $instance->setNamespace('sf2orm_default_b37af60fec2ac64f1d40f7497f6cb3f39115c2720f8c26917e380c3ec7d49449');

        return $instance;
    }

    /**
     * Gets the 'doctrine_cache.providers.doctrine.orm.default_result_cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Cache\ArrayCache A Doctrine\Common\Cache\ArrayCache instance
     */
    protected function getDoctrineCache_Providers_Doctrine_Orm_DefaultResultCacheService()
    {
        $this->services['doctrine_cache.providers.doctrine.orm.default_result_cache'] = $instance = new \Doctrine\Common\Cache\ArrayCache();

        $instance->setNamespace('sf2orm_default_b37af60fec2ac64f1d40f7497f6cb3f39115c2720f8c26917e380c3ec7d49449');

        return $instance;
    }

    /**
     * Gets the 'doctrine_cache.providers.phpcr_meta' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Cache\FilesystemCache A Doctrine\Common\Cache\FilesystemCache instance
     */
    protected function getDoctrineCache_Providers_PhpcrMetaService()
    {
        return $this->services['doctrine_cache.providers.phpcr_meta'] = new \Doctrine\Common\Cache\FilesystemCache((__DIR__.'/doctrine/cache/file_system'), NULL, 2);
    }

    /**
     * Gets the 'doctrine_cache.providers.phpcr_nodes' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Cache\FilesystemCache A Doctrine\Common\Cache\FilesystemCache instance
     */
    protected function getDoctrineCache_Providers_PhpcrNodesService()
    {
        return $this->services['doctrine_cache.providers.phpcr_nodes'] = new \Doctrine\Common\Cache\FilesystemCache((__DIR__.'/doctrine/cache/file_system'), NULL, 2);
    }

    /**
     * Gets the 'doctrine_phpcr' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Bundle\PHPCRBundle\ManagerRegistry A Doctrine\Bundle\PHPCRBundle\ManagerRegistry instance
     */
    protected function getDoctrinePhpcrService()
    {
        $this->services['doctrine_phpcr'] = $instance = new \Doctrine\Bundle\PHPCRBundle\ManagerRegistry('PHPCR', array('default' => 'doctrine_phpcr.default_session'), array('default' => 'doctrine_phpcr.odm.default_document_manager'), 'default', 'default', 'Doctrine\\Common\\Proxy\\Proxy');

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'doctrine_phpcr.admin.default_session' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Jackalope\Session A Jackalope\Session instance
     */
    protected function getDoctrinePhpcr_Admin_DefaultSessionService()
    {
        return $this->services['doctrine_phpcr.admin.default_session'] = $this->get('doctrine_phpcr.admin.jackalope.repository.default')->login(new \PHPCR\SimpleCredentials(NULL, NULL), NULL);
    }

    /**
     * Gets the 'doctrine_phpcr.admin.jackalope.repository.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Jackalope\Repository A Jackalope\Repository instance
     */
    protected function getDoctrinePhpcr_Admin_Jackalope_Repository_DefaultService()
    {
        return $this->services['doctrine_phpcr.admin.jackalope.repository.default'] = $this->get('doctrine_phpcr.jackalope.repository.factory.service.doctrinedbal')->getRepository(array('jackalope.doctrine_dbal_connection' => $this->get('doctrine.dbal.default_connection'), 'jackalope.check_login_on_server' => false));
    }

    /**
     * Gets the 'doctrine_phpcr.console_dumper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \PHPCR\Util\Console\Helper\PhpcrConsoleDumperHelper A PHPCR\Util\Console\Helper\PhpcrConsoleDumperHelper instance
     */
    protected function getDoctrinePhpcr_ConsoleDumperService()
    {
        return $this->services['doctrine_phpcr.console_dumper'] = new \PHPCR\Util\Console\Helper\PhpcrConsoleDumperHelper();
    }

    /**
     * Gets the 'doctrine_phpcr.default_session' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Jackalope\Session A Jackalope\Session instance
     */
    protected function getDoctrinePhpcr_DefaultSessionService()
    {
        return $this->services['doctrine_phpcr.default_session'] = $this->get('doctrine_phpcr.jackalope.repository.default')->login(new \PHPCR\SimpleCredentials(NULL, NULL), 'default');
    }

    /**
     * Gets the 'doctrine_phpcr.initializer_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Bundle\PHPCRBundle\Initializer\InitializerManager A Doctrine\Bundle\PHPCRBundle\Initializer\InitializerManager instance
     */
    protected function getDoctrinePhpcr_InitializerManagerService()
    {
        $this->services['doctrine_phpcr.initializer_manager'] = $instance = new \Doctrine\Bundle\PHPCRBundle\Initializer\InitializerManager($this->get('doctrine_phpcr'));

        $instance->addInitializer($this->get('cmf_block.initializer'), 0);
        $instance->addInitializer($this->get('cmf_media.initializer'), 0);
        $instance->addInitializer($this->get('cmf_routing.initializer'), 0);

        return $instance;
    }

    /**
     * Gets the 'doctrine_phpcr.jackalope.repository.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Jackalope\Repository A Jackalope\Repository instance
     */
    protected function getDoctrinePhpcr_Jackalope_Repository_DefaultService()
    {
        return $this->services['doctrine_phpcr.jackalope.repository.default'] = $this->get('doctrine_phpcr.jackalope.repository.factory.service.doctrinedbal')->getRepository(array('jackalope.doctrine_dbal_connection' => $this->get('doctrine.dbal.default_connection'), 'jackalope.data_caches' => array('meta' => $this->get('doctrine_cache.providers.phpcr_meta'), 'nodes' => $this->get('doctrine_cache.providers.phpcr_nodes')), 'jackalope.check_login_on_server' => false));
    }

    /**
     * Gets the 'doctrine_phpcr.jackalope.repository.factory.doctrinedbal' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Jackalope\Repository A Jackalope\Repository instance
     */
    protected function getDoctrinePhpcr_Jackalope_Repository_Factory_DoctrinedbalService()
    {
        return $this->services['doctrine_phpcr.jackalope.repository.factory.doctrinedbal'] = $this->get('doctrine_phpcr.jackalope.repository.factory.service.doctrinedbal')->getRepository(array());
    }

    /**
     * Gets the 'doctrine_phpcr.jackalope.repository.factory.jackrabbit' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Jackalope\Repository A Jackalope\Repository instance
     */
    protected function getDoctrinePhpcr_Jackalope_Repository_Factory_JackrabbitService()
    {
        return $this->services['doctrine_phpcr.jackalope.repository.factory.jackrabbit'] = $this->get('doctrine_phpcr.jackalope.repository.factory.service.jackrabbit')->getRepository(array());
    }

    /**
     * Gets the 'doctrine_phpcr.jackalope.repository.factory.prismic' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Jackalope\Repository A Jackalope\Repository instance
     */
    protected function getDoctrinePhpcr_Jackalope_Repository_Factory_PrismicService()
    {
        return $this->services['doctrine_phpcr.jackalope.repository.factory.prismic'] = $this->get('doctrine_phpcr.jackalope.repository.factory.service.prismic')->getRepository(array());
    }

    /**
     * Gets the 'doctrine_phpcr.jackalope.repository.factory.service.doctrinedbal' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Jackalope\RepositoryFactoryDoctrineDBAL A Jackalope\RepositoryFactoryDoctrineDBAL instance
     */
    protected function getDoctrinePhpcr_Jackalope_Repository_Factory_Service_DoctrinedbalService()
    {
        return $this->services['doctrine_phpcr.jackalope.repository.factory.service.doctrinedbal'] = new \Jackalope\RepositoryFactoryDoctrineDBAL();
    }

    /**
     * Gets the 'doctrine_phpcr.jackalope.repository.factory.service.jackrabbit' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Jackalope\RepositoryFactoryJackrabbit A Jackalope\RepositoryFactoryJackrabbit instance
     */
    protected function getDoctrinePhpcr_Jackalope_Repository_Factory_Service_JackrabbitService()
    {
        return $this->services['doctrine_phpcr.jackalope.repository.factory.service.jackrabbit'] = new \Jackalope\RepositoryFactoryJackrabbit();
    }

    /**
     * Gets the 'doctrine_phpcr.jackalope.repository.factory.service.prismic' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Jackalope\RepositoryFactoryPrismic A Jackalope\RepositoryFactoryPrismic instance
     */
    protected function getDoctrinePhpcr_Jackalope_Repository_Factory_Service_PrismicService()
    {
        return $this->services['doctrine_phpcr.jackalope.repository.factory.service.prismic'] = new \Jackalope\RepositoryFactoryPrismic();
    }

    /**
     * Gets the 'doctrine_phpcr.jackalope_doctrine_dbal.schema_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Bundle\PHPCRBundle\EventListener\JackalopeDoctrineDbalSchemaListener A Doctrine\Bundle\PHPCRBundle\EventListener\JackalopeDoctrineDbalSchemaListener instance
     */
    protected function getDoctrinePhpcr_JackalopeDoctrineDbal_SchemaListenerService()
    {
        return $this->services['doctrine_phpcr.jackalope_doctrine_dbal.schema_listener'] = new \Doctrine\Bundle\PHPCRBundle\EventListener\JackalopeDoctrineDbalSchemaListener(new \Jackalope\Transport\DoctrineDBAL\RepositorySchema());
    }

    /**
     * Gets the 'doctrine_phpcr.odm.default.translation.strategy.attribute' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\ODM\PHPCR\Translation\TranslationStrategy\AttributeTranslationStrategy A Doctrine\ODM\PHPCR\Translation\TranslationStrategy\AttributeTranslationStrategy instance
     */
    protected function getDoctrinePhpcr_Odm_Default_Translation_Strategy_AttributeService()
    {
        $this->services['doctrine_phpcr.odm.default.translation.strategy.attribute'] = $instance = new \Doctrine\ODM\PHPCR\Translation\TranslationStrategy\AttributeTranslationStrategy($this->get('doctrine_phpcr.odm.default_document_manager'));

        $instance->setPrefix('phpcr_locale');

        return $instance;
    }

    /**
     * Gets the 'doctrine_phpcr.odm.default.translation.strategy.child' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\ODM\PHPCR\Translation\TranslationStrategy\ChildTranslationStrategy A Doctrine\ODM\PHPCR\Translation\TranslationStrategy\ChildTranslationStrategy instance
     */
    protected function getDoctrinePhpcr_Odm_Default_Translation_Strategy_ChildService()
    {
        return $this->services['doctrine_phpcr.odm.default.translation.strategy.child'] = new \Doctrine\ODM\PHPCR\Translation\TranslationStrategy\ChildTranslationStrategy($this->get('doctrine_phpcr.odm.default_document_manager'));
    }

    /**
     * Gets the 'doctrine_phpcr.odm.default_document_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\ODM\PHPCR\DocumentManager A Doctrine\ODM\PHPCR\DocumentManager instance
     */
    protected function getDoctrinePhpcr_Odm_DefaultDocumentManagerService()
    {
        $a = $this->get('annotation_reader');

        $b = new \Doctrine\Common\Cache\ArrayCache();
        $b->setNamespace('sf_phpcr_default_5b8acc7b3664a630c74b0f284991a6225bb9d7575e66364bce943fac956d810e');

        $c = new \Doctrine\ODM\PHPCR\Mapping\Driver\AnnotationDriver($a, array(0 => ($this->targetDirs[3].'/src/AppBundle/Document'), 1 => ($this->targetDirs[3].'/vendor/doctrine/phpcr-odm/lib/Doctrine/ODM/PHPCR/Document')));

        $d = new \Doctrine\Common\Persistence\Mapping\Driver\SymfonyFileLocator(array(($this->targetDirs[3].'/vendor/symfony-cmf/block-bundle/src/Resources/config/doctrine-model') => 'Symfony\\Cmf\\Bundle\\BlockBundle\\Model', ($this->targetDirs[3].'/vendor/symfony-cmf/block-bundle/src/Resources/config/doctrine-phpcr') => 'Symfony\\Cmf\\Bundle\\BlockBundle\\Doctrine\\Phpcr'), '.phpcr.xml');

        $e = new \Doctrine\ODM\PHPCR\Mapping\Driver\XmlDriver($d);

        $f = new \Doctrine\Common\Persistence\Mapping\Driver\SymfonyFileLocator(array(($this->targetDirs[3].'/vendor/symfony-cmf/routing-bundle/src/Resources/config/doctrine-model') => 'Symfony\\Cmf\\Bundle\\RoutingBundle\\Model', ($this->targetDirs[3].'/vendor/symfony-cmf/routing-bundle/src/Resources/config/doctrine-phpcr') => 'Symfony\\Cmf\\Bundle\\RoutingBundle\\Doctrine\\Phpcr'), '.phpcr.xml');

        $g = new \Doctrine\ODM\PHPCR\Mapping\Driver\XmlDriver($f);

        $h = new \Doctrine\Common\Persistence\Mapping\Driver\MappingDriverChain();
        $h->addDriver($c, 'AppBundle\\Document');
        $h->addDriver($c, 'Doctrine\\ODM\\PHPCR\\Document');
        $h->addDriver($e, 'Symfony\\Cmf\\Bundle\\BlockBundle\\Model');
        $h->addDriver($e, 'Symfony\\Cmf\\Bundle\\BlockBundle\\Doctrine\\Phpcr');
        $h->addDriver(new \Doctrine\ODM\PHPCR\Mapping\Driver\XmlDriver(new \Doctrine\Common\Persistence\Mapping\Driver\SymfonyFileLocator(array(($this->targetDirs[3].'/vendor/symfony-cmf/media-bundle/Resources/config/doctrine-phpcr') => 'Symfony\\Cmf\\Bundle\\MediaBundle\\Doctrine\\Phpcr'), '.phpcr.xml')), 'Symfony\\Cmf\\Bundle\\MediaBundle\\Doctrine\\Phpcr');
        $h->addDriver(new \Doctrine\ODM\PHPCR\Mapping\Driver\XmlDriver(new \Doctrine\Common\Persistence\Mapping\Driver\DefaultFileLocator(array(0 => ($this->targetDirs[3].'/vendor/symfony-cmf/routing-bundle/src/Resources/config/doctrine-base')), '.phpcr.xml')), 'Symfony\\Component\\Routing');
        $h->addDriver($g, 'Symfony\\Cmf\\Bundle\\RoutingBundle\\Model');
        $h->addDriver($g, 'Symfony\\Cmf\\Bundle\\RoutingBundle\\Doctrine\\Phpcr');

        $i = new \Doctrine\ODM\PHPCR\Configuration();
        $i->setDocumentNamespaces(array('AppBundle' => 'AppBundle\\Document', '__PHPCRODM__' => 'Doctrine\\ODM\\PHPCR\\Document'));
        $i->setMetadataCacheImpl($b);
        $i->setMetadataDriverImpl($h, false);
        $i->setProxyDir((__DIR__.'/doctrine/PHPCRProxies'));
        $i->setProxyNamespace('PHPCRProxies');
        $i->setAutoGenerateProxyClasses(true);
        $i->setClassMetadataFactoryName('Doctrine\\ODM\\PHPCR\\Mapping\\ClassMetadataFactory');
        $i->setDefaultRepositoryClassName('Doctrine\\ODM\\PHPCR\\DocumentRepository');
        $i->addDocumentNamespace('CmfBlockBundle', 'Symfony\\Cmf\\Bundle\\BlockBundle\\Doctrine\\Phpcr');
        $i->addDocumentNamespace('CmfMediaBundle', 'Symfony\\Cmf\\Bundle\\MediaBundle\\Doctrine\\Phpcr');
        $i->addDocumentNamespace('CmfRoutingBundle', 'Symfony\\Cmf\\Bundle\\RoutingBundle\\Doctrine\\Phpcr');

        $j = new \Symfony\Bridge\Doctrine\ContainerAwareEventManager($this);
        $j->addEventSubscriber($this->get('cmf_routing.persistence.doctrine.route_condition_metadata_listener'));
        $j->addEventSubscriber($this->get('cmf_media.persistence.phpcr.subscriber.imagine_cache'));
        $j->addEventSubscriber($this->get('cmf_media.persistence.phpcr.subscriber.image_dimensions'));
        $j->addEventSubscriber(new \Symfony\Cmf\Bundle\CoreBundle\Doctrine\Phpcr\NonTranslatableMetadataListener());
        $j->addEventSubscriber($this->get('cmf_media.persistence.phpcr.subscriber.stream_rewind'));
        $j->addEventListener(array(0 => 'postLoad', 1 => 'postPersist', 2 => 'postMove'), $this->get('cmf_routing.phpcrodm_route_idprefix_listener'));

        $this->services['doctrine_phpcr.odm.default_document_manager'] = $instance = new \Doctrine\ODM\PHPCR\DocumentManager($this->get('doctrine_phpcr.default_session'), $i, $j);

        $instance->setTranslationStrategy('child', $this->get('doctrine_phpcr.odm.default.translation.strategy.child'));
        $instance->setTranslationStrategy('attribute', $this->get('doctrine_phpcr.odm.default.translation.strategy.attribute'));

        return $instance;
    }

    /**
     * Gets the 'doctrine_phpcr.odm.form.type.path' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Bundle\PHPCRBundle\Form\Type\PathType A Doctrine\Bundle\PHPCRBundle\Form\Type\PathType instance
     */
    protected function getDoctrinePhpcr_Odm_Form_Type_PathService()
    {
        return $this->services['doctrine_phpcr.odm.form.type.path'] = new \Doctrine\Bundle\PHPCRBundle\Form\Type\PathType($this->get('doctrine_phpcr'));
    }

    /**
     * Gets the 'doctrine_phpcr.odm.translation.strategy.attribute' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\ODM\PHPCR\Translation\TranslationStrategy\AttributeTranslationStrategy A Doctrine\ODM\PHPCR\Translation\TranslationStrategy\AttributeTranslationStrategy instance
     */
    protected function getDoctrinePhpcr_Odm_Translation_Strategy_AttributeService()
    {
        $this->services['doctrine_phpcr.odm.translation.strategy.attribute'] = $instance = new \Doctrine\ODM\PHPCR\Translation\TranslationStrategy\AttributeTranslationStrategy('');

        $instance->setPrefix('phpcr_locale');

        return $instance;
    }

    /**
     * Gets the 'doctrine_phpcr.odm.translation.strategy.child' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\ODM\PHPCR\Translation\TranslationStrategy\ChildTranslationStrategy A Doctrine\ODM\PHPCR\Translation\TranslationStrategy\ChildTranslationStrategy instance
     */
    protected function getDoctrinePhpcr_Odm_Translation_Strategy_ChildService()
    {
        return $this->services['doctrine_phpcr.odm.translation.strategy.child'] = new \Doctrine\ODM\PHPCR\Translation\TranslationStrategy\ChildTranslationStrategy('');
    }

    /**
     * Gets the 'doctrine_phpcr.odm.validator.valid_phpcr_odm' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Bundle\PHPCRBundle\Validator\Constraints\ValidPhpcrOdmValidator A Doctrine\Bundle\PHPCRBundle\Validator\Constraints\ValidPhpcrOdmValidator instance
     */
    protected function getDoctrinePhpcr_Odm_Validator_ValidPhpcrOdmService()
    {
        return $this->services['doctrine_phpcr.odm.validator.valid_phpcr_odm'] = new \Doctrine\Bundle\PHPCRBundle\Validator\Constraints\ValidPhpcrOdmValidator($this->get('doctrine_phpcr'));
    }

    /**
     * Gets the 'file_locator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Config\FileLocator A Symfony\Component\HttpKernel\Config\FileLocator instance
     */
    protected function getFileLocatorService()
    {
        return $this->services['file_locator'] = new \Symfony\Component\HttpKernel\Config\FileLocator($this->get('kernel'), ($this->targetDirs[3].'/app/Resources'));
    }

    /**
     * Gets the 'filesystem' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Filesystem\Filesystem A Symfony\Component\Filesystem\Filesystem instance
     */
    protected function getFilesystemService()
    {
        return $this->services['filesystem'] = new \Symfony\Component\Filesystem\Filesystem();
    }

    /**
     * Gets the 'form.factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\FormFactory A Symfony\Component\Form\FormFactory instance
     */
    protected function getForm_FactoryService()
    {
        return $this->services['form.factory'] = new \Symfony\Component\Form\FormFactory($this->get('form.registry'), $this->get('form.resolved_type_factory'));
    }

    /**
     * Gets the 'form.registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\FormRegistry A Symfony\Component\Form\FormRegistry instance
     */
    protected function getForm_RegistryService()
    {
        return $this->services['form.registry'] = new \Symfony\Component\Form\FormRegistry(array(0 => new \Symfony\Component\Form\Extension\DependencyInjection\DependencyInjectionExtension($this, array('AppBundle\\Form\\Filter\\QueryFilterType' => 'app.form.filter.query', 'AppBundle\\Form\\Filter\\ProductFilterType' => 'app.form.filter.product', 'AppBundle\\Form\\Filter\\ArticleFilterType' => 'app.form.filter.article', 'AppBundle\\Form\\Type\\ArticleType' => 'app.form.type.article', 'AppBundle\\Form\\Type\\DealerType' => 'app.form.type.dealer', 'AppBundle\\Form\\Type\\TopicType' => 'app.form.type.topic', 'AppBundle\\Form\\Type\\PostType' => 'app.form.type.post', 'AppBundle\\Form\\Type\\RatingType' => 'sylius.form.type.product_review_rating', 'AppBundle\\Form\\Type\\GameRateType' => 'app.form.type.game_rate', 'AppBundle\\Form\\Type\\ProductViewCountType' => 'sylius.form.type.product_view_count', 'AppBundle\\Form\\Type\\Customer\\CustomerSimpleRegistrationType' => 'sylius.form.type.customer_simple_registration', 'AppBundle\\Form\\Type\\ProductAssociationsType' => 'sylius.form.type.sylius_product_associations', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => 'form.type.form', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType' => 'form.type.choice', 'Sylius\\Bundle\\LocaleBundle\\Form\\Type\\LocaleType' => 'sylius.form.type.locale', 'Sylius\\Bundle\\LocaleBundle\\Form\\Type\\LocaleChoiceType' => 'sylius.form.type.locale_choice', 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductAssociationType' => 'sylius.form.type.product_association', 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductAssociationTypeType' => 'sylius.form.type.product_association_type', 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductAssociationTypeChoiceType' => 'sylius.form.type.product_association_type_choice', 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductAttributeType' => 'sylius.form.type.product_attribute', 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductAttributeTranslationType' => 'sylius.form.type.product_attribute_translation', 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductAttributeChoiceType' => 'sylius.form.type.product_attribute_choice', 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductAttributeValueType' => 'sylius.form.type.product_attribute_value', 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductType' => 'sylius.form.type.product', 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductTranslationType' => 'sylius.form.type.product_translation', 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductChoiceType' => 'sylius.form.type.product_choice', 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductCodeChoiceType' => 'sylius.form.type.product_code_choice', 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductGenerateVariantsType' => 'sylius.form.type.product_generate_variants', 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductOptionType' => 'sylius.form.type.product_option', 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductOptionTranslationType' => 'sylius.form.type.product_option_translation', 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductOptionChoiceType' => 'sylius.form.type.product_option_choice', 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductOptionValueType' => 'sylius.form.type.product_option_value', 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductOptionValueTranslationType' => 'sylius.form.type.product_option_value_translation', 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductVariantType' => 'sylius.form.type.product_variant', 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductVariantGenerationType' => 'sylius.form.type.product_variant_generation', 'Sylius\\Bundle\\UiBundle\\Form\\Type\\SecurityLoginType' => 'sylius.form.type.security_login', 'Sylius\\Bundle\\UserBundle\\Form\\Type\\UserLoginType' => 'sylius.form.type.user_login', 'Sylius\\Bundle\\UserBundle\\Form\\Type\\UserRequestPasswordResetType' => 'sylius.form.type.user_request_password_reset', 'Sylius\\Bundle\\UserBundle\\Form\\Type\\UserResetPasswordType' => 'sylius.form.type.user_reset_password', 'Sylius\\Bundle\\UserBundle\\Form\\Type\\UserChangePasswordType' => 'sylius.form.type.user_change_password', 'Sylius\\Bundle\\CustomerBundle\\Form\\Type\\CustomerType' => 'sylius.form.type.customer', 'Sylius\\Bundle\\CustomerBundle\\Form\\Type\\CustomerProfileType' => 'sylius.form.type.customer_profile', 'Sylius\\Bundle\\CustomerBundle\\Form\\Type\\CustomerChoiceType' => 'sylius.form.type.customer_choice', 'Sylius\\Bundle\\CustomerBundle\\Form\\Type\\CustomerGroupType' => 'sylius.form.type.customer_group', 'Sylius\\Bundle\\CustomerBundle\\Form\\Type\\CustomerGroupChoiceType' => 'sylius.form.type.customer_group_choice', 'Sylius\\Bundle\\CustomerBundle\\Form\\Type\\CustomerGroupCodeChoiceType' => 'sylius.form.type.customer_group_code_choice', 'Sylius\\Bundle\\ResourceBundle\\Form\\Type\\ResourceTranslationsType' => 'sylius.form.type.resource_translations', 'Sylius\\Bundle\\AttributeBundle\\Form\\Type\\AttributeTypeChoiceType' => 'sylius.form.type.attribute_type_choice', 'Sylius\\Bundle\\TaxonomyBundle\\Form\\Type\\TaxonType' => 'sylius.form.type.taxon', 'Sylius\\Bundle\\TaxonomyBundle\\Form\\Type\\TaxonTranslationType' => 'sylius.form.type.taxon_translation', 'Sylius\\Bundle\\TaxonomyBundle\\Form\\Type\\TaxonPositionType' => 'sylius.form.type.taxon_position', 'Sylius\\Bundle\\TaxonomyBundle\\Form\\Type\\TaxonChoiceType' => 'sylius.form.type.taxon_choice', 'Sylius\\Bundle\\TaxonomyBundle\\Form\\Type\\TaxonCodeChoiceType' => 'sylius.form.type.taxon_code_choice', 'Sonata\\BlockBundle\\Form\\Type\\ServiceListType' => 'sonata.block.form.type.block', 'Sonata\\BlockBundle\\Form\\Type\\ContainerTemplateType' => 'sonata.block.form.type.container_template', 'Symfony\\Cmf\\Bundle\\CoreBundle\\Form\\Type\\CheckboxUrlLabelFormType' => 'cmf_core.form.type.checkbox_url_label', 'Symfony\\Cmf\\Bundle\\MediaBundle\\Form\\Type\\FileType' => 'cmf_media.form.type.file', 'Symfony\\Cmf\\Bundle\\MediaBundle\\Form\\Type\\ImageType' => 'cmf_media.form.type.image', 'Symfony\\Cmf\\Bundle\\RoutingBundle\\Form\\Type\\RouteTypeType' => 'cmf_routing.route_type_form_type', 'Sylius\\Bundle\\GridBundle\\Form\\Type\\Filter\\StringFilterType' => 'sylius.form.type.grid_filter.string', 'Sylius\\Bundle\\GridBundle\\Form\\Type\\Filter\\BooleanFilterType' => 'sylius.form.type.grid_filter.boolean', 'Doctrine\\Bundle\\PHPCRBundle\\Form\\Type\\PHPCRReferenceType' => 'form.type.phpcr.reference', 'Doctrine\\Bundle\\PHPCRBundle\\Form\\Type\\PHPCRODMReferenceCollectionType' => 'form.type.phpcr_odm.reference_collection', 'Doctrine\\Bundle\\PHPCRBundle\\Form\\Type\\DocumentType' => 'form.type.phpcr.document', 'Doctrine\\Bundle\\PHPCRBundle\\Form\\Type\\PathType' => 'doctrine_phpcr.odm.form.type.path', 'Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType' => 'form.type.entity', 'Infinite\\FormBundle\\Form\\Type\\AttachmentType' => 'infinite_form.attachment.form_type', 'Infinite\\FormBundle\\Form\\Type\\CheckboxGridType' => 'infinite_form.form_type.checkbox_grid_type', 'Infinite\\FormBundle\\Form\\Type\\CheckboxRowType' => 'infinite_form.form_type.checkbox_row_type', 'Infinite\\FormBundle\\Form\\Type\\EntityCheckboxGridType' => 'infinite_form.form_type.entity_checkbox_grid_type', 'Infinite\\FormBundle\\Form\\Type\\EntitySearchType' => 'infinite_form.entity_search.type', 'Infinite\\FormBundle\\Form\\Type\\PolyCollectionType' => 'infinite_form.polycollection.form_type', 'Mopa\\Bundle\\BootstrapBundle\\Form\\Type\\TabType' => 'mopa_bootstrap.form.type.tab', 'Mopa\\Bundle\\BootstrapBundle\\Form\\Type\\FormActionsType' => 'mopa_bootstrap.form.type.form_actions', 'Liip\\ImagineBundle\\Form\\Type\\ImageType' => 'liip_imagine.form.type.image', 'Ivory\\CKEditorBundle\\Form\\Type\\CKEditorType' => 'ivory_ck_editor.form.type', 'Zenstruck\\RedirectBundle\\Form\\Type\\RedirectType' => 'zenstruck_redirect.redirect.form.type'), array('Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => array(0 => 'form.type_extension.form.http_foundation', 1 => 'form.type_extension.form.validator', 2 => 'form.type_extension.upload.validator', 3 => 'form.type_extension.csrf', 4 => 'form.type_extension.form.data_collector', 5 => 'mopa_bootstrap.form.type_extension.embed_form', 6 => 'mopa_bootstrap.form.type_extension.static_text', 7 => 'mopa_bootstrap.form.type_extension.help', 8 => 'mopa_bootstrap.form.type_extension.legend', 9 => 'mopa_bootstrap.form.type_extension.error', 10 => 'mopa_bootstrap.form.type_extension.widget', 11 => 'mopa_bootstrap.form.type_extension.horizontal', 12 => 'mopa_bootstrap.form.type_extension.widget_collection', 13 => 'mopa_bootstrap.form.type_extension.tabbed'), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\RepeatedType' => array(0 => 'form.type_extension.repeated.validator'), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\SubmitType' => array(0 => 'form.type_extension.submit.validator'), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\CollectionType' => array(0 => 'sylius.form.extension.type.collection'), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\ButtonType' => array(0 => 'mopa_bootstrap.form.type_extension.offset_button', 1 => 'mopa_bootstrap.form.type_extension.button'), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\DateType' => array(0 => 'mopa_bootstrap.form.type_extension.date'), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\DateTimeType' => array(0 => 'mopa_bootstrap.form.type_extension.datetime'), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\TimeType' => array(0 => 'mopa_bootstrap.form.type_extension.time')), array(0 => 'form.type_guesser.validator', 1 => 'form.type_guesser.doctrine_phpcr', 2 => 'form.type_guesser.doctrine'))), $this->get('form.resolved_type_factory'));
    }

    /**
     * Gets the 'form.resolved_type_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\DataCollector\Proxy\ResolvedTypeFactoryDataCollectorProxy A Symfony\Component\Form\Extension\DataCollector\Proxy\ResolvedTypeFactoryDataCollectorProxy instance
     */
    protected function getForm_ResolvedTypeFactoryService()
    {
        return $this->services['form.resolved_type_factory'] = new \Symfony\Component\Form\Extension\DataCollector\Proxy\ResolvedTypeFactoryDataCollectorProxy(new \Symfony\Component\Form\ResolvedFormTypeFactory(), $this->get('data_collector.form'));
    }

    /**
     * Gets the 'form.type.birthday' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\BirthdayType A Symfony\Component\Form\Extension\Core\Type\BirthdayType instance
     *
     * @deprecated The "form.type.birthday" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_BirthdayService()
    {
        @trigger_error('The "form.type.birthday" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.birthday'] = new \Symfony\Component\Form\Extension\Core\Type\BirthdayType();
    }

    /**
     * Gets the 'form.type.button' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\ButtonType A Symfony\Component\Form\Extension\Core\Type\ButtonType instance
     *
     * @deprecated The "form.type.button" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_ButtonService()
    {
        @trigger_error('The "form.type.button" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.button'] = new \Symfony\Component\Form\Extension\Core\Type\ButtonType();
    }

    /**
     * Gets the 'form.type.checkbox' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\CheckboxType A Symfony\Component\Form\Extension\Core\Type\CheckboxType instance
     *
     * @deprecated The "form.type.checkbox" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_CheckboxService()
    {
        @trigger_error('The "form.type.checkbox" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.checkbox'] = new \Symfony\Component\Form\Extension\Core\Type\CheckboxType();
    }

    /**
     * Gets the 'form.type.choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\ChoiceType A Symfony\Component\Form\Extension\Core\Type\ChoiceType instance
     */
    protected function getForm_Type_ChoiceService()
    {
        return $this->services['form.type.choice'] = new \Symfony\Component\Form\Extension\Core\Type\ChoiceType(new \Symfony\Component\Form\ChoiceList\Factory\CachingFactoryDecorator(new \Symfony\Component\Form\ChoiceList\Factory\PropertyAccessDecorator(new \Symfony\Component\Form\ChoiceList\Factory\DefaultChoiceListFactory(), $this->get('property_accessor'))));
    }

    /**
     * Gets the 'form.type.collection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\CollectionType A Symfony\Component\Form\Extension\Core\Type\CollectionType instance
     *
     * @deprecated The "form.type.collection" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_CollectionService()
    {
        @trigger_error('The "form.type.collection" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.collection'] = new \Symfony\Component\Form\Extension\Core\Type\CollectionType();
    }

    /**
     * Gets the 'form.type.country' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\CountryType A Symfony\Component\Form\Extension\Core\Type\CountryType instance
     *
     * @deprecated The "form.type.country" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_CountryService()
    {
        @trigger_error('The "form.type.country" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.country'] = new \Symfony\Component\Form\Extension\Core\Type\CountryType();
    }

    /**
     * Gets the 'form.type.currency' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\CurrencyType A Symfony\Component\Form\Extension\Core\Type\CurrencyType instance
     *
     * @deprecated The "form.type.currency" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_CurrencyService()
    {
        @trigger_error('The "form.type.currency" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.currency'] = new \Symfony\Component\Form\Extension\Core\Type\CurrencyType();
    }

    /**
     * Gets the 'form.type.date' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\DateType A Symfony\Component\Form\Extension\Core\Type\DateType instance
     *
     * @deprecated The "form.type.date" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_DateService()
    {
        @trigger_error('The "form.type.date" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.date'] = new \Symfony\Component\Form\Extension\Core\Type\DateType();
    }

    /**
     * Gets the 'form.type.datetime' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\DateTimeType A Symfony\Component\Form\Extension\Core\Type\DateTimeType instance
     *
     * @deprecated The "form.type.datetime" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_DatetimeService()
    {
        @trigger_error('The "form.type.datetime" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.datetime'] = new \Symfony\Component\Form\Extension\Core\Type\DateTimeType();
    }

    /**
     * Gets the 'form.type.email' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\EmailType A Symfony\Component\Form\Extension\Core\Type\EmailType instance
     *
     * @deprecated The "form.type.email" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_EmailService()
    {
        @trigger_error('The "form.type.email" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.email'] = new \Symfony\Component\Form\Extension\Core\Type\EmailType();
    }

    /**
     * Gets the 'form.type.entity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Doctrine\Form\Type\EntityType A Symfony\Bridge\Doctrine\Form\Type\EntityType instance
     */
    protected function getForm_Type_EntityService()
    {
        return $this->services['form.type.entity'] = new \Symfony\Bridge\Doctrine\Form\Type\EntityType($this->get('doctrine'));
    }

    /**
     * Gets the 'form.type.file' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\FileType A Symfony\Component\Form\Extension\Core\Type\FileType instance
     *
     * @deprecated The "form.type.file" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_FileService()
    {
        @trigger_error('The "form.type.file" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.file'] = new \Symfony\Component\Form\Extension\Core\Type\FileType();
    }

    /**
     * Gets the 'form.type.form' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\FormType A Symfony\Component\Form\Extension\Core\Type\FormType instance
     */
    protected function getForm_Type_FormService()
    {
        return $this->services['form.type.form'] = new \Symfony\Component\Form\Extension\Core\Type\FormType($this->get('property_accessor'));
    }

    /**
     * Gets the 'form.type.hidden' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\HiddenType A Symfony\Component\Form\Extension\Core\Type\HiddenType instance
     *
     * @deprecated The "form.type.hidden" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_HiddenService()
    {
        @trigger_error('The "form.type.hidden" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.hidden'] = new \Symfony\Component\Form\Extension\Core\Type\HiddenType();
    }

    /**
     * Gets the 'form.type.integer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\IntegerType A Symfony\Component\Form\Extension\Core\Type\IntegerType instance
     *
     * @deprecated The "form.type.integer" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_IntegerService()
    {
        @trigger_error('The "form.type.integer" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.integer'] = new \Symfony\Component\Form\Extension\Core\Type\IntegerType();
    }

    /**
     * Gets the 'form.type.language' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\LanguageType A Symfony\Component\Form\Extension\Core\Type\LanguageType instance
     *
     * @deprecated The "form.type.language" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_LanguageService()
    {
        @trigger_error('The "form.type.language" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.language'] = new \Symfony\Component\Form\Extension\Core\Type\LanguageType();
    }

    /**
     * Gets the 'form.type.locale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\LocaleType A Symfony\Component\Form\Extension\Core\Type\LocaleType instance
     *
     * @deprecated The "form.type.locale" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_LocaleService()
    {
        @trigger_error('The "form.type.locale" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.locale'] = new \Symfony\Component\Form\Extension\Core\Type\LocaleType();
    }

    /**
     * Gets the 'form.type.money' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\MoneyType A Symfony\Component\Form\Extension\Core\Type\MoneyType instance
     *
     * @deprecated The "form.type.money" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_MoneyService()
    {
        @trigger_error('The "form.type.money" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.money'] = new \Symfony\Component\Form\Extension\Core\Type\MoneyType();
    }

    /**
     * Gets the 'form.type.number' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\NumberType A Symfony\Component\Form\Extension\Core\Type\NumberType instance
     *
     * @deprecated The "form.type.number" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_NumberService()
    {
        @trigger_error('The "form.type.number" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.number'] = new \Symfony\Component\Form\Extension\Core\Type\NumberType();
    }

    /**
     * Gets the 'form.type.password' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\PasswordType A Symfony\Component\Form\Extension\Core\Type\PasswordType instance
     *
     * @deprecated The "form.type.password" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_PasswordService()
    {
        @trigger_error('The "form.type.password" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.password'] = new \Symfony\Component\Form\Extension\Core\Type\PasswordType();
    }

    /**
     * Gets the 'form.type.percent' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\PercentType A Symfony\Component\Form\Extension\Core\Type\PercentType instance
     *
     * @deprecated The "form.type.percent" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_PercentService()
    {
        @trigger_error('The "form.type.percent" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.percent'] = new \Symfony\Component\Form\Extension\Core\Type\PercentType();
    }

    /**
     * Gets the 'form.type.phpcr.document' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Bundle\PHPCRBundle\Form\Type\DocumentType A Doctrine\Bundle\PHPCRBundle\Form\Type\DocumentType instance
     */
    protected function getForm_Type_Phpcr_DocumentService()
    {
        return $this->services['form.type.phpcr.document'] = new \Doctrine\Bundle\PHPCRBundle\Form\Type\DocumentType($this->get('doctrine_phpcr'));
    }

    /**
     * Gets the 'form.type.phpcr.reference' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Bundle\PHPCRBundle\Form\Type\PHPCRReferenceType A Doctrine\Bundle\PHPCRBundle\Form\Type\PHPCRReferenceType instance
     */
    protected function getForm_Type_Phpcr_ReferenceService()
    {
        return $this->services['form.type.phpcr.reference'] = new \Doctrine\Bundle\PHPCRBundle\Form\Type\PHPCRReferenceType($this->get('doctrine_phpcr.default_session'));
    }

    /**
     * Gets the 'form.type.phpcr_odm.reference_collection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Bundle\PHPCRBundle\Form\Type\PHPCRODMReferenceCollectionType A Doctrine\Bundle\PHPCRBundle\Form\Type\PHPCRODMReferenceCollectionType instance
     */
    protected function getForm_Type_PhpcrOdm_ReferenceCollectionService()
    {
        return $this->services['form.type.phpcr_odm.reference_collection'] = new \Doctrine\Bundle\PHPCRBundle\Form\Type\PHPCRODMReferenceCollectionType($this->get('doctrine_phpcr.odm.default_document_manager'));
    }

    /**
     * Gets the 'form.type.radio' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\RadioType A Symfony\Component\Form\Extension\Core\Type\RadioType instance
     *
     * @deprecated The "form.type.radio" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_RadioService()
    {
        @trigger_error('The "form.type.radio" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.radio'] = new \Symfony\Component\Form\Extension\Core\Type\RadioType();
    }

    /**
     * Gets the 'form.type.range' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\RangeType A Symfony\Component\Form\Extension\Core\Type\RangeType instance
     *
     * @deprecated The "form.type.range" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_RangeService()
    {
        @trigger_error('The "form.type.range" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.range'] = new \Symfony\Component\Form\Extension\Core\Type\RangeType();
    }

    /**
     * Gets the 'form.type.repeated' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\RepeatedType A Symfony\Component\Form\Extension\Core\Type\RepeatedType instance
     *
     * @deprecated The "form.type.repeated" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_RepeatedService()
    {
        @trigger_error('The "form.type.repeated" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.repeated'] = new \Symfony\Component\Form\Extension\Core\Type\RepeatedType();
    }

    /**
     * Gets the 'form.type.reset' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\ResetType A Symfony\Component\Form\Extension\Core\Type\ResetType instance
     *
     * @deprecated The "form.type.reset" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_ResetService()
    {
        @trigger_error('The "form.type.reset" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.reset'] = new \Symfony\Component\Form\Extension\Core\Type\ResetType();
    }

    /**
     * Gets the 'form.type.search' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\SearchType A Symfony\Component\Form\Extension\Core\Type\SearchType instance
     *
     * @deprecated The "form.type.search" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_SearchService()
    {
        @trigger_error('The "form.type.search" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.search'] = new \Symfony\Component\Form\Extension\Core\Type\SearchType();
    }

    /**
     * Gets the 'form.type.submit' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\SubmitType A Symfony\Component\Form\Extension\Core\Type\SubmitType instance
     *
     * @deprecated The "form.type.submit" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_SubmitService()
    {
        @trigger_error('The "form.type.submit" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.submit'] = new \Symfony\Component\Form\Extension\Core\Type\SubmitType();
    }

    /**
     * Gets the 'form.type.text' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\TextType A Symfony\Component\Form\Extension\Core\Type\TextType instance
     *
     * @deprecated The "form.type.text" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_TextService()
    {
        @trigger_error('The "form.type.text" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.text'] = new \Symfony\Component\Form\Extension\Core\Type\TextType();
    }

    /**
     * Gets the 'form.type.textarea' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\TextareaType A Symfony\Component\Form\Extension\Core\Type\TextareaType instance
     *
     * @deprecated The "form.type.textarea" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_TextareaService()
    {
        @trigger_error('The "form.type.textarea" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.textarea'] = new \Symfony\Component\Form\Extension\Core\Type\TextareaType();
    }

    /**
     * Gets the 'form.type.time' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\TimeType A Symfony\Component\Form\Extension\Core\Type\TimeType instance
     *
     * @deprecated The "form.type.time" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_TimeService()
    {
        @trigger_error('The "form.type.time" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.time'] = new \Symfony\Component\Form\Extension\Core\Type\TimeType();
    }

    /**
     * Gets the 'form.type.timezone' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\TimezoneType A Symfony\Component\Form\Extension\Core\Type\TimezoneType instance
     *
     * @deprecated The "form.type.timezone" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_TimezoneService()
    {
        @trigger_error('The "form.type.timezone" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.timezone'] = new \Symfony\Component\Form\Extension\Core\Type\TimezoneType();
    }

    /**
     * Gets the 'form.type.url' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\UrlType A Symfony\Component\Form\Extension\Core\Type\UrlType instance
     *
     * @deprecated The "form.type.url" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_UrlService()
    {
        @trigger_error('The "form.type.url" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.url'] = new \Symfony\Component\Form\Extension\Core\Type\UrlType();
    }

    /**
     * Gets the 'form.type_extension.csrf' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Csrf\Type\FormTypeCsrfExtension A Symfony\Component\Form\Extension\Csrf\Type\FormTypeCsrfExtension instance
     */
    protected function getForm_TypeExtension_CsrfService()
    {
        return $this->services['form.type_extension.csrf'] = new \Symfony\Component\Form\Extension\Csrf\Type\FormTypeCsrfExtension($this->get('security.csrf.token_manager'), true, '_token', $this->get('translator.default'), 'validators', new \Symfony\Component\Form\Util\ServerParams($this->get('request_stack')));
    }

    /**
     * Gets the 'form.type_extension.form.data_collector' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\DataCollector\Type\DataCollectorTypeExtension A Symfony\Component\Form\Extension\DataCollector\Type\DataCollectorTypeExtension instance
     */
    protected function getForm_TypeExtension_Form_DataCollectorService()
    {
        return $this->services['form.type_extension.form.data_collector'] = new \Symfony\Component\Form\Extension\DataCollector\Type\DataCollectorTypeExtension($this->get('data_collector.form'));
    }

    /**
     * Gets the 'form.type_extension.form.http_foundation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\HttpFoundation\Type\FormTypeHttpFoundationExtension A Symfony\Component\Form\Extension\HttpFoundation\Type\FormTypeHttpFoundationExtension instance
     */
    protected function getForm_TypeExtension_Form_HttpFoundationService()
    {
        return $this->services['form.type_extension.form.http_foundation'] = new \Symfony\Component\Form\Extension\HttpFoundation\Type\FormTypeHttpFoundationExtension(new \Sylius\Bundle\ResourceBundle\Form\Extension\HttpFoundation\HttpFoundationRequestHandler());
    }

    /**
     * Gets the 'form.type_extension.form.validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\Type\FormTypeValidatorExtension A Symfony\Component\Form\Extension\Validator\Type\FormTypeValidatorExtension instance
     */
    protected function getForm_TypeExtension_Form_ValidatorService()
    {
        return $this->services['form.type_extension.form.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\FormTypeValidatorExtension($this->get('validator'));
    }

    /**
     * Gets the 'form.type_extension.repeated.validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension A Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension instance
     */
    protected function getForm_TypeExtension_Repeated_ValidatorService()
    {
        return $this->services['form.type_extension.repeated.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension();
    }

    /**
     * Gets the 'form.type_extension.submit.validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension A Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension instance
     */
    protected function getForm_TypeExtension_Submit_ValidatorService()
    {
        return $this->services['form.type_extension.submit.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension();
    }

    /**
     * Gets the 'form.type_extension.upload.validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\Type\UploadValidatorExtension A Symfony\Component\Form\Extension\Validator\Type\UploadValidatorExtension instance
     */
    protected function getForm_TypeExtension_Upload_ValidatorService()
    {
        return $this->services['form.type_extension.upload.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\UploadValidatorExtension($this->get('translator'), 'validators');
    }

    /**
     * Gets the 'form.type_guesser.doctrine' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Doctrine\Form\DoctrineOrmTypeGuesser A Symfony\Bridge\Doctrine\Form\DoctrineOrmTypeGuesser instance
     */
    protected function getForm_TypeGuesser_DoctrineService()
    {
        return $this->services['form.type_guesser.doctrine'] = new \Symfony\Bridge\Doctrine\Form\DoctrineOrmTypeGuesser($this->get('doctrine'));
    }

    /**
     * Gets the 'form.type_guesser.doctrine_phpcr' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Bundle\PHPCRBundle\Form\PhpcrOdmTypeGuesser A Doctrine\Bundle\PHPCRBundle\Form\PhpcrOdmTypeGuesser instance
     */
    protected function getForm_TypeGuesser_DoctrinePhpcrService()
    {
        return $this->services['form.type_guesser.doctrine_phpcr'] = new \Doctrine\Bundle\PHPCRBundle\Form\PhpcrOdmTypeGuesser($this->get('doctrine_phpcr'), array());
    }

    /**
     * Gets the 'form.type_guesser.validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\ValidatorTypeGuesser A Symfony\Component\Form\Extension\Validator\ValidatorTypeGuesser instance
     */
    protected function getForm_TypeGuesser_ValidatorService()
    {
        return $this->services['form.type_guesser.validator'] = new \Symfony\Component\Form\Extension\Validator\ValidatorTypeGuesser($this->get('validator'));
    }

    /**
     * Gets the 'fos_elastica.alias_processor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\ElasticaBundle\Index\AliasProcessor A FOS\ElasticaBundle\Index\AliasProcessor instance
     */
    protected function getFosElastica_AliasProcessorService()
    {
        return $this->services['fos_elastica.alias_processor'] = new \FOS\ElasticaBundle\Index\AliasProcessor();
    }

    /**
     * Gets the 'fos_elastica.client.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\ElasticaBundle\Elastica\Client A FOS\ElasticaBundle\Elastica\Client instance
     */
    protected function getFosElastica_Client_DefaultService()
    {
        $this->services['fos_elastica.client.default'] = $instance = new \FOS\ElasticaBundle\Elastica\Client(array('connections' => array(0 => array('host' => 'jdj.dev', 'port' => 9200, 'logger' => 'fos_elastica.logger', 'compression' => false, 'headers' => array(), 'retryOnConflict' => 0)), 'connectionStrategy' => 'Simple'), '');

        $instance->setStopwatch($this->get('debug.stopwatch', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        $instance->setLogger($this->get('fos_elastica.logger'));

        return $instance;
    }

    /**
     * Gets the 'fos_elastica.config_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\ElasticaBundle\Configuration\ConfigManager A FOS\ElasticaBundle\Configuration\ConfigManager instance
     */
    protected function getFosElastica_ConfigManagerService()
    {
        return $this->services['fos_elastica.config_manager'] = new \FOS\ElasticaBundle\Configuration\ConfigManager(array(0 => new \FOS\ElasticaBundle\Configuration\Source\ContainerSource(array('jedisjeux' => array('elasticsearch_name' => 'jedisjeux', 'reference' => $this->get('fos_elastica.index.jedisjeux'), 'name' => 'jedisjeux', 'settings' => array('index' => array('analysis' => array('analyzer' => array('custom_search_analyzer' => array('type' => 'custom', 'tokenizer' => 'standard', 'filter' => array(0 => 'standard', 1 => 'lowercase', 2 => 'asciifolding')), 'custom_index_analyzer' => array('type' => 'custom', 'tokenizer' => 'standard', 'filter' => array(0 => 'standard', 1 => 'lowercase', 2 => 'asciifolding', 3 => 'custom_filter'))), 'filter' => array('custom_filter' => array('type' => 'edgeNGram', 'side' => 'front', 'min_gram' => 1, 'max_gram' => 20))))), 'type_prototype' => array(), 'use_alias' => false, 'types' => array('article' => array('name' => 'article', 'mapping' => array('dynamic_templates' => array(), 'properties' => array('title' => array('search_analyzer' => 'custom_search_analyzer', 'index_analyzer' => 'custom_index_analyzer', 'type' => 'string'))), 'config' => array('persistence' => array('driver' => 'orm', 'model' => 'AppBundle\\Entity\\Article', 'provider' => array('batch_size' => 100, 'clear_object_manager' => true, 'debug_logging' => true, 'query_builder_method' => 'createQueryBuilder'), 'finder' => array(), 'identifier' => 'id', 'listener' => array('insert' => true, 'update' => true, 'delete' => true, 'flush' => true, 'immediate' => false, 'logger' => false), 'elastica_to_model_transformer' => array('hints' => array(), 'hydrate' => true, 'ignore_missing' => false, 'query_builder_method' => 'createQueryBuilder'), 'model_to_elastica_transformer' => array(), 'persister' => array()), 'serializer' => array('groups' => array(), 'serialize_null' => false), 'index_analyzer' => NULL, 'search_analyzer' => NULL, 'dynamic' => NULL, 'date_detection' => NULL, 'dynamic_date_formats' => array(), 'numeric_detection' => NULL)), 'user' => array('name' => 'user', 'mapping' => array('dynamic_templates' => array(), 'properties' => array('username' => array('search_analyzer' => 'custom_search_analyzer', 'index_analyzer' => 'custom_index_analyzer', 'type' => 'string'))), 'config' => array('persistence' => array('driver' => 'orm', 'model' => 'AppBundle\\Entity\\User', 'provider' => array('batch_size' => 100, 'clear_object_manager' => true, 'debug_logging' => true, 'query_builder_method' => 'createQueryBuilder'), 'finder' => array(), 'identifier' => 'id', 'listener' => array('insert' => true, 'update' => true, 'delete' => true, 'flush' => true, 'immediate' => false, 'logger' => false), 'elastica_to_model_transformer' => array('hints' => array(), 'hydrate' => true, 'ignore_missing' => false, 'query_builder_method' => 'createQueryBuilder'), 'model_to_elastica_transformer' => array(), 'persister' => array()), 'serializer' => array('groups' => array(), 'serialize_null' => false), 'index_analyzer' => NULL, 'search_analyzer' => NULL, 'dynamic' => NULL, 'date_detection' => NULL, 'dynamic_date_formats' => array(), 'numeric_detection' => NULL)), 'product' => array('name' => 'product', 'mapping' => array('dynamic_templates' => array(), 'properties' => array('name' => array(), 'slug' => array('search_analyzer' => 'custom_search_analyzer', 'index_analyzer' => 'custom_index_analyzer', 'type' => 'string'), 'variants' => array())), 'config' => array('persistence' => array('driver' => 'orm', 'model' => 'AppBundle\\Entity\\Product', 'provider' => array('batch_size' => 100, 'clear_object_manager' => true, 'debug_logging' => true, 'query_builder_method' => 'createQueryBuilder'), 'finder' => array(), 'identifier' => 'id', 'listener' => array('insert' => true, 'update' => true, 'delete' => true, 'flush' => true, 'immediate' => false, 'logger' => false), 'elastica_to_model_transformer' => array('hints' => array(), 'hydrate' => true, 'ignore_missing' => false, 'query_builder_method' => 'createQueryBuilder'), 'model_to_elastica_transformer' => array(), 'persister' => array()), 'serializer' => array('groups' => array(), 'serialize_null' => false), 'index_analyzer' => NULL, 'search_analyzer' => NULL, 'dynamic' => NULL, 'date_detection' => NULL, 'dynamic_date_formats' => array(), 'numeric_detection' => NULL)), 'person' => array('name' => 'person', 'mapping' => array('dynamic_templates' => array(), 'properties' => array('firstName' => array(), 'lastName' => array(), 'slug' => array('search_analyzer' => 'custom_search_analyzer', 'index_analyzer' => 'custom_index_analyzer', 'type' => 'string'))), 'config' => array('persistence' => array('driver' => 'orm', 'model' => 'AppBundle\\Entity\\Person', 'provider' => array('batch_size' => 100, 'clear_object_manager' => true, 'debug_logging' => true, 'query_builder_method' => 'createQueryBuilder'), 'finder' => array(), 'identifier' => 'id', 'listener' => array('insert' => true, 'update' => true, 'delete' => true, 'flush' => true, 'immediate' => false, 'logger' => false), 'elastica_to_model_transformer' => array('hints' => array(), 'hydrate' => true, 'ignore_missing' => false, 'query_builder_method' => 'createQueryBuilder'), 'model_to_elastica_transformer' => array(), 'persister' => array()), 'serializer' => array('groups' => array(), 'serialize_null' => false), 'index_analyzer' => NULL, 'search_analyzer' => NULL, 'dynamic' => NULL, 'date_detection' => NULL, 'dynamic_date_formats' => array(), 'numeric_detection' => NULL)), 'taxon' => array('name' => 'taxon', 'mapping' => array('dynamic_templates' => array(), 'properties' => array('name' => array(), 'slug' => array('search_analyzer' => 'custom_search_analyzer', 'index_analyzer' => 'custom_index_analyzer', 'type' => 'string'))), 'config' => array('persistence' => array('driver' => 'orm', 'model' => 'AppBundle\\Entity\\Taxon', 'provider' => array('batch_size' => 100, 'clear_object_manager' => true, 'debug_logging' => true, 'query_builder_method' => 'createQueryBuilder'), 'finder' => array(), 'identifier' => 'id', 'listener' => array('insert' => true, 'update' => true, 'delete' => true, 'flush' => true, 'immediate' => false, 'logger' => false), 'elastica_to_model_transformer' => array('hints' => array(), 'hydrate' => true, 'ignore_missing' => false, 'query_builder_method' => 'createQueryBuilder'), 'model_to_elastica_transformer' => array(), 'persister' => array()), 'serializer' => array('groups' => array(), 'serialize_null' => false), 'index_analyzer' => NULL, 'search_analyzer' => NULL, 'dynamic' => NULL, 'date_detection' => NULL, 'dynamic_date_formats' => array(), 'numeric_detection' => NULL)), 'topic' => array('name' => 'topic', 'mapping' => array('dynamic_templates' => array(), 'properties' => array('title' => array('search_analyzer' => 'custom_search_analyzer', 'index_analyzer' => 'custom_index_analyzer', 'type' => 'string'))), 'config' => array('persistence' => array('driver' => 'orm', 'model' => 'AppBundle\\Entity\\Topic', 'provider' => array('batch_size' => 100, 'clear_object_manager' => true, 'debug_logging' => true, 'query_builder_method' => 'createQueryBuilder'), 'finder' => array(), 'identifier' => 'id', 'listener' => array('insert' => true, 'update' => true, 'delete' => true, 'flush' => true, 'immediate' => false, 'logger' => false), 'elastica_to_model_transformer' => array('hints' => array(), 'hydrate' => true, 'ignore_missing' => false, 'query_builder_method' => 'createQueryBuilder'), 'model_to_elastica_transformer' => array(), 'persister' => array()), 'serializer' => array('groups' => array(), 'serialize_null' => false), 'index_analyzer' => NULL, 'search_analyzer' => NULL, 'dynamic' => NULL, 'date_detection' => NULL, 'dynamic_date_formats' => array(), 'numeric_detection' => NULL))))))));
    }

    /**
     * Gets the 'fos_elastica.data_collector' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\ElasticaBundle\DataCollector\ElasticaDataCollector A FOS\ElasticaBundle\DataCollector\ElasticaDataCollector instance
     */
    protected function getFosElastica_DataCollectorService()
    {
        return $this->services['fos_elastica.data_collector'] = new \FOS\ElasticaBundle\DataCollector\ElasticaDataCollector($this->get('fos_elastica.logger'));
    }

    /**
     * Gets the 'fos_elastica.elastica_to_model_transformer.collection.jedisjeux' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\ElasticaBundle\Transformer\ElasticaToModelTransformerCollection A FOS\ElasticaBundle\Transformer\ElasticaToModelTransformerCollection instance
     */
    protected function getFosElastica_ElasticaToModelTransformer_Collection_JedisjeuxService()
    {
        return $this->services['fos_elastica.elastica_to_model_transformer.collection.jedisjeux'] = new \FOS\ElasticaBundle\Transformer\ElasticaToModelTransformerCollection(array('article' => ${($_ = isset($this->services['fos_elastica.elastica_to_model_transformer.jedisjeux.article']) ? $this->services['fos_elastica.elastica_to_model_transformer.jedisjeux.article'] : $this->getFosElastica_ElasticaToModelTransformer_Jedisjeux_ArticleService()) && false ?: '_'}, 'user' => ${($_ = isset($this->services['fos_elastica.elastica_to_model_transformer.jedisjeux.user']) ? $this->services['fos_elastica.elastica_to_model_transformer.jedisjeux.user'] : $this->getFosElastica_ElasticaToModelTransformer_Jedisjeux_UserService()) && false ?: '_'}, 'product' => ${($_ = isset($this->services['fos_elastica.elastica_to_model_transformer.jedisjeux.product']) ? $this->services['fos_elastica.elastica_to_model_transformer.jedisjeux.product'] : $this->getFosElastica_ElasticaToModelTransformer_Jedisjeux_ProductService()) && false ?: '_'}, 'person' => ${($_ = isset($this->services['fos_elastica.elastica_to_model_transformer.jedisjeux.person']) ? $this->services['fos_elastica.elastica_to_model_transformer.jedisjeux.person'] : $this->getFosElastica_ElasticaToModelTransformer_Jedisjeux_PersonService()) && false ?: '_'}, 'taxon' => ${($_ = isset($this->services['fos_elastica.elastica_to_model_transformer.jedisjeux.taxon']) ? $this->services['fos_elastica.elastica_to_model_transformer.jedisjeux.taxon'] : $this->getFosElastica_ElasticaToModelTransformer_Jedisjeux_TaxonService()) && false ?: '_'}, 'topic' => ${($_ = isset($this->services['fos_elastica.elastica_to_model_transformer.jedisjeux.topic']) ? $this->services['fos_elastica.elastica_to_model_transformer.jedisjeux.topic'] : $this->getFosElastica_ElasticaToModelTransformer_Jedisjeux_TopicService()) && false ?: '_'}));
    }

    /**
     * Gets the 'fos_elastica.finder.jedisjeux' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\ElasticaBundle\Finder\TransformedFinder A FOS\ElasticaBundle\Finder\TransformedFinder instance
     */
    protected function getFosElastica_Finder_JedisjeuxService()
    {
        return $this->services['fos_elastica.finder.jedisjeux'] = new \FOS\ElasticaBundle\Finder\TransformedFinder($this->get('fos_elastica.index.jedisjeux'), $this->get('fos_elastica.elastica_to_model_transformer.collection.jedisjeux'));
    }

    /**
     * Gets the 'fos_elastica.finder.jedisjeux.article' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\ElasticaBundle\Finder\TransformedFinder A FOS\ElasticaBundle\Finder\TransformedFinder instance
     */
    protected function getFosElastica_Finder_Jedisjeux_ArticleService()
    {
        return $this->services['fos_elastica.finder.jedisjeux.article'] = new \FOS\ElasticaBundle\Finder\TransformedFinder($this->get('fos_elastica.index.jedisjeux.article'), ${($_ = isset($this->services['fos_elastica.elastica_to_model_transformer.jedisjeux.article']) ? $this->services['fos_elastica.elastica_to_model_transformer.jedisjeux.article'] : $this->getFosElastica_ElasticaToModelTransformer_Jedisjeux_ArticleService()) && false ?: '_'});
    }

    /**
     * Gets the 'fos_elastica.finder.jedisjeux.person' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\ElasticaBundle\Finder\TransformedFinder A FOS\ElasticaBundle\Finder\TransformedFinder instance
     */
    protected function getFosElastica_Finder_Jedisjeux_PersonService()
    {
        return $this->services['fos_elastica.finder.jedisjeux.person'] = new \FOS\ElasticaBundle\Finder\TransformedFinder($this->get('fos_elastica.index.jedisjeux.person'), ${($_ = isset($this->services['fos_elastica.elastica_to_model_transformer.jedisjeux.person']) ? $this->services['fos_elastica.elastica_to_model_transformer.jedisjeux.person'] : $this->getFosElastica_ElasticaToModelTransformer_Jedisjeux_PersonService()) && false ?: '_'});
    }

    /**
     * Gets the 'fos_elastica.finder.jedisjeux.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\ElasticaBundle\Finder\TransformedFinder A FOS\ElasticaBundle\Finder\TransformedFinder instance
     */
    protected function getFosElastica_Finder_Jedisjeux_ProductService()
    {
        return $this->services['fos_elastica.finder.jedisjeux.product'] = new \FOS\ElasticaBundle\Finder\TransformedFinder($this->get('fos_elastica.index.jedisjeux.product'), ${($_ = isset($this->services['fos_elastica.elastica_to_model_transformer.jedisjeux.product']) ? $this->services['fos_elastica.elastica_to_model_transformer.jedisjeux.product'] : $this->getFosElastica_ElasticaToModelTransformer_Jedisjeux_ProductService()) && false ?: '_'});
    }

    /**
     * Gets the 'fos_elastica.finder.jedisjeux.taxon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\ElasticaBundle\Finder\TransformedFinder A FOS\ElasticaBundle\Finder\TransformedFinder instance
     */
    protected function getFosElastica_Finder_Jedisjeux_TaxonService()
    {
        return $this->services['fos_elastica.finder.jedisjeux.taxon'] = new \FOS\ElasticaBundle\Finder\TransformedFinder($this->get('fos_elastica.index.jedisjeux.taxon'), ${($_ = isset($this->services['fos_elastica.elastica_to_model_transformer.jedisjeux.taxon']) ? $this->services['fos_elastica.elastica_to_model_transformer.jedisjeux.taxon'] : $this->getFosElastica_ElasticaToModelTransformer_Jedisjeux_TaxonService()) && false ?: '_'});
    }

    /**
     * Gets the 'fos_elastica.finder.jedisjeux.topic' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\ElasticaBundle\Finder\TransformedFinder A FOS\ElasticaBundle\Finder\TransformedFinder instance
     */
    protected function getFosElastica_Finder_Jedisjeux_TopicService()
    {
        return $this->services['fos_elastica.finder.jedisjeux.topic'] = new \FOS\ElasticaBundle\Finder\TransformedFinder($this->get('fos_elastica.index.jedisjeux.topic'), ${($_ = isset($this->services['fos_elastica.elastica_to_model_transformer.jedisjeux.topic']) ? $this->services['fos_elastica.elastica_to_model_transformer.jedisjeux.topic'] : $this->getFosElastica_ElasticaToModelTransformer_Jedisjeux_TopicService()) && false ?: '_'});
    }

    /**
     * Gets the 'fos_elastica.finder.jedisjeux.user' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\ElasticaBundle\Finder\TransformedFinder A FOS\ElasticaBundle\Finder\TransformedFinder instance
     */
    protected function getFosElastica_Finder_Jedisjeux_UserService()
    {
        return $this->services['fos_elastica.finder.jedisjeux.user'] = new \FOS\ElasticaBundle\Finder\TransformedFinder($this->get('fos_elastica.index.jedisjeux.user'), ${($_ = isset($this->services['fos_elastica.elastica_to_model_transformer.jedisjeux.user']) ? $this->services['fos_elastica.elastica_to_model_transformer.jedisjeux.user'] : $this->getFosElastica_ElasticaToModelTransformer_Jedisjeux_UserService()) && false ?: '_'});
    }

    /**
     * Gets the 'fos_elastica.index.jedisjeux' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\ElasticaBundle\Elastica\Index A FOS\ElasticaBundle\Elastica\Index instance
     */
    protected function getFosElastica_Index_JedisjeuxService()
    {
        return $this->services['fos_elastica.index.jedisjeux'] = $this->get('fos_elastica.client.default')->getIndex('jedisjeux');
    }

    /**
     * Gets the 'fos_elastica.index.jedisjeux.article' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elastica\Type A Elastica\Type instance
     */
    protected function getFosElastica_Index_Jedisjeux_ArticleService()
    {
        return $this->services['fos_elastica.index.jedisjeux.article'] = $this->get('fos_elastica.index.jedisjeux')->getType('article');
    }

    /**
     * Gets the 'fos_elastica.index.jedisjeux.person' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elastica\Type A Elastica\Type instance
     */
    protected function getFosElastica_Index_Jedisjeux_PersonService()
    {
        return $this->services['fos_elastica.index.jedisjeux.person'] = $this->get('fos_elastica.index.jedisjeux')->getType('person');
    }

    /**
     * Gets the 'fos_elastica.index.jedisjeux.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elastica\Type A Elastica\Type instance
     */
    protected function getFosElastica_Index_Jedisjeux_ProductService()
    {
        return $this->services['fos_elastica.index.jedisjeux.product'] = $this->get('fos_elastica.index.jedisjeux')->getType('product');
    }

    /**
     * Gets the 'fos_elastica.index.jedisjeux.taxon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elastica\Type A Elastica\Type instance
     */
    protected function getFosElastica_Index_Jedisjeux_TaxonService()
    {
        return $this->services['fos_elastica.index.jedisjeux.taxon'] = $this->get('fos_elastica.index.jedisjeux')->getType('taxon');
    }

    /**
     * Gets the 'fos_elastica.index.jedisjeux.topic' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elastica\Type A Elastica\Type instance
     */
    protected function getFosElastica_Index_Jedisjeux_TopicService()
    {
        return $this->services['fos_elastica.index.jedisjeux.topic'] = $this->get('fos_elastica.index.jedisjeux')->getType('topic');
    }

    /**
     * Gets the 'fos_elastica.index.jedisjeux.user' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elastica\Type A Elastica\Type instance
     */
    protected function getFosElastica_Index_Jedisjeux_UserService()
    {
        return $this->services['fos_elastica.index.jedisjeux.user'] = $this->get('fos_elastica.index.jedisjeux')->getType('user');
    }

    /**
     * Gets the 'fos_elastica.index_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\ElasticaBundle\Index\IndexManager A FOS\ElasticaBundle\Index\IndexManager instance
     */
    protected function getFosElastica_IndexManagerService()
    {
        $a = $this->get('fos_elastica.index.jedisjeux');

        return $this->services['fos_elastica.index_manager'] = new \FOS\ElasticaBundle\Index\IndexManager(array('jedisjeux' => $a), $a);
    }

    /**
     * Gets the 'fos_elastica.indexable' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\ElasticaBundle\Provider\Indexable A FOS\ElasticaBundle\Provider\Indexable instance
     */
    protected function getFosElastica_IndexableService()
    {
        return $this->services['fos_elastica.indexable'] = new \FOS\ElasticaBundle\Provider\Indexable(array(), $this);
    }

    /**
     * Gets the 'fos_elastica.logger' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\ElasticaBundle\Logger\ElasticaLogger A FOS\ElasticaBundle\Logger\ElasticaLogger instance
     */
    protected function getFosElastica_LoggerService()
    {
        return $this->services['fos_elastica.logger'] = new \FOS\ElasticaBundle\Logger\ElasticaLogger($this->get('monolog.logger.elastica', ContainerInterface::NULL_ON_INVALID_REFERENCE), true);
    }

    /**
     * Gets the 'fos_elastica.manager.orm' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\ElasticaBundle\Doctrine\RepositoryManager A FOS\ElasticaBundle\Doctrine\RepositoryManager instance
     */
    protected function getFosElastica_Manager_OrmService()
    {
        $this->services['fos_elastica.manager.orm'] = $instance = new \FOS\ElasticaBundle\Doctrine\RepositoryManager($this->get('doctrine'), $this->get('annotation_reader'));

        $instance->addEntity('AppBundle\\Entity\\Article', $this->get('fos_elastica.finder.jedisjeux.article'));
        $instance->addEntity('AppBundle\\Entity\\User', $this->get('fos_elastica.finder.jedisjeux.user'));
        $instance->addEntity('AppBundle\\Entity\\Product', $this->get('fos_elastica.finder.jedisjeux.product'));
        $instance->addEntity('AppBundle\\Entity\\Person', $this->get('fos_elastica.finder.jedisjeux.person'));
        $instance->addEntity('AppBundle\\Entity\\Taxon', $this->get('fos_elastica.finder.jedisjeux.taxon'));
        $instance->addEntity('AppBundle\\Entity\\Topic', $this->get('fos_elastica.finder.jedisjeux.topic'));

        return $instance;
    }

    /**
     * Gets the 'fos_elastica.mapping_builder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\ElasticaBundle\Index\MappingBuilder A FOS\ElasticaBundle\Index\MappingBuilder instance
     */
    protected function getFosElastica_MappingBuilderService()
    {
        return $this->services['fos_elastica.mapping_builder'] = new \FOS\ElasticaBundle\Index\MappingBuilder();
    }

    /**
     * Gets the 'fos_elastica.object_persister.jedisjeux.article' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\ElasticaBundle\Persister\ObjectPersister A FOS\ElasticaBundle\Persister\ObjectPersister instance
     */
    protected function getFosElastica_ObjectPersister_Jedisjeux_ArticleService()
    {
        $a = new \FOS\ElasticaBundle\Transformer\ModelToElasticaAutoTransformer(array('identifier' => 'id'), $this->get('debug.event_dispatcher'));
        $a->setPropertyAccessor($this->get('fos_elastica.property_accessor'));

        return $this->services['fos_elastica.object_persister.jedisjeux.article'] = new \FOS\ElasticaBundle\Persister\ObjectPersister($this->get('fos_elastica.index.jedisjeux.article'), $a, 'AppBundle\\Entity\\Article', array('title' => array('search_analyzer' => 'custom_search_analyzer', 'index_analyzer' => 'custom_index_analyzer', 'type' => 'string')));
    }

    /**
     * Gets the 'fos_elastica.object_persister.jedisjeux.person' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\ElasticaBundle\Persister\ObjectPersister A FOS\ElasticaBundle\Persister\ObjectPersister instance
     */
    protected function getFosElastica_ObjectPersister_Jedisjeux_PersonService()
    {
        $a = new \FOS\ElasticaBundle\Transformer\ModelToElasticaAutoTransformer(array('identifier' => 'id'), $this->get('debug.event_dispatcher'));
        $a->setPropertyAccessor($this->get('fos_elastica.property_accessor'));

        return $this->services['fos_elastica.object_persister.jedisjeux.person'] = new \FOS\ElasticaBundle\Persister\ObjectPersister($this->get('fos_elastica.index.jedisjeux.person'), $a, 'AppBundle\\Entity\\Person', array('firstName' => array(), 'lastName' => array(), 'slug' => array('search_analyzer' => 'custom_search_analyzer', 'index_analyzer' => 'custom_index_analyzer', 'type' => 'string')));
    }

    /**
     * Gets the 'fos_elastica.object_persister.jedisjeux.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\ElasticaBundle\Persister\ObjectPersister A FOS\ElasticaBundle\Persister\ObjectPersister instance
     */
    protected function getFosElastica_ObjectPersister_Jedisjeux_ProductService()
    {
        $a = new \FOS\ElasticaBundle\Transformer\ModelToElasticaAutoTransformer(array('identifier' => 'id'), $this->get('debug.event_dispatcher'));
        $a->setPropertyAccessor($this->get('fos_elastica.property_accessor'));

        return $this->services['fos_elastica.object_persister.jedisjeux.product'] = new \FOS\ElasticaBundle\Persister\ObjectPersister($this->get('fos_elastica.index.jedisjeux.product'), $a, 'AppBundle\\Entity\\Product', array('name' => array(), 'slug' => array('search_analyzer' => 'custom_search_analyzer', 'index_analyzer' => 'custom_index_analyzer', 'type' => 'string'), 'variants' => array()));
    }

    /**
     * Gets the 'fos_elastica.object_persister.jedisjeux.taxon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\ElasticaBundle\Persister\ObjectPersister A FOS\ElasticaBundle\Persister\ObjectPersister instance
     */
    protected function getFosElastica_ObjectPersister_Jedisjeux_TaxonService()
    {
        $a = new \FOS\ElasticaBundle\Transformer\ModelToElasticaAutoTransformer(array('identifier' => 'id'), $this->get('debug.event_dispatcher'));
        $a->setPropertyAccessor($this->get('fos_elastica.property_accessor'));

        return $this->services['fos_elastica.object_persister.jedisjeux.taxon'] = new \FOS\ElasticaBundle\Persister\ObjectPersister($this->get('fos_elastica.index.jedisjeux.taxon'), $a, 'AppBundle\\Entity\\Taxon', array('name' => array(), 'slug' => array('search_analyzer' => 'custom_search_analyzer', 'index_analyzer' => 'custom_index_analyzer', 'type' => 'string')));
    }

    /**
     * Gets the 'fos_elastica.object_persister.jedisjeux.topic' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\ElasticaBundle\Persister\ObjectPersister A FOS\ElasticaBundle\Persister\ObjectPersister instance
     */
    protected function getFosElastica_ObjectPersister_Jedisjeux_TopicService()
    {
        $a = new \FOS\ElasticaBundle\Transformer\ModelToElasticaAutoTransformer(array('identifier' => 'id'), $this->get('debug.event_dispatcher'));
        $a->setPropertyAccessor($this->get('fos_elastica.property_accessor'));

        return $this->services['fos_elastica.object_persister.jedisjeux.topic'] = new \FOS\ElasticaBundle\Persister\ObjectPersister($this->get('fos_elastica.index.jedisjeux.topic'), $a, 'AppBundle\\Entity\\Topic', array('title' => array('search_analyzer' => 'custom_search_analyzer', 'index_analyzer' => 'custom_index_analyzer', 'type' => 'string')));
    }

    /**
     * Gets the 'fos_elastica.object_persister.jedisjeux.user' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\ElasticaBundle\Persister\ObjectPersister A FOS\ElasticaBundle\Persister\ObjectPersister instance
     */
    protected function getFosElastica_ObjectPersister_Jedisjeux_UserService()
    {
        $a = new \FOS\ElasticaBundle\Transformer\ModelToElasticaAutoTransformer(array('identifier' => 'id'), $this->get('debug.event_dispatcher'));
        $a->setPropertyAccessor($this->get('fos_elastica.property_accessor'));

        return $this->services['fos_elastica.object_persister.jedisjeux.user'] = new \FOS\ElasticaBundle\Persister\ObjectPersister($this->get('fos_elastica.index.jedisjeux.user'), $a, 'AppBundle\\Entity\\User', array('username' => array('search_analyzer' => 'custom_search_analyzer', 'index_analyzer' => 'custom_index_analyzer', 'type' => 'string')));
    }

    /**
     * Gets the 'fos_elastica.paginator.subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\ElasticaBundle\Subscriber\PaginateElasticaQuerySubscriber A FOS\ElasticaBundle\Subscriber\PaginateElasticaQuerySubscriber instance
     */
    protected function getFosElastica_Paginator_SubscriberService()
    {
        $this->services['fos_elastica.paginator.subscriber'] = $instance = new \FOS\ElasticaBundle\Subscriber\PaginateElasticaQuerySubscriber();

        $instance->setRequest($this->get('request_stack', ContainerInterface::NULL_ON_INVALID_REFERENCE));

        return $instance;
    }

    /**
     * Gets the 'fos_elastica.property_accessor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\PropertyAccess\PropertyAccessor A Symfony\Component\PropertyAccess\PropertyAccessor instance
     */
    protected function getFosElastica_PropertyAccessorService()
    {
        return $this->services['fos_elastica.property_accessor'] = new \Symfony\Component\PropertyAccess\PropertyAccessor(false, false);
    }

    /**
     * Gets the 'fos_elastica.provider.jedisjeux.article' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\ElasticaBundle\Doctrine\ORM\Provider A FOS\ElasticaBundle\Doctrine\ORM\Provider instance
     */
    protected function getFosElastica_Provider_Jedisjeux_ArticleService()
    {
        return $this->services['fos_elastica.provider.jedisjeux.article'] = new \FOS\ElasticaBundle\Doctrine\ORM\Provider($this->get('fos_elastica.object_persister.jedisjeux.article'), $this->get('fos_elastica.indexable'), 'AppBundle\\Entity\\Article', array('batch_size' => 100, 'clear_object_manager' => true, 'debug_logging' => true, 'query_builder_method' => 'createQueryBuilder', 'indexName' => 'jedisjeux', 'typeName' => 'article'), $this->get('doctrine'), $this->get('fos_elastica.slice_fetcher.orm'));
    }

    /**
     * Gets the 'fos_elastica.provider.jedisjeux.person' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\ElasticaBundle\Doctrine\ORM\Provider A FOS\ElasticaBundle\Doctrine\ORM\Provider instance
     */
    protected function getFosElastica_Provider_Jedisjeux_PersonService()
    {
        return $this->services['fos_elastica.provider.jedisjeux.person'] = new \FOS\ElasticaBundle\Doctrine\ORM\Provider($this->get('fos_elastica.object_persister.jedisjeux.person'), $this->get('fos_elastica.indexable'), 'AppBundle\\Entity\\Person', array('batch_size' => 100, 'clear_object_manager' => true, 'debug_logging' => true, 'query_builder_method' => 'createQueryBuilder', 'indexName' => 'jedisjeux', 'typeName' => 'person'), $this->get('doctrine'), $this->get('fos_elastica.slice_fetcher.orm'));
    }

    /**
     * Gets the 'fos_elastica.provider.jedisjeux.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\ElasticaBundle\Doctrine\ORM\Provider A FOS\ElasticaBundle\Doctrine\ORM\Provider instance
     */
    protected function getFosElastica_Provider_Jedisjeux_ProductService()
    {
        return $this->services['fos_elastica.provider.jedisjeux.product'] = new \FOS\ElasticaBundle\Doctrine\ORM\Provider($this->get('fos_elastica.object_persister.jedisjeux.product'), $this->get('fos_elastica.indexable'), 'AppBundle\\Entity\\Product', array('batch_size' => 100, 'clear_object_manager' => true, 'debug_logging' => true, 'query_builder_method' => 'createQueryBuilder', 'indexName' => 'jedisjeux', 'typeName' => 'product'), $this->get('doctrine'), $this->get('fos_elastica.slice_fetcher.orm'));
    }

    /**
     * Gets the 'fos_elastica.provider.jedisjeux.taxon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\ElasticaBundle\Doctrine\ORM\Provider A FOS\ElasticaBundle\Doctrine\ORM\Provider instance
     */
    protected function getFosElastica_Provider_Jedisjeux_TaxonService()
    {
        return $this->services['fos_elastica.provider.jedisjeux.taxon'] = new \FOS\ElasticaBundle\Doctrine\ORM\Provider($this->get('fos_elastica.object_persister.jedisjeux.taxon'), $this->get('fos_elastica.indexable'), 'AppBundle\\Entity\\Taxon', array('batch_size' => 100, 'clear_object_manager' => true, 'debug_logging' => true, 'query_builder_method' => 'createQueryBuilder', 'indexName' => 'jedisjeux', 'typeName' => 'taxon'), $this->get('doctrine'), $this->get('fos_elastica.slice_fetcher.orm'));
    }

    /**
     * Gets the 'fos_elastica.provider.jedisjeux.topic' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\ElasticaBundle\Doctrine\ORM\Provider A FOS\ElasticaBundle\Doctrine\ORM\Provider instance
     */
    protected function getFosElastica_Provider_Jedisjeux_TopicService()
    {
        return $this->services['fos_elastica.provider.jedisjeux.topic'] = new \FOS\ElasticaBundle\Doctrine\ORM\Provider($this->get('fos_elastica.object_persister.jedisjeux.topic'), $this->get('fos_elastica.indexable'), 'AppBundle\\Entity\\Topic', array('batch_size' => 100, 'clear_object_manager' => true, 'debug_logging' => true, 'query_builder_method' => 'createQueryBuilder', 'indexName' => 'jedisjeux', 'typeName' => 'topic'), $this->get('doctrine'), $this->get('fos_elastica.slice_fetcher.orm'));
    }

    /**
     * Gets the 'fos_elastica.provider.jedisjeux.user' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\ElasticaBundle\Doctrine\ORM\Provider A FOS\ElasticaBundle\Doctrine\ORM\Provider instance
     */
    protected function getFosElastica_Provider_Jedisjeux_UserService()
    {
        return $this->services['fos_elastica.provider.jedisjeux.user'] = new \FOS\ElasticaBundle\Doctrine\ORM\Provider($this->get('fos_elastica.object_persister.jedisjeux.user'), $this->get('fos_elastica.indexable'), 'AppBundle\\Entity\\User', array('batch_size' => 100, 'clear_object_manager' => true, 'debug_logging' => true, 'query_builder_method' => 'createQueryBuilder', 'indexName' => 'jedisjeux', 'typeName' => 'user'), $this->get('doctrine'), $this->get('fos_elastica.slice_fetcher.orm'));
    }

    /**
     * Gets the 'fos_elastica.provider_registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\ElasticaBundle\Provider\ProviderRegistry A FOS\ElasticaBundle\Provider\ProviderRegistry instance
     */
    protected function getFosElastica_ProviderRegistryService()
    {
        $this->services['fos_elastica.provider_registry'] = $instance = new \FOS\ElasticaBundle\Provider\ProviderRegistry();

        $instance->setContainer($this);
        $instance->addProvider('jedisjeux', 'article', 'fos_elastica.provider.jedisjeux.article');
        $instance->addProvider('jedisjeux', 'user', 'fos_elastica.provider.jedisjeux.user');
        $instance->addProvider('jedisjeux', 'product', 'fos_elastica.provider.jedisjeux.product');
        $instance->addProvider('jedisjeux', 'person', 'fos_elastica.provider.jedisjeux.person');
        $instance->addProvider('jedisjeux', 'taxon', 'fos_elastica.provider.jedisjeux.taxon');
        $instance->addProvider('jedisjeux', 'topic', 'fos_elastica.provider.jedisjeux.topic');

        return $instance;
    }

    /**
     * Gets the 'fos_elastica.resetter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\ElasticaBundle\Index\Resetter A FOS\ElasticaBundle\Index\Resetter instance
     */
    protected function getFosElastica_ResetterService()
    {
        return $this->services['fos_elastica.resetter'] = new \FOS\ElasticaBundle\Index\Resetter($this->get('fos_elastica.config_manager'), $this->get('fos_elastica.index_manager'), $this->get('fos_elastica.alias_processor'), $this->get('fos_elastica.mapping_builder'), $this->get('debug.event_dispatcher'));
    }

    /**
     * Gets the 'fos_elastica.slice_fetcher.orm' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\ElasticaBundle\Doctrine\ORM\SliceFetcher A FOS\ElasticaBundle\Doctrine\ORM\SliceFetcher instance
     */
    protected function getFosElastica_SliceFetcher_OrmService()
    {
        return $this->services['fos_elastica.slice_fetcher.orm'] = new \FOS\ElasticaBundle\Doctrine\ORM\SliceFetcher();
    }

    /**
     * Gets the 'fos_js_routing.controller' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\JsRoutingBundle\Controller\Controller A FOS\JsRoutingBundle\Controller\Controller instance
     */
    protected function getFosJsRouting_ControllerService()
    {
        return $this->services['fos_js_routing.controller'] = new \FOS\JsRoutingBundle\Controller\Controller($this->get('fos_js_routing.serializer'), $this->get('fos_js_routing.extractor'), array('enabled' => false), true);
    }

    /**
     * Gets the 'fos_js_routing.extractor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\JsRoutingBundle\Extractor\ExposedRoutesExtractor A FOS\JsRoutingBundle\Extractor\ExposedRoutesExtractor instance
     */
    protected function getFosJsRouting_ExtractorService()
    {
        return $this->services['fos_js_routing.extractor'] = new \FOS\JsRoutingBundle\Extractor\ExposedRoutesExtractor($this->get('cmf_routing.router'), array(), __DIR__, array('FrameworkBundle' => 'Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle', 'SecurityBundle' => 'Symfony\\Bundle\\SecurityBundle\\SecurityBundle', 'TwigBundle' => 'Symfony\\Bundle\\TwigBundle\\TwigBundle', 'MonologBundle' => 'Symfony\\Bundle\\MonologBundle\\MonologBundle', 'SwiftmailerBundle' => 'Symfony\\Bundle\\SwiftmailerBundle\\SwiftmailerBundle', 'AsseticBundle' => 'Symfony\\Bundle\\AsseticBundle\\AsseticBundle', 'SensioFrameworkExtraBundle' => 'Sensio\\Bundle\\FrameworkExtraBundle\\SensioFrameworkExtraBundle', 'JMSSerializerBundle' => 'JMS\\SerializerBundle\\JMSSerializerBundle', 'JMSTranslationBundle' => 'JMS\\TranslationBundle\\JMSTranslationBundle', 'StofDoctrineExtensionsBundle' => 'Stof\\DoctrineExtensionsBundle\\StofDoctrineExtensionsBundle', 'WhiteOctoberPagerfantaBundle' => 'WhiteOctober\\PagerfantaBundle\\WhiteOctoberPagerfantaBundle', 'BazingaHateoasBundle' => 'Bazinga\\Bundle\\HateoasBundle\\BazingaHateoasBundle', 'SyliusLocaleBundle' => 'Sylius\\Bundle\\LocaleBundle\\SyliusLocaleBundle', 'SyliusProductBundle' => 'Sylius\\Bundle\\ProductBundle\\SyliusProductBundle', 'SyliusUiBundle' => 'Sylius\\Bundle\\UiBundle\\SyliusUiBundle', 'SyliusUserBundle' => 'Sylius\\Bundle\\UserBundle\\SyliusUserBundle', 'SyliusCustomerBundle' => 'Sylius\\Bundle\\CustomerBundle\\SyliusCustomerBundle', 'SyliusMailerBundle' => 'Sylius\\Bundle\\MailerBundle\\SyliusMailerBundle', 'SyliusReviewBundle' => 'Sylius\\Bundle\\ReviewBundle\\SyliusReviewBundle', 'SyliusResourceBundle' => 'Sylius\\Bundle\\ResourceBundle\\SyliusResourceBundle', 'SyliusAttributeBundle' => 'Sylius\\Bundle\\AttributeBundle\\SyliusAttributeBundle', 'SyliusTaxonomyBundle' => 'Sylius\\Bundle\\TaxonomyBundle\\SyliusTaxonomyBundle', 'winzouStateMachineBundle' => 'winzou\\Bundle\\StateMachineBundle\\winzouStateMachineBundle', 'SonataBlockBundle' => 'Sonata\\BlockBundle\\SonataBlockBundle', 'CmfCoreBundle' => 'Symfony\\Cmf\\Bundle\\CoreBundle\\CmfCoreBundle', 'CmfBlockBundle' => 'Symfony\\Cmf\\Bundle\\BlockBundle\\CmfBlockBundle', 'CmfMediaBundle' => 'Symfony\\Cmf\\Bundle\\MediaBundle\\CmfMediaBundle', 'CmfRoutingBundle' => 'Symfony\\Cmf\\Bundle\\RoutingBundle\\CmfRoutingBundle', 'SyliusGridBundle' => 'Sylius\\Bundle\\GridBundle\\SyliusGridBundle', 'FOSRestBundle' => 'FOS\\RestBundle\\FOSRestBundle', 'FOSJsRoutingBundle' => 'FOS\\JsRoutingBundle\\FOSJsRoutingBundle', 'FOSElasticaBundle' => 'FOS\\ElasticaBundle\\FOSElasticaBundle', 'DoctrinePHPCRBundle' => 'Doctrine\\Bundle\\PHPCRBundle\\DoctrinePHPCRBundle', 'DoctrineCacheBundle' => 'Doctrine\\Bundle\\DoctrineCacheBundle\\DoctrineCacheBundle', 'DoctrineBundle' => 'Doctrine\\Bundle\\DoctrineBundle\\DoctrineBundle', 'DoctrineMigrationsBundle' => 'Doctrine\\Bundle\\MigrationsBundle\\DoctrineMigrationsBundle', 'InfiniteFormBundle' => 'Infinite\\FormBundle\\InfiniteFormBundle', 'KnpMenuBundle' => 'Knp\\Bundle\\MenuBundle\\KnpMenuBundle', 'MopaBootstrapBundle' => 'Mopa\\Bundle\\BootstrapBundle\\MopaBootstrapBundle', 'LiipImagineBundle' => 'Liip\\ImagineBundle\\LiipImagineBundle', 'IvoryCKEditorBundle' => 'Ivory\\CKEditorBundle\\IvoryCKEditorBundle', 'DoctrineBehaviorsBundle' => 'Knp\\DoctrineBehaviors\\Bundle\\DoctrineBehaviorsBundle', 'ZenstruckRedirectBundle' => 'Zenstruck\\RedirectBundle\\ZenstruckRedirectBundle', 'BmatznerJQueryUIBundle' => 'Bmatzner\\JQueryUIBundle\\BmatznerJQueryUIBundle', 'BmatznerJQueryBundle' => 'Bmatzner\\JQueryBundle\\BmatznerJQueryBundle', 'BmatznerFontAwesomeBundle' => 'Bmatzner\\FontAwesomeBundle\\BmatznerFontAwesomeBundle', 'AppBundle' => 'AppBundle\\AppBundle', 'DebugBundle' => 'Symfony\\Bundle\\DebugBundle\\DebugBundle', 'WebProfilerBundle' => 'Symfony\\Bundle\\WebProfilerBundle\\WebProfilerBundle', 'SensioDistributionBundle' => 'Sensio\\Bundle\\DistributionBundle\\SensioDistributionBundle'));
    }

    /**
     * Gets the 'fos_js_routing.serializer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Serializer\Serializer A Symfony\Component\Serializer\Serializer instance
     */
    protected function getFosJsRouting_SerializerService()
    {
        return $this->services['fos_js_routing.serializer'] = new \Symfony\Component\Serializer\Serializer(array(0 => new \Symfony\Component\Serializer\Normalizer\GetSetMethodNormalizer()), array('json' => new \Symfony\Component\Serializer\Encoder\JsonEncoder()));
    }

    /**
     * Gets the 'fos_rest.body_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\EventListener\BodyListener A FOS\RestBundle\EventListener\BodyListener instance
     */
    protected function getFosRest_BodyListenerService()
    {
        $this->services['fos_rest.body_listener'] = $instance = new \FOS\RestBundle\EventListener\BodyListener($this->get('fos_rest.decoder_provider'), false);

        $instance->setDefaultFormat(NULL);

        return $instance;
    }

    /**
     * Gets the 'fos_rest.decoder.json' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Decoder\JsonDecoder A FOS\RestBundle\Decoder\JsonDecoder instance
     */
    protected function getFosRest_Decoder_JsonService()
    {
        return $this->services['fos_rest.decoder.json'] = new \FOS\RestBundle\Decoder\JsonDecoder();
    }

    /**
     * Gets the 'fos_rest.decoder.jsontoform' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Decoder\JsonToFormDecoder A FOS\RestBundle\Decoder\JsonToFormDecoder instance
     */
    protected function getFosRest_Decoder_JsontoformService()
    {
        return $this->services['fos_rest.decoder.jsontoform'] = new \FOS\RestBundle\Decoder\JsonToFormDecoder();
    }

    /**
     * Gets the 'fos_rest.decoder.xml' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Decoder\XmlDecoder A FOS\RestBundle\Decoder\XmlDecoder instance
     */
    protected function getFosRest_Decoder_XmlService()
    {
        return $this->services['fos_rest.decoder.xml'] = new \FOS\RestBundle\Decoder\XmlDecoder();
    }

    /**
     * Gets the 'fos_rest.decoder_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Decoder\ContainerDecoderProvider A FOS\RestBundle\Decoder\ContainerDecoderProvider instance
     */
    protected function getFosRest_DecoderProviderService()
    {
        $this->services['fos_rest.decoder_provider'] = $instance = new \FOS\RestBundle\Decoder\ContainerDecoderProvider(array('json' => 'fos_rest.decoder.json', 'xml' => 'fos_rest.decoder.xml'));

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'fos_rest.exception_format_negotiator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Negotiation\FormatNegotiator A FOS\RestBundle\Negotiation\FormatNegotiator instance
     */
    protected function getFosRest_ExceptionFormatNegotiatorService()
    {
        return $this->services['fos_rest.exception_format_negotiator'] = new \FOS\RestBundle\Negotiation\FormatNegotiator();
    }

    /**
     * Gets the 'fos_rest.format_negotiator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Negotiation\FormatNegotiator A FOS\RestBundle\Negotiation\FormatNegotiator instance
     */
    protected function getFosRest_FormatNegotiatorService()
    {
        return $this->services['fos_rest.format_negotiator'] = new \FOS\RestBundle\Negotiation\FormatNegotiator();
    }

    /**
     * Gets the 'fos_rest.inflector.doctrine' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Inflector\DoctrineInflector A FOS\RestBundle\Inflector\DoctrineInflector instance
     */
    protected function getFosRest_Inflector_DoctrineService()
    {
        return $this->services['fos_rest.inflector.doctrine'] = new \FOS\RestBundle\Inflector\DoctrineInflector();
    }

    /**
     * Gets the 'fos_rest.normalizer.camel_keys' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Normalizer\CamelKeysNormalizer A FOS\RestBundle\Normalizer\CamelKeysNormalizer instance
     */
    protected function getFosRest_Normalizer_CamelKeysService()
    {
        return $this->services['fos_rest.normalizer.camel_keys'] = new \FOS\RestBundle\Normalizer\CamelKeysNormalizer();
    }

    /**
     * Gets the 'fos_rest.normalizer.camel_keys_with_leading_underscore' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Normalizer\CamelKeysNormalizerWithLeadingUnderscore A FOS\RestBundle\Normalizer\CamelKeysNormalizerWithLeadingUnderscore instance
     */
    protected function getFosRest_Normalizer_CamelKeysWithLeadingUnderscoreService()
    {
        return $this->services['fos_rest.normalizer.camel_keys_with_leading_underscore'] = new \FOS\RestBundle\Normalizer\CamelKeysNormalizerWithLeadingUnderscore();
    }

    /**
     * Gets the 'fos_rest.request.param_fetcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Request\ParamFetcher A FOS\RestBundle\Request\ParamFetcher instance
     */
    protected function getFosRest_Request_ParamFetcherService()
    {
        return $this->services['fos_rest.request.param_fetcher'] = new \FOS\RestBundle\Request\ParamFetcher($this->get('fos_rest.request.param_fetcher.reader'), $this->get('request_stack', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('fos_rest.violation_formatter'), $this->get('validator', ContainerInterface::NULL_ON_INVALID_REFERENCE), false);
    }

    /**
     * Gets the 'fos_rest.request.param_fetcher.reader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Request\ParamReader A FOS\RestBundle\Request\ParamReader instance
     */
    protected function getFosRest_Request_ParamFetcher_ReaderService()
    {
        return $this->services['fos_rest.request.param_fetcher.reader'] = new \FOS\RestBundle\Request\ParamReader($this->get('annotation_reader'));
    }

    /**
     * Gets the 'fos_rest.routing.loader.controller' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Routing\Loader\RestRouteLoader A FOS\RestBundle\Routing\Loader\RestRouteLoader instance
     */
    protected function getFosRest_Routing_Loader_ControllerService()
    {
        return $this->services['fos_rest.routing.loader.controller'] = new \FOS\RestBundle\Routing\Loader\RestRouteLoader($this, $this->get('file_locator'), ${($_ = isset($this->services['controller_name_converter']) ? $this->services['controller_name_converter'] : $this->getControllerNameConverterService()) && false ?: '_'}, $this->get('fos_rest.routing.loader.reader.controller'), NULL);
    }

    /**
     * Gets the 'fos_rest.routing.loader.processor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Routing\Loader\RestRouteProcessor A FOS\RestBundle\Routing\Loader\RestRouteProcessor instance
     */
    protected function getFosRest_Routing_Loader_ProcessorService()
    {
        return $this->services['fos_rest.routing.loader.processor'] = new \FOS\RestBundle\Routing\Loader\RestRouteProcessor();
    }

    /**
     * Gets the 'fos_rest.routing.loader.reader.action' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Routing\Loader\Reader\RestActionReader A FOS\RestBundle\Routing\Loader\Reader\RestActionReader instance
     */
    protected function getFosRest_Routing_Loader_Reader_ActionService()
    {
        return $this->services['fos_rest.routing.loader.reader.action'] = new \FOS\RestBundle\Routing\Loader\Reader\RestActionReader($this->get('annotation_reader'), $this->get('fos_rest.request.param_fetcher.reader'), $this->get('fos_rest.inflector.doctrine'), true, array('json' => false, 'xml' => false, 'html' => true));
    }

    /**
     * Gets the 'fos_rest.routing.loader.reader.controller' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Routing\Loader\Reader\RestControllerReader A FOS\RestBundle\Routing\Loader\Reader\RestControllerReader instance
     */
    protected function getFosRest_Routing_Loader_Reader_ControllerService()
    {
        return $this->services['fos_rest.routing.loader.reader.controller'] = new \FOS\RestBundle\Routing\Loader\Reader\RestControllerReader($this->get('fos_rest.routing.loader.reader.action'), $this->get('annotation_reader'));
    }

    /**
     * Gets the 'fos_rest.routing.loader.xml_collection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Routing\Loader\RestXmlCollectionLoader A FOS\RestBundle\Routing\Loader\RestXmlCollectionLoader instance
     */
    protected function getFosRest_Routing_Loader_XmlCollectionService()
    {
        return $this->services['fos_rest.routing.loader.xml_collection'] = new \FOS\RestBundle\Routing\Loader\RestXmlCollectionLoader($this->get('file_locator'), $this->get('fos_rest.routing.loader.processor'), true, array('json' => false, 'xml' => false, 'html' => true), NULL);
    }

    /**
     * Gets the 'fos_rest.routing.loader.yaml_collection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Routing\Loader\RestYamlCollectionLoader A FOS\RestBundle\Routing\Loader\RestYamlCollectionLoader instance
     */
    protected function getFosRest_Routing_Loader_YamlCollectionService()
    {
        return $this->services['fos_rest.routing.loader.yaml_collection'] = new \FOS\RestBundle\Routing\Loader\RestYamlCollectionLoader($this->get('file_locator'), $this->get('fos_rest.routing.loader.processor'), true, array('json' => false, 'xml' => false, 'html' => true), NULL);
    }

    /**
     * Gets the 'fos_rest.serializer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \FOS\RestBundle\Serializer\JMSSerializerAdapter A FOS\RestBundle\Serializer\JMSSerializerAdapter instance
     */
    public function getFosRest_SerializerService($lazyLoad = true)
    {
        if ($lazyLoad) {

            return $this->services['fos_rest.serializer'] = FOSRestBundleSerializerJMSSerializerAdapter_000000004b51165c000000000f6225f6877f40b66baaf9ca0d0afe40b8a3d26d::staticProxyConstructor(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) {
                    $wrappedInstance = $this->getFosRest_SerializerService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \FOS\RestBundle\Serializer\JMSSerializerAdapter($this->get('jms_serializer'));
    }

    /**
     * Gets the 'fos_rest.serializer.exception_wrapper_normalizer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Serializer\ExceptionWrapperNormalizer A FOS\RestBundle\Serializer\ExceptionWrapperNormalizer instance
     */
    protected function getFosRest_Serializer_ExceptionWrapperNormalizerService()
    {
        return $this->services['fos_rest.serializer.exception_wrapper_normalizer'] = new \FOS\RestBundle\Serializer\ExceptionWrapperNormalizer($this->get('translator'));
    }

    /**
     * Gets the 'fos_rest.serializer.exception_wrapper_serialize_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Serializer\ExceptionWrapperSerializeHandler A FOS\RestBundle\Serializer\ExceptionWrapperSerializeHandler instance
     */
    protected function getFosRest_Serializer_ExceptionWrapperSerializeHandlerService()
    {
        return $this->services['fos_rest.serializer.exception_wrapper_serialize_handler'] = new \FOS\RestBundle\Serializer\ExceptionWrapperSerializeHandler();
    }

    /**
     * Gets the 'fos_rest.view.exception_wrapper_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\View\ExceptionWrapperHandler A FOS\RestBundle\View\ExceptionWrapperHandler instance
     */
    protected function getFosRest_View_ExceptionWrapperHandlerService()
    {
        return $this->services['fos_rest.view.exception_wrapper_handler'] = new \FOS\RestBundle\View\ExceptionWrapperHandler();
    }

    /**
     * Gets the 'fos_rest.view_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\View\ViewHandler A FOS\RestBundle\View\ViewHandler instance
     */
    protected function getFosRest_ViewHandlerService()
    {
        $this->services['fos_rest.view_handler'] = $instance = new \FOS\RestBundle\View\ViewHandler(array('json' => false, 'xml' => false, 'html' => true), 400, 204, false, array('html' => 302), 'twig');

        $instance->setExclusionStrategyGroups(array());
        $instance->setExclusionStrategyVersion('');
        $instance->setSerializeNullStrategy(false);
        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'fos_rest.violation_formatter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Util\ViolationFormatter A FOS\RestBundle\Util\ViolationFormatter instance
     */
    protected function getFosRest_ViolationFormatterService()
    {
        return $this->services['fos_rest.violation_formatter'] = new \FOS\RestBundle\Util\ViolationFormatter(false);
    }

    /**
     * Gets the 'fragment.handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\DependencyInjection\LazyLoadingFragmentHandler A Symfony\Component\HttpKernel\DependencyInjection\LazyLoadingFragmentHandler instance
     */
    protected function getFragment_HandlerService()
    {
        $this->services['fragment.handler'] = $instance = new \Symfony\Component\HttpKernel\DependencyInjection\LazyLoadingFragmentHandler($this, $this->get('request_stack'), true);

        $instance->addRendererService('inline', 'fragment.renderer.inline');
        $instance->addRendererService('hinclude', 'fragment.renderer.hinclude');
        $instance->addRendererService('hinclude', 'fragment.renderer.hinclude');
        $instance->addRendererService('esi', 'fragment.renderer.esi');
        $instance->addRendererService('ssi', 'fragment.renderer.ssi');

        return $instance;
    }

    /**
     * Gets the 'fragment.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\FragmentListener A Symfony\Component\HttpKernel\EventListener\FragmentListener instance
     */
    protected function getFragment_ListenerService()
    {
        return $this->services['fragment.listener'] = new \Symfony\Component\HttpKernel\EventListener\FragmentListener($this->get('uri_signer'), '/_fragment');
    }

    /**
     * Gets the 'fragment.renderer.esi' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Fragment\EsiFragmentRenderer A Symfony\Component\HttpKernel\Fragment\EsiFragmentRenderer instance
     */
    protected function getFragment_Renderer_EsiService()
    {
        $this->services['fragment.renderer.esi'] = $instance = new \Symfony\Component\HttpKernel\Fragment\EsiFragmentRenderer(NULL, $this->get('fragment.renderer.inline'), $this->get('uri_signer'));

        $instance->setFragmentPath('/_fragment');

        return $instance;
    }

    /**
     * Gets the 'fragment.renderer.hinclude' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Fragment\HIncludeFragmentRenderer A Symfony\Component\HttpKernel\Fragment\HIncludeFragmentRenderer instance
     */
    protected function getFragment_Renderer_HincludeService()
    {
        $this->services['fragment.renderer.hinclude'] = $instance = new \Symfony\Component\HttpKernel\Fragment\HIncludeFragmentRenderer($this->get('twig'), $this->get('uri_signer'), NULL);

        $instance->setFragmentPath('/_fragment');

        return $instance;
    }

    /**
     * Gets the 'fragment.renderer.inline' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer A Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer instance
     */
    protected function getFragment_Renderer_InlineService()
    {
        $this->services['fragment.renderer.inline'] = $instance = new \Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer($this->get('http_kernel'), $this->get('debug.event_dispatcher'));

        $instance->setFragmentPath('/_fragment');

        return $instance;
    }

    /**
     * Gets the 'fragment.renderer.ssi' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Fragment\SsiFragmentRenderer A Symfony\Component\HttpKernel\Fragment\SsiFragmentRenderer instance
     */
    protected function getFragment_Renderer_SsiService()
    {
        $this->services['fragment.renderer.ssi'] = $instance = new \Symfony\Component\HttpKernel\Fragment\SsiFragmentRenderer(NULL, $this->get('fragment.renderer.inline'), $this->get('uri_signer'));

        $instance->setFragmentPath('/_fragment');

        return $instance;
    }

    /**
     * Gets the 'hateoas.configuration.provider.resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Hateoas\Configuration\Provider\Resolver\ChainResolver A Hateoas\Configuration\Provider\Resolver\ChainResolver instance
     */
    protected function getHateoas_Configuration_Provider_ResolverService()
    {
        return $this->services['hateoas.configuration.provider.resolver'] = new \Hateoas\Configuration\Provider\Resolver\ChainResolver(array(0 => new \Hateoas\Configuration\Provider\Resolver\MethodResolver(), 1 => new \Hateoas\Configuration\Provider\Resolver\StaticMethodResolver(), 2 => new \Hateoas\Configuration\Provider\Resolver\SymfonyContainerResolver($this)));
    }

    /**
     * Gets the 'hateoas.event_subscriber.json' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Hateoas\Serializer\EventSubscriber\JsonEventSubscriber A Hateoas\Serializer\EventSubscriber\JsonEventSubscriber instance
     */
    protected function getHateoas_EventSubscriber_JsonService()
    {
        $a = ${($_ = isset($this->services['jms_serializer.metadata_factory']) ? $this->services['jms_serializer.metadata_factory'] : $this->getJmsSerializer_MetadataFactoryService()) && false ?: '_'};

        return $this->services['hateoas.event_subscriber.json'] = new \Hateoas\Serializer\EventSubscriber\JsonEventSubscriber(new \Hateoas\Serializer\JsonHalSerializer(), ${($_ = isset($this->services['hateoas.links_factory']) ? $this->services['hateoas.links_factory'] : $this->getHateoas_LinksFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['hateoas.embeds_factory']) ? $this->services['hateoas.embeds_factory'] : $this->getHateoas_EmbedsFactoryService()) && false ?: '_'}, new \Hateoas\Serializer\Metadata\InlineDeferrer($a), new \Hateoas\Serializer\Metadata\InlineDeferrer($a));
    }

    /**
     * Gets the 'hateoas.event_subscriber.xml' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Hateoas\Serializer\EventSubscriber\XmlEventSubscriber A Hateoas\Serializer\EventSubscriber\XmlEventSubscriber instance
     */
    protected function getHateoas_EventSubscriber_XmlService()
    {
        $a = new \Hateoas\Serializer\XmlSerializer();
        $a->setMetadataFactory(${($_ = isset($this->services['jms_serializer.metadata_factory']) ? $this->services['jms_serializer.metadata_factory'] : $this->getJmsSerializer_MetadataFactoryService()) && false ?: '_'});

        return $this->services['hateoas.event_subscriber.xml'] = new \Hateoas\Serializer\EventSubscriber\XmlEventSubscriber($a, ${($_ = isset($this->services['hateoas.links_factory']) ? $this->services['hateoas.links_factory'] : $this->getHateoas_LinksFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['hateoas.embeds_factory']) ? $this->services['hateoas.embeds_factory'] : $this->getHateoas_EmbedsFactoryService()) && false ?: '_'});
    }

    /**
     * Gets the 'hateoas.expression.evaluator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Bazinga\Bundle\HateoasBundle\Hateoas\Expression\LazyFunctionExpressionEvaluator A Bazinga\Bundle\HateoasBundle\Hateoas\Expression\LazyFunctionExpressionEvaluator instance
     */
    protected function getHateoas_Expression_EvaluatorService()
    {
        $this->services['hateoas.expression.evaluator'] = $instance = new \Bazinga\Bundle\HateoasBundle\Hateoas\Expression\LazyFunctionExpressionEvaluator($this->get('bazinga_hateoas.expression_language'), array(), $this);

        $instance->setContextVariable('container', $this);
        $instance->registerFunctionId('hateoas.expression.link');

        return $instance;
    }

    /**
     * Gets the 'hateoas.expression.link' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Hateoas\Expression\LinkExpressionFunction A Hateoas\Expression\LinkExpressionFunction instance
     */
    protected function getHateoas_Expression_LinkService()
    {
        return $this->services['hateoas.expression.link'] = new \Hateoas\Expression\LinkExpressionFunction($this->get('hateoas.helper.link'));
    }

    /**
     * Gets the 'hateoas.generator.registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Hateoas\UrlGenerator\UrlGeneratorRegistry A Hateoas\UrlGenerator\UrlGeneratorRegistry instance
     */
    protected function getHateoas_Generator_RegistryService()
    {
        return $this->services['hateoas.generator.registry'] = new \Hateoas\UrlGenerator\UrlGeneratorRegistry($this->get('hateoas.generator.symfony'));
    }

    /**
     * Gets the 'hateoas.generator.symfony' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Hateoas\UrlGenerator\SymfonyUrlGenerator A Hateoas\UrlGenerator\SymfonyUrlGenerator instance
     */
    protected function getHateoas_Generator_SymfonyService()
    {
        return $this->services['hateoas.generator.symfony'] = new \Hateoas\UrlGenerator\SymfonyUrlGenerator($this->get('cmf_routing.router'));
    }

    /**
     * Gets the 'hateoas.helper.link' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Hateoas\Helper\LinkHelper A Hateoas\Helper\LinkHelper instance
     */
    protected function getHateoas_Helper_LinkService()
    {
        return $this->services['hateoas.helper.link'] = new \Hateoas\Helper\LinkHelper(${($_ = isset($this->services['hateoas.link_factory']) ? $this->services['hateoas.link_factory'] : $this->getHateoas_LinkFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['hateoas.configuration.relations_repository']) ? $this->services['hateoas.configuration.relations_repository'] : $this->getHateoas_Configuration_RelationsRepositoryService()) && false ?: '_'});
    }

    /**
     * Gets the 'hateoas.serializer.exclusion_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Hateoas\Serializer\ExclusionManager A Hateoas\Serializer\ExclusionManager instance
     */
    protected function getHateoas_Serializer_ExclusionManagerService()
    {
        return $this->services['hateoas.serializer.exclusion_manager'] = new \Hateoas\Serializer\ExclusionManager($this->get('hateoas.expression.evaluator'));
    }

    /**
     * Gets the 'hateoas.twig.link' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Hateoas\Twig\Extension\LinkExtension A Hateoas\Twig\Extension\LinkExtension instance
     */
    protected function getHateoas_Twig_LinkService()
    {
        return $this->services['hateoas.twig.link'] = new \Hateoas\Twig\Extension\LinkExtension($this->get('hateoas.helper.link'));
    }

    /**
     * Gets the 'http_kernel' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\HttpKernel A Symfony\Component\HttpKernel\HttpKernel instance
     */
    protected function getHttpKernelService()
    {
        return $this->services['http_kernel'] = new \Symfony\Component\HttpKernel\HttpKernel($this->get('debug.event_dispatcher'), $this->get('debug.controller_resolver'), $this->get('request_stack'), $this->get('debug.argument_resolver'));
    }

    /**
     * Gets the 'infinite_form.attachment.form_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Infinite\FormBundle\Form\Type\AttachmentType A Infinite\FormBundle\Form\Type\AttachmentType instance
     */
    protected function getInfiniteForm_Attachment_FormTypeService()
    {
        return $this->services['infinite_form.attachment.form_type'] = new \Infinite\FormBundle\Form\Type\AttachmentType('ThisTokenIsNotSoSecretChangeIt', $this->get('doctrine')->getManager(''), $this->get('infinite_form.attachment.path_helper'), $this->get('infinite_form.attachment.uploader'));
    }

    /**
     * Gets the 'infinite_form.attachment.path_helper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Infinite\FormBundle\Attachment\PathHelper A Infinite\FormBundle\Attachment\PathHelper instance
     */
    protected function getInfiniteForm_Attachment_PathHelperService()
    {
        return $this->services['infinite_form.attachment.path_helper'] = new \Infinite\FormBundle\Attachment\PathHelper($this->get('infinite_form.attachment.sanitiser'), array());
    }

    /**
     * Gets the 'infinite_form.attachment.sanitiser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Infinite\FormBundle\Attachment\Sanitiser A Infinite\FormBundle\Attachment\Sanitiser instance
     */
    protected function getInfiniteForm_Attachment_SanitiserService()
    {
        return $this->services['infinite_form.attachment.sanitiser'] = new \Infinite\FormBundle\Attachment\Sanitiser();
    }

    /**
     * Gets the 'infinite_form.attachment.streamer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Infinite\FormBundle\Attachment\Streamer A Infinite\FormBundle\Attachment\Streamer instance
     */
    protected function getInfiniteForm_Attachment_StreamerService()
    {
        return $this->services['infinite_form.attachment.streamer'] = new \Infinite\FormBundle\Attachment\Streamer($this->get('infinite_form.attachment.sanitiser'), $this->get('infinite_form.attachment.path_helper'));
    }

    /**
     * Gets the 'infinite_form.attachment.uploader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Infinite\FormBundle\Attachment\Uploader A Infinite\FormBundle\Attachment\Uploader instance
     */
    protected function getInfiniteForm_Attachment_UploaderService()
    {
        return $this->services['infinite_form.attachment.uploader'] = new \Infinite\FormBundle\Attachment\Uploader($this->get('infinite_form.attachment.sanitiser'), $this->get('infinite_form.attachment.path_helper'));
    }

    /**
     * Gets the 'infinite_form.entity_search.transformer_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Infinite\FormBundle\Form\DataTransformer\EntitySearchTransformerFactory A Infinite\FormBundle\Form\DataTransformer\EntitySearchTransformerFactory instance
     */
    protected function getInfiniteForm_EntitySearch_TransformerFactoryService()
    {
        return $this->services['infinite_form.entity_search.transformer_factory'] = new \Infinite\FormBundle\Form\DataTransformer\EntitySearchTransformerFactory($this->get('doctrine'));
    }

    /**
     * Gets the 'infinite_form.entity_search.type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Infinite\FormBundle\Form\Type\EntitySearchType A Infinite\FormBundle\Form\Type\EntitySearchType instance
     */
    protected function getInfiniteForm_EntitySearch_TypeService()
    {
        return $this->services['infinite_form.entity_search.type'] = new \Infinite\FormBundle\Form\Type\EntitySearchType($this->get('infinite_form.entity_search.transformer_factory'));
    }

    /**
     * Gets the 'infinite_form.form_type.checkbox_grid_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Infinite\FormBundle\Form\Type\CheckboxGridType A Infinite\FormBundle\Form\Type\CheckboxGridType instance
     */
    protected function getInfiniteForm_FormType_CheckboxGridTypeService()
    {
        return $this->services['infinite_form.form_type.checkbox_grid_type'] = new \Infinite\FormBundle\Form\Type\CheckboxGridType();
    }

    /**
     * Gets the 'infinite_form.form_type.checkbox_row_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Infinite\FormBundle\Form\Type\CheckboxRowType A Infinite\FormBundle\Form\Type\CheckboxRowType instance
     */
    protected function getInfiniteForm_FormType_CheckboxRowTypeService()
    {
        return $this->services['infinite_form.form_type.checkbox_row_type'] = new \Infinite\FormBundle\Form\Type\CheckboxRowType();
    }

    /**
     * Gets the 'infinite_form.form_type.entity_checkbox_grid_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Infinite\FormBundle\Form\Type\EntityCheckboxGridType A Infinite\FormBundle\Form\Type\EntityCheckboxGridType instance
     */
    protected function getInfiniteForm_FormType_EntityCheckboxGridTypeService()
    {
        return $this->services['infinite_form.form_type.entity_checkbox_grid_type'] = new \Infinite\FormBundle\Form\Type\EntityCheckboxGridType($this->get('doctrine'));
    }

    /**
     * Gets the 'infinite_form.polycollection.form_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Infinite\FormBundle\Form\Type\PolyCollectionType A Infinite\FormBundle\Form\Type\PolyCollectionType instance
     */
    protected function getInfiniteForm_Polycollection_FormTypeService()
    {
        return $this->services['infinite_form.polycollection.form_type'] = new \Infinite\FormBundle\Form\Type\PolyCollectionType();
    }

    /**
     * Gets the 'infinite_form.twig_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Infinite\FormBundle\Twig\FormExtension A Infinite\FormBundle\Twig\FormExtension instance
     */
    protected function getInfiniteForm_TwigExtensionService()
    {
        return $this->services['infinite_form.twig_extension'] = new \Infinite\FormBundle\Twig\FormExtension();
    }

    /**
     * Gets the 'ivory_ck_editor.config_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Ivory\CKEditorBundle\Model\ConfigManager A Ivory\CKEditorBundle\Model\ConfigManager instance
     */
    protected function getIvoryCkEditor_ConfigManagerService()
    {
        $this->services['ivory_ck_editor.config_manager'] = $instance = new \Ivory\CKEditorBundle\Model\ConfigManager();

        $instance->setConfig('minimal', array('language' => 'fr_FR', 'toolbar' => array(0 => array(0 => 'Bold', 1 => 'Italic'), 1 => array(0 => 'NumberedList', 1 => 'BulletedList', 2 => '-', 3 => 'Outdent', 4 => 'Indent'), 2 => array(0 => 'Link', 1 => 'Unlink'), 3 => array(0 => 'About'))));
        $instance->setConfig('standard', array('toolbar' => array(0 => array(0 => 'Cut', 1 => 'Copy', 2 => 'Paste', 3 => 'PasteText', 4 => 'PasteFromWord', 5 => '-', 6 => 'Undo', 7 => 'Redo'), 1 => array(0 => 'Scayt'), 2 => array(0 => 'Link', 1 => 'Unlink', 2 => 'Anchor'), 3 => array(0 => 'Image', 1 => 'Table', 2 => 'HorizontalRule', 3 => 'SpecialChar'), 4 => array(0 => 'Maximize'), 5 => array(0 => 'Source'), 6 => '/', 7 => array(0 => 'Bold', 1 => 'Italic', 2 => 'Strike', 3 => '-', 4 => 'RemoveFormat'), 8 => array(0 => 'NumberedList', 1 => 'BulletedList', 2 => '-', 3 => 'Outdent', 4 => 'Indent', 5 => '-', 6 => 'Blockquote'), 9 => array(0 => 'Styles', 1 => 'Format', 2 => 'About'))));
        $instance->setConfig('forum', array('protectedSource' => array(0 => '/<span[^>]*><\\/span>/g'), 'extraPlugins' => 'templates,div', 'templates' => 'my_templates', 'language' => 'fr_FR', 'stylesSet' => 'custom_styles', 'contentsCss' => array(0 => 'assets/stylesheets/base.css'), 'toolbar' => array(0 => array(0 => 'Templates'), 1 => array(0 => 'Bold', 1 => 'Italic', 2 => 'Underline', 3 => 'Blockquote'), 2 => array(0 => 'NumberedList', 1 => 'BulletedList'), 3 => array(0 => 'Link', 1 => 'Unlink'), 4 => array(0 => 'Image'), 5 => array(0 => 'Styles', 1 => 'Format'), 6 => ';')));
        $instance->setDefaultConfig('minimal');

        return $instance;
    }

    /**
     * Gets the 'ivory_ck_editor.form.type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Ivory\CKEditorBundle\Form\Type\CKEditorType A Ivory\CKEditorBundle\Form\Type\CKEditorType instance
     */
    protected function getIvoryCkEditor_Form_TypeService()
    {
        return $this->services['ivory_ck_editor.form.type'] = new \Ivory\CKEditorBundle\Form\Type\CKEditorType($this->get('ivory_ck_editor.config_manager'), $this->get('ivory_ck_editor.plugin_manager'), $this->get('ivory_ck_editor.styles_set_manager'), $this->get('ivory_ck_editor.template_manager'));
    }

    /**
     * Gets the 'ivory_ck_editor.plugin_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Ivory\CKEditorBundle\Model\PluginManager A Ivory\CKEditorBundle\Model\PluginManager instance
     */
    protected function getIvoryCkEditor_PluginManagerService()
    {
        return $this->services['ivory_ck_editor.plugin_manager'] = new \Ivory\CKEditorBundle\Model\PluginManager();
    }

    /**
     * Gets the 'ivory_ck_editor.renderer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Ivory\CKEditorBundle\Renderer\CKEditorRenderer A Ivory\CKEditorBundle\Renderer\CKEditorRenderer instance
     */
    protected function getIvoryCkEditor_RendererService()
    {
        return $this->services['ivory_ck_editor.renderer'] = new \Ivory\CKEditorBundle\Renderer\CKEditorRenderer($this);
    }

    /**
     * Gets the 'ivory_ck_editor.styles_set_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Ivory\CKEditorBundle\Model\StylesSetManager A Ivory\CKEditorBundle\Model\StylesSetManager instance
     */
    protected function getIvoryCkEditor_StylesSetManagerService()
    {
        $this->services['ivory_ck_editor.styles_set_manager'] = $instance = new \Ivory\CKEditorBundle\Model\StylesSetManager();

        $instance->setStylesSet('custom_styles', array(0 => array('name' => 'Alerte Success', 'element' => 'div', 'attributes' => array('class' => 'alert alert-success', 'role' => 'alert')), 1 => array('name' => 'Alerte Info', 'element' => 'div', 'attributes' => array('class' => 'alert alert-info', 'role' => 'alert')), 2 => array('name' => 'Alerte Warning', 'element' => 'div', 'attributes' => array('class' => 'alert alert-warning', 'role' => 'alert')), 3 => array('name' => 'Alerte Danger', 'element' => 'div', 'attributes' => array('class' => 'alert alert-danger', 'role' => 'alert')), 4 => array('name' => 'Badge', 'element' => 'span', 'attributes' => array('class' => 'badge'))));

        return $instance;
    }

    /**
     * Gets the 'ivory_ck_editor.template_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Ivory\CKEditorBundle\Model\TemplateManager A Ivory\CKEditorBundle\Model\TemplateManager instance
     */
    protected function getIvoryCkEditor_TemplateManagerService()
    {
        $this->services['ivory_ck_editor.template_manager'] = $instance = new \Ivory\CKEditorBundle\Model\TemplateManager();

        $instance->setTemplate('my_templates', array('imagesPath' => '/assets/ckeditor/templates/images/', 'templates' => array(0 => array('title' => 'Image à gauche et texte', 'image' => 'template1.gif', 'description' => 'Une image principale, un titre et un texte entourant l\'image.', 'html' => '<div class="col-sm-5 col-md-5 pull-left no-padding-left"><div class="text-center"><div class="img-box-4-item"><img src="https://placeholdit.imgix.net/~text?txtsize=33&txt=350x150&w=350&h=150" alt="" class="img-responsive" /><div class="img-box-4-content"><p>euphrat &amp; tigris version US</p></div></div></div></div><h4><a href="#">Le problème de lisibilité</a></h4><p>Nemo enim ipsam voluptatem quia quia neque porro qui dolorem ipsum quia dolor sit amet consectetur.</p>', 'template_parameters' => array()), 1 => array('title' => 'Image à droite et texte', 'image' => 'template1.gif', 'description' => 'Une image principale, un titre et un texte entourant l\'image.', 'html' => '<div class="col-sm-5 col-md-5 pull-right no-padding-right"><div class="text-center"><div class="img-box-4-item"><img src="https://placeholdit.imgix.net/~text?txtsize=33&txt=350x150&w=350&h=150" alt="" class="img-responsive" /><div class="img-box-4-content"><p>euphrat &amp; tigris version US</p></div></div></div></div><h4><a href="#">Le problème de lisibilité</a></h4><p>Nemo enim ipsam voluptatem quia quia neque porro qui dolorem ipsum quia dolor sit amet consectetur.</p>', 'template_parameters' => array()), 2 => array('title' => 'Introduction', 'image' => 'template1.gif', 'description' => 'My awesome template', 'html' => '<div class="quote-one"><div class="row"><div class="quote-one-item"><span class="color">“</span><div class="quote-one-right"><p>Nemo enim ipsam voluptatem quia quia neque porro qui dolorem ipsum quia dolor sit amet consectetur.</p></div></div></div></div>', 'template_parameters' => array()))));

        return $instance;
    }

    /**
     * Gets the 'ivory_ck_editor.twig_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Ivory\CKEditorBundle\Twig\CKEditorExtension A Ivory\CKEditorBundle\Twig\CKEditorExtension instance
     */
    protected function getIvoryCkEditor_TwigExtensionService()
    {
        return $this->services['ivory_ck_editor.twig_extension'] = new \Ivory\CKEditorBundle\Twig\CKEditorExtension($this->get('ivory_ck_editor.renderer'));
    }

    /**
     * Gets the 'jms_serializer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Serializer A JMS\Serializer\Serializer instance
     */
    protected function getJmsSerializerService()
    {
        $a = new \JMS\Serializer\EventDispatcher\LazyEventDispatcher($this);
        $a->setListeners(array('serializer.pre_serialize' => array(0 => array(0 => array(0 => 'jms_serializer.stopwatch_subscriber', 1 => 'onPreSerialize'), 1 => NULL, 2 => NULL), 1 => array(0 => array(0 => 'jms_serializer.doctrine_proxy_subscriber', 1 => 'onPreSerialize'), 1 => NULL, 2 => NULL)), 'serializer.post_serialize' => array(0 => array(0 => array(0 => 'hateoas.event_subscriber.xml', 1 => 'onPostSerialize'), 1 => NULL, 2 => 'xml'), 1 => array(0 => array(0 => 'hateoas.event_subscriber.json', 1 => 'onPostSerialize'), 1 => NULL, 2 => 'json'), 2 => array(0 => array(0 => 'jms_serializer.stopwatch_subscriber', 1 => 'onPostSerialize'), 1 => NULL, 2 => NULL))));

        $this->services['jms_serializer'] = $instance = new \JMS\Serializer\Serializer(${($_ = isset($this->services['jms_serializer.metadata_factory']) ? $this->services['jms_serializer.metadata_factory'] : $this->getJmsSerializer_MetadataFactoryService()) && false ?: '_'}, $this->get('jms_serializer.handler_registry'), ${($_ = isset($this->services['jms_serializer.unserialize_object_constructor']) ? $this->services['jms_serializer.unserialize_object_constructor'] : $this->getJmsSerializer_UnserializeObjectConstructorService()) && false ?: '_'}, new \JMS\DiExtraBundle\DependencyInjection\Collection\LazyServiceMap($this, array('json' => 'jms_serializer.json_serialization_visitor', 'xml' => 'jms_serializer.xml_serialization_visitor', 'yml' => 'jms_serializer.yaml_serialization_visitor')), new \JMS\DiExtraBundle\DependencyInjection\Collection\LazyServiceMap($this, array('json' => 'jms_serializer.json_deserialization_visitor', 'xml' => 'jms_serializer.xml_deserialization_visitor')), $a, NULL, $this->get('jms_serializer.expression_evaluator'));

        $instance->setSerializationContextFactory($this->get('jms_serializer.serialization_context_factory'));
        $instance->setDeserializationContextFactory($this->get('jms_serializer.deserialization_context_factory'));

        return $instance;
    }

    /**
     * Gets the 'jms_serializer.accessor_strategy' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Accessor\ExpressionAccessorStrategy A JMS\Serializer\Accessor\ExpressionAccessorStrategy instance
     */
    protected function getJmsSerializer_AccessorStrategyService()
    {
        return $this->services['jms_serializer.accessor_strategy'] = new \JMS\Serializer\Accessor\ExpressionAccessorStrategy($this->get('jms_serializer.expression_evaluator'), new \JMS\Serializer\Accessor\DefaultAccessorStrategy());
    }

    /**
     * Gets the 'jms_serializer.array_collection_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Handler\ArrayCollectionHandler A JMS\Serializer\Handler\ArrayCollectionHandler instance
     */
    protected function getJmsSerializer_ArrayCollectionHandlerService()
    {
        return $this->services['jms_serializer.array_collection_handler'] = new \JMS\Serializer\Handler\ArrayCollectionHandler();
    }

    /**
     * Gets the 'jms_serializer.constraint_violation_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Handler\ConstraintViolationHandler A JMS\Serializer\Handler\ConstraintViolationHandler instance
     */
    protected function getJmsSerializer_ConstraintViolationHandlerService()
    {
        return $this->services['jms_serializer.constraint_violation_handler'] = new \JMS\Serializer\Handler\ConstraintViolationHandler();
    }

    /**
     * Gets the 'jms_serializer.datetime_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Handler\DateHandler A JMS\Serializer\Handler\DateHandler instance
     */
    protected function getJmsSerializer_DatetimeHandlerService()
    {
        return $this->services['jms_serializer.datetime_handler'] = new \JMS\Serializer\Handler\DateHandler('Y-m-d\\TH:i:sO', 'UTC', true);
    }

    /**
     * Gets the 'jms_serializer.deserialization_context_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\SerializerBundle\ContextFactory\ConfiguredContextFactory A JMS\SerializerBundle\ContextFactory\ConfiguredContextFactory instance
     */
    protected function getJmsSerializer_DeserializationContextFactoryService()
    {
        return $this->services['jms_serializer.deserialization_context_factory'] = new \JMS\SerializerBundle\ContextFactory\ConfiguredContextFactory();
    }

    /**
     * Gets the 'jms_serializer.doctrine_proxy_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\EventDispatcher\Subscriber\DoctrineProxySubscriber A JMS\Serializer\EventDispatcher\Subscriber\DoctrineProxySubscriber instance
     */
    protected function getJmsSerializer_DoctrineProxySubscriberService()
    {
        return $this->services['jms_serializer.doctrine_proxy_subscriber'] = new \JMS\Serializer\EventDispatcher\Subscriber\DoctrineProxySubscriber();
    }

    /**
     * Gets the 'jms_serializer.expression_evaluator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Expression\ExpressionEvaluator A JMS\Serializer\Expression\ExpressionEvaluator instance
     */
    protected function getJmsSerializer_ExpressionEvaluatorService()
    {
        $a = new \Symfony\Component\ExpressionLanguage\ExpressionLanguage();
        $a->registerProvider(new \JMS\SerializerBundle\ExpressionLanguage\BasicSerializerFunctionsProvider());

        return $this->services['jms_serializer.expression_evaluator'] = new \JMS\Serializer\Expression\ExpressionEvaluator($a, array('container' => $this));
    }

    /**
     * Gets the 'jms_serializer.form_error_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Handler\FormErrorHandler A JMS\Serializer\Handler\FormErrorHandler instance
     */
    protected function getJmsSerializer_FormErrorHandlerService()
    {
        return $this->services['jms_serializer.form_error_handler'] = new \JMS\Serializer\Handler\FormErrorHandler($this->get('translator'));
    }

    /**
     * Gets the 'jms_serializer.handler_registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Handler\LazyHandlerRegistry A JMS\Serializer\Handler\LazyHandlerRegistry instance
     */
    protected function getJmsSerializer_HandlerRegistryService()
    {
        return $this->services['jms_serializer.handler_registry'] = new \JMS\Serializer\Handler\LazyHandlerRegistry($this, array(2 => array('LiipSerializer' => array('json' => array(0 => 'app.serializer.liip_serializer_handler', 1 => 'deserializeLiipSerializerFromjson')), 'DateTime' => array('json' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeFromjson'), 'xml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeFromxml'), 'yml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeFromyml')), 'DateTimeImmutable' => array('json' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeImmutableFromjson'), 'xml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeImmutableFromxml'), 'yml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeImmutableFromyml')), 'DateInterval' => array('json' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateIntervalFromjson'), 'xml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateIntervalFromxml'), 'yml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateIntervalFromyml')), 'ArrayCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection')), 'Doctrine\\Common\\Collections\\ArrayCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection')), 'Doctrine\\ORM\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection')), 'Doctrine\\ODM\\MongoDB\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection')), 'Doctrine\\ODM\\PHPCR\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection')), 'PhpCollection\\Sequence' => array('json' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeSequence'), 'xml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeSequence'), 'yml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeSequence')), 'PhpCollection\\Map' => array('json' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeMap'), 'xml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeMap'), 'yml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeMap'))), 1 => array('LiipSerializer' => array('json' => array(0 => 'app.serializer.liip_serializer_handler', 1 => 'serializeLiipSerializerTojson')), 'Symfony\\Cmf\\Bundle\\MediaBundle\\Doctrine\\Phpcr\\Image' => array('json' => array(0 => 'cmf_media.serializer.handler', 1 => 'serializeImageToArray')), 'DateTime' => array('json' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTime'), 'xml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTime'), 'yml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTime')), 'DateTimeImmutable' => array('json' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTimeImmutable'), 'xml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTimeImmutable'), 'yml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTimeImmutable')), 'DateInterval' => array('json' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateInterval'), 'xml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateInterval'), 'yml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateInterval')), 'ArrayCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection')), 'Doctrine\\Common\\Collections\\ArrayCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection')), 'Doctrine\\ORM\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection')), 'Doctrine\\ODM\\MongoDB\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection')), 'Doctrine\\ODM\\PHPCR\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection')), 'PhpCollection\\Sequence' => array('json' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeSequence'), 'xml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeSequence'), 'yml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeSequence')), 'PhpCollection\\Map' => array('json' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeMap'), 'xml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeMap'), 'yml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeMap')), 'Symfony\\Component\\Form\\Form' => array('xml' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormToxml'), 'json' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormTojson'), 'yml' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormToyml')), 'Symfony\\Component\\Form\\FormError' => array('xml' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormErrorToxml'), 'json' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormErrorTojson'), 'yml' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormErrorToyml')), 'Symfony\\Component\\Validator\\ConstraintViolationList' => array('xml' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeListToxml'), 'json' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeListTojson'), 'yml' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeListToyml')), 'Symfony\\Component\\Validator\\ConstraintViolation' => array('xml' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeViolationToxml'), 'json' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeViolationTojson'), 'yml' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeViolationToyml')), 'FOS\\RestBundle\\Util\\ExceptionWrapper' => array('json' => array(0 => 'fos_rest.serializer.exception_wrapper_serialize_handler', 1 => 'serializeToJson'), 'xml' => array(0 => 'fos_rest.serializer.exception_wrapper_serialize_handler', 1 => 'serializeToXml')))));
    }

    /**
     * Gets the 'jms_serializer.json_deserialization_visitor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\JsonDeserializationVisitor A JMS\Serializer\JsonDeserializationVisitor instance
     */
    protected function getJmsSerializer_JsonDeserializationVisitorService()
    {
        return $this->services['jms_serializer.json_deserialization_visitor'] = new \JMS\Serializer\JsonDeserializationVisitor($this->get('jms_serializer.naming_strategy'));
    }

    /**
     * Gets the 'jms_serializer.json_serialization_visitor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\JsonSerializationVisitor A JMS\Serializer\JsonSerializationVisitor instance
     */
    protected function getJmsSerializer_JsonSerializationVisitorService()
    {
        $this->services['jms_serializer.json_serialization_visitor'] = $instance = new \JMS\Serializer\JsonSerializationVisitor($this->get('jms_serializer.naming_strategy'), $this->get('jms_serializer.accessor_strategy'));

        $instance->setOptions(0);

        return $instance;
    }

    /**
     * Gets the 'jms_serializer.metadata_driver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Metadata\Driver\DoctrineTypeDriver A JMS\Serializer\Metadata\Driver\DoctrineTypeDriver instance
     */
    protected function getJmsSerializer_MetadataDriverService()
    {
        $a = ${($_ = isset($this->services['jms_serializer.metadata.file_locator']) ? $this->services['jms_serializer.metadata.file_locator'] : $this->getJmsSerializer_Metadata_FileLocatorService()) && false ?: '_'};

        return $this->services['jms_serializer.metadata_driver'] = new \JMS\Serializer\Metadata\Driver\DoctrineTypeDriver(new \JMS\Serializer\Metadata\Driver\DoctrinePHPCRTypeDriver(new \Metadata\Driver\DriverChain(array(0 => new \JMS\Serializer\Metadata\Driver\YamlDriver($a), 1 => new \JMS\Serializer\Metadata\Driver\XmlDriver($a), 2 => new \JMS\Serializer\Metadata\Driver\PhpDriver($a), 3 => new \JMS\Serializer\Metadata\Driver\AnnotationDriver($this->get('annotation_reader')))), $this->get('doctrine_phpcr')), $this->get('doctrine'));
    }

    /**
     * Gets the 'jms_serializer.naming_strategy' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Naming\CacheNamingStrategy A JMS\Serializer\Naming\CacheNamingStrategy instance
     */
    protected function getJmsSerializer_NamingStrategyService()
    {
        return $this->services['jms_serializer.naming_strategy'] = new \JMS\Serializer\Naming\CacheNamingStrategy(new \JMS\Serializer\Naming\SerializedNameAnnotationStrategy(new \JMS\Serializer\Naming\CamelCaseNamingStrategy('_', true)));
    }

    /**
     * Gets the 'jms_serializer.object_constructor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Construction\DoctrineObjectConstructor A JMS\Serializer\Construction\DoctrineObjectConstructor instance
     */
    protected function getJmsSerializer_ObjectConstructorService()
    {
        return $this->services['jms_serializer.object_constructor'] = new \JMS\Serializer\Construction\DoctrineObjectConstructor($this->get('doctrine'), new \JMS\Serializer\Construction\DoctrineObjectConstructor($this->get('doctrine_phpcr'), ${($_ = isset($this->services['jms_serializer.unserialize_object_constructor']) ? $this->services['jms_serializer.unserialize_object_constructor'] : $this->getJmsSerializer_UnserializeObjectConstructorService()) && false ?: '_'}));
    }

    /**
     * Gets the 'jms_serializer.php_collection_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Handler\PhpCollectionHandler A JMS\Serializer\Handler\PhpCollectionHandler instance
     */
    protected function getJmsSerializer_PhpCollectionHandlerService()
    {
        return $this->services['jms_serializer.php_collection_handler'] = new \JMS\Serializer\Handler\PhpCollectionHandler();
    }

    /**
     * Gets the 'jms_serializer.serialization_context_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\SerializerBundle\ContextFactory\ConfiguredContextFactory A JMS\SerializerBundle\ContextFactory\ConfiguredContextFactory instance
     */
    protected function getJmsSerializer_SerializationContextFactoryService()
    {
        return $this->services['jms_serializer.serialization_context_factory'] = new \JMS\SerializerBundle\ContextFactory\ConfiguredContextFactory();
    }

    /**
     * Gets the 'jms_serializer.stopwatch_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\SerializerBundle\Serializer\StopwatchEventSubscriber A JMS\SerializerBundle\Serializer\StopwatchEventSubscriber instance
     */
    protected function getJmsSerializer_StopwatchSubscriberService()
    {
        return $this->services['jms_serializer.stopwatch_subscriber'] = new \JMS\SerializerBundle\Serializer\StopwatchEventSubscriber($this->get('debug.stopwatch'));
    }

    /**
     * Gets the 'jms_serializer.templating.helper.serializer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\SerializerBundle\Templating\SerializerHelper A JMS\SerializerBundle\Templating\SerializerHelper instance
     */
    protected function getJmsSerializer_Templating_Helper_SerializerService()
    {
        return $this->services['jms_serializer.templating.helper.serializer'] = new \JMS\SerializerBundle\Templating\SerializerHelper($this->get('jms_serializer'));
    }

    /**
     * Gets the 'jms_serializer.xml_deserialization_visitor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\XmlDeserializationVisitor A JMS\Serializer\XmlDeserializationVisitor instance
     */
    protected function getJmsSerializer_XmlDeserializationVisitorService()
    {
        $this->services['jms_serializer.xml_deserialization_visitor'] = $instance = new \JMS\Serializer\XmlDeserializationVisitor($this->get('jms_serializer.naming_strategy'));

        $instance->setDoctypeWhitelist(array());

        return $instance;
    }

    /**
     * Gets the 'jms_serializer.xml_serialization_visitor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\XmlSerializationVisitor A JMS\Serializer\XmlSerializationVisitor instance
     */
    protected function getJmsSerializer_XmlSerializationVisitorService()
    {
        $this->services['jms_serializer.xml_serialization_visitor'] = $instance = new \JMS\Serializer\XmlSerializationVisitor($this->get('jms_serializer.naming_strategy'), $this->get('jms_serializer.accessor_strategy'));

        $instance->setFormatOutput(true);

        return $instance;
    }

    /**
     * Gets the 'jms_serializer.yaml_serialization_visitor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\YamlSerializationVisitor A JMS\Serializer\YamlSerializationVisitor instance
     */
    protected function getJmsSerializer_YamlSerializationVisitorService()
    {
        return $this->services['jms_serializer.yaml_serialization_visitor'] = new \JMS\Serializer\YamlSerializationVisitor($this->get('jms_serializer.naming_strategy'), $this->get('jms_serializer.accessor_strategy'));
    }

    /**
     * Gets the 'jms_translation.config_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\TranslationBundle\Translation\ConfigFactory A JMS\TranslationBundle\Translation\ConfigFactory instance
     */
    protected function getJmsTranslation_ConfigFactoryService()
    {
        return $this->services['jms_translation.config_factory'] = new \JMS\TranslationBundle\Translation\ConfigFactory(array());
    }

    /**
     * Gets the 'jms_translation.file_source_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\TranslationBundle\Translation\FileSourceFactory A JMS\TranslationBundle\Translation\FileSourceFactory instance
     */
    protected function getJmsTranslation_FileSourceFactoryService()
    {
        return $this->services['jms_translation.file_source_factory'] = new \JMS\TranslationBundle\Translation\FileSourceFactory(($this->targetDirs[3].'/app'));
    }

    /**
     * Gets the 'jms_translation.loader_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\TranslationBundle\Translation\LoaderManager A JMS\TranslationBundle\Translation\LoaderManager instance
     */
    protected function getJmsTranslation_LoaderManagerService()
    {
        return $this->services['jms_translation.loader_manager'] = new \JMS\TranslationBundle\Translation\LoaderManager(array('php' => new \JMS\TranslationBundle\Translation\Loader\SymfonyLoaderAdapter($this->get('translation.loader.php')), 'yml' => new \JMS\TranslationBundle\Translation\Loader\SymfonyLoaderAdapter($this->get('translation.loader.yml')), 'xlf' => new \JMS\TranslationBundle\Translation\Loader\SymfonyLoaderAdapter($this->get('translation.loader.xliff')), 'po' => new \JMS\TranslationBundle\Translation\Loader\SymfonyLoaderAdapter($this->get('translation.loader.po')), 'mo' => new \JMS\TranslationBundle\Translation\Loader\SymfonyLoaderAdapter($this->get('translation.loader.mo')), 'ts' => new \JMS\TranslationBundle\Translation\Loader\SymfonyLoaderAdapter($this->get('translation.loader.qt')), 'csv' => new \JMS\TranslationBundle\Translation\Loader\SymfonyLoaderAdapter($this->get('translation.loader.csv')), 'res' => new \JMS\TranslationBundle\Translation\Loader\SymfonyLoaderAdapter($this->get('translation.loader.res')), 'dat' => new \JMS\TranslationBundle\Translation\Loader\SymfonyLoaderAdapter($this->get('translation.loader.dat')), 'ini' => new \JMS\TranslationBundle\Translation\Loader\SymfonyLoaderAdapter($this->get('translation.loader.ini')), 'json' => new \JMS\TranslationBundle\Translation\Loader\SymfonyLoaderAdapter($this->get('translation.loader.json')), 'xliff' => new \JMS\TranslationBundle\Translation\Loader\XliffLoader()));
    }

    /**
     * Gets the 'jms_translation.twig_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\TranslationBundle\Twig\TranslationExtension A JMS\TranslationBundle\Twig\TranslationExtension instance
     */
    protected function getJmsTranslation_TwigExtensionService()
    {
        return $this->services['jms_translation.twig_extension'] = new \JMS\TranslationBundle\Twig\TranslationExtension($this->get('translator'), true);
    }

    /**
     * Gets the 'jms_translation.updater' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\TranslationBundle\Translation\Updater A JMS\TranslationBundle\Translation\Updater instance
     */
    protected function getJmsTranslation_UpdaterService()
    {
        $a = $this->get('logger');
        $b = $this->get('jms_translation.file_source_factory');
        $c = $this->get('twig');

        $d = new \Doctrine\Common\Annotations\DocParser();
        $d->setImports(array('desc' => 'JMS\\TranslationBundle\\Annotation\\Desc', 'meaning' => 'JMS\\TranslationBundle\\Annotation\\Meaning', 'ignore' => 'JMS\\TranslationBundle\\Annotation\\Ignore'));
        $d->setIgnoreNotImportedAnnotations(true);

        $e = new \JMS\TranslationBundle\Translation\Dumper\XliffDumper();
        $e->setSourceLanguage('en');

        $f = new \JMS\TranslationBundle\Translation\Dumper\XliffDumper();
        $f->setSourceLanguage('en');

        return $this->services['jms_translation.updater'] = new \JMS\TranslationBundle\Translation\Updater($this->get('jms_translation.loader_manager'), new \JMS\TranslationBundle\Translation\ExtractorManager(new \JMS\TranslationBundle\Translation\Extractor\FileExtractor($c, $a, array(0 => new \JMS\TranslationBundle\Translation\Extractor\File\DefaultPhpFileExtractor($d, $b), 1 => new \JMS\TranslationBundle\Translation\Extractor\File\FormExtractor($d, $b), 2 => new \JMS\TranslationBundle\Translation\Extractor\File\TranslationContainerExtractor(), 3 => new \JMS\TranslationBundle\Translation\Extractor\File\TwigFileExtractor($c, $b), 4 => new \JMS\TranslationBundle\Translation\Extractor\File\ValidationExtractor($this->get('validator')), 5 => new \JMS\TranslationBundle\Translation\Extractor\File\AuthenticationMessagesExtractor($d, $b))), $a, array()), $a, new \JMS\TranslationBundle\Translation\FileWriter(array('php' => new \JMS\TranslationBundle\Translation\Dumper\PhpDumper(), 'xlf' => $e, 'po' => new \JMS\TranslationBundle\Translation\Dumper\SymfonyDumperAdapter($this->get('translation.dumper.po'), 'po'), 'mo' => new \JMS\TranslationBundle\Translation\Dumper\SymfonyDumperAdapter($this->get('translation.dumper.mo'), 'mo'), 'yml' => new \JMS\TranslationBundle\Translation\Dumper\YamlDumper(), 'ts' => new \JMS\TranslationBundle\Translation\Dumper\SymfonyDumperAdapter($this->get('translation.dumper.qt'), 'ts'), 'csv' => new \JMS\TranslationBundle\Translation\Dumper\SymfonyDumperAdapter($this->get('translation.dumper.csv'), 'csv'), 'ini' => new \JMS\TranslationBundle\Translation\Dumper\SymfonyDumperAdapter($this->get('translation.dumper.ini'), 'ini'), 'json' => new \JMS\TranslationBundle\Translation\Dumper\SymfonyDumperAdapter($this->get('translation.dumper.json'), 'json'), 'res' => new \JMS\TranslationBundle\Translation\Dumper\SymfonyDumperAdapter($this->get('translation.dumper.res'), 'res'), 'xliff' => $f)));
    }

    /**
     * Gets the 'kernel' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @throws RuntimeException always since this service is expected to be injected dynamically
     */
    protected function getKernelService()
    {
        throw new RuntimeException('You have requested a synthetic service ("kernel"). The DIC does not know how to construct this service.');
    }

    /**
     * Gets the 'kernel.class_cache.cache_warmer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\CacheWarmer\ClassCacheCacheWarmer A Symfony\Bundle\FrameworkBundle\CacheWarmer\ClassCacheCacheWarmer instance
     */
    protected function getKernel_ClassCache_CacheWarmerService()
    {
        return $this->services['kernel.class_cache.cache_warmer'] = new \Symfony\Bundle\FrameworkBundle\CacheWarmer\ClassCacheCacheWarmer(array(0 => 'Symfony\\Component\\HttpFoundation\\ParameterBag', 1 => 'Symfony\\Component\\HttpFoundation\\HeaderBag', 2 => 'Symfony\\Component\\HttpFoundation\\FileBag', 3 => 'Symfony\\Component\\HttpFoundation\\ServerBag', 4 => 'Symfony\\Component\\HttpFoundation\\Request', 5 => 'Symfony\\Component\\HttpKernel\\Kernel', 6 => 'Symfony\\Component\\ClassLoader\\ClassCollectionLoader', 7 => 'Symfony\\Component\\ClassLoader\\ApcClassLoader'));
    }

    /**
     * Gets the 'knp_menu.factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Knp\Menu\MenuFactory A Knp\Menu\MenuFactory instance
     */
    protected function getKnpMenu_FactoryService()
    {
        $this->services['knp_menu.factory'] = $instance = new \Knp\Menu\MenuFactory();

        $instance->addExtension(new \Knp\Menu\Integration\Symfony\RoutingExtension($this->get('cmf_routing.router')), 0);

        return $instance;
    }

    /**
     * Gets the 'knp_menu.listener.voters' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Knp\Bundle\MenuBundle\EventListener\VoterInitializerListener A Knp\Bundle\MenuBundle\EventListener\VoterInitializerListener instance
     */
    protected function getKnpMenu_Listener_VotersService()
    {
        $this->services['knp_menu.listener.voters'] = $instance = new \Knp\Bundle\MenuBundle\EventListener\VoterInitializerListener();

        $instance->addVoter($this->get('knp_menu.voter.router'));

        return $instance;
    }

    /**
     * Gets the 'knp_menu.matcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Knp\Menu\Matcher\Matcher A Knp\Menu\Matcher\Matcher instance
     */
    protected function getKnpMenu_MatcherService()
    {
        $this->services['knp_menu.matcher'] = $instance = new \Knp\Menu\Matcher\Matcher();

        $instance->addVoter($this->get('knp_menu.voter.router'));

        return $instance;
    }

    /**
     * Gets the 'knp_menu.menu_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Knp\Menu\Provider\ChainProvider A Knp\Menu\Provider\ChainProvider instance
     */
    protected function getKnpMenu_MenuProviderService()
    {
        return $this->services['knp_menu.menu_provider'] = new \Knp\Menu\Provider\ChainProvider(array(0 => new \Knp\Bundle\MenuBundle\Provider\ContainerAwareProvider($this, array()), 1 => new \Knp\Bundle\MenuBundle\Provider\BuilderServiceProvider($this, array()), 2 => new \Knp\Bundle\MenuBundle\Provider\BuilderAliasProvider($this->get('kernel'), $this, $this->get('knp_menu.factory'))));
    }

    /**
     * Gets the 'knp_menu.renderer.list' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Knp\Menu\Renderer\ListRenderer A Knp\Menu\Renderer\ListRenderer instance
     */
    protected function getKnpMenu_Renderer_ListService()
    {
        return $this->services['knp_menu.renderer.list'] = new \Knp\Menu\Renderer\ListRenderer($this->get('knp_menu.matcher'), array(), 'UTF-8');
    }

    /**
     * Gets the 'knp_menu.renderer.twig' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Knp\Menu\Renderer\TwigRenderer A Knp\Menu\Renderer\TwigRenderer instance
     */
    protected function getKnpMenu_Renderer_TwigService()
    {
        return $this->services['knp_menu.renderer.twig'] = new \Knp\Menu\Renderer\TwigRenderer($this->get('twig'), 'KnpMenuBundle::menu.html.twig', $this->get('knp_menu.matcher'), array());
    }

    /**
     * Gets the 'knp_menu.renderer_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Knp\Bundle\MenuBundle\Renderer\ContainerAwareProvider A Knp\Bundle\MenuBundle\Renderer\ContainerAwareProvider instance
     */
    protected function getKnpMenu_RendererProviderService()
    {
        return $this->services['knp_menu.renderer_provider'] = new \Knp\Bundle\MenuBundle\Renderer\ContainerAwareProvider($this, 'twig', array('list' => 'knp_menu.renderer.list', 'twig' => 'knp_menu.renderer.twig'));
    }

    /**
     * Gets the 'knp_menu.voter.router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Knp\Menu\Matcher\Voter\RouteVoter A Knp\Menu\Matcher\Voter\RouteVoter instance
     */
    protected function getKnpMenu_Voter_RouterService()
    {
        return $this->services['knp_menu.voter.router'] = new \Knp\Menu\Matcher\Voter\RouteVoter();
    }

    /**
     * Gets the 'liip_imagine' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Imagine\Gd\Imagine A Imagine\Gd\Imagine instance
     */
    protected function getLiipImagineService()
    {
        $this->services['liip_imagine'] = $instance = new \Imagine\Gd\Imagine();

        $instance->setMetadataReader(new \Imagine\Image\Metadata\ExifMetadataReader());

        return $instance;
    }

    /**
     * Gets the 'liip_imagine.binary.loader.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Binary\Loader\FileSystemLoader A Liip\ImagineBundle\Binary\Loader\FileSystemLoader instance
     */
    protected function getLiipImagine_Binary_Loader_DefaultService()
    {
        return $this->services['liip_imagine.binary.loader.default'] = new \Liip\ImagineBundle\Binary\Loader\FileSystemLoader($this->get('liip_imagine.mime_type_guesser'), $this->get('liip_imagine.extension_guesser'), array(0 => ($this->targetDirs[3].'/app/../web')), new \Liip\ImagineBundle\Binary\Locator\FileSystemLocator());
    }

    /**
     * Gets the 'liip_imagine.binary.loader.prototype.filesystem' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Binary\Loader\FileSystemLoader A Liip\ImagineBundle\Binary\Loader\FileSystemLoader instance
     */
    protected function getLiipImagine_Binary_Loader_Prototype_FilesystemService()
    {
        return $this->services['liip_imagine.binary.loader.prototype.filesystem'] = new \Liip\ImagineBundle\Binary\Loader\FileSystemLoader($this->get('liip_imagine.mime_type_guesser'), $this->get('liip_imagine.extension_guesser'), '', '');
    }

    /**
     * Gets the 'liip_imagine.binary.loader.prototype.stream' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Binary\Loader\StreamLoader A Liip\ImagineBundle\Binary\Loader\StreamLoader instance
     */
    protected function getLiipImagine_Binary_Loader_Prototype_StreamService()
    {
        return $this->services['liip_imagine.binary.loader.prototype.stream'] = new \Liip\ImagineBundle\Binary\Loader\StreamLoader('', '');
    }

    /**
     * Gets the 'liip_imagine.binary.mime_type_guesser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Binary\SimpleMimeTypeGuesser A Liip\ImagineBundle\Binary\SimpleMimeTypeGuesser instance
     */
    protected function getLiipImagine_Binary_MimeTypeGuesserService()
    {
        return $this->services['liip_imagine.binary.mime_type_guesser'] = new \Liip\ImagineBundle\Binary\SimpleMimeTypeGuesser($this->get('liip_imagine.mime_type_guesser'));
    }

    /**
     * Gets the 'liip_imagine.cache.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Cache\CacheManager A Liip\ImagineBundle\Imagine\Cache\CacheManager instance
     */
    protected function getLiipImagine_Cache_ManagerService()
    {
        $this->services['liip_imagine.cache.manager'] = $instance = new \Liip\ImagineBundle\Imagine\Cache\CacheManager($this->get('liip_imagine.filter.configuration'), $this->get('cmf_routing.router'), $this->get('liip_imagine.cache.signer'), $this->get('debug.event_dispatcher'), 'default');

        $instance->addResolver('default', $this->get('liip_imagine.cache.resolver.default'));
        $instance->addResolver('no_cache', $this->get('liip_imagine.cache.resolver.no_cache_web_path'));

        return $instance;
    }

    /**
     * Gets the 'liip_imagine.cache.resolver.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Cache\Resolver\WebPathResolver A Liip\ImagineBundle\Imagine\Cache\Resolver\WebPathResolver instance
     */
    protected function getLiipImagine_Cache_Resolver_DefaultService()
    {
        return $this->services['liip_imagine.cache.resolver.default'] = new \Liip\ImagineBundle\Imagine\Cache\Resolver\WebPathResolver($this->get('filesystem'), ${($_ = isset($this->services['router.request_context']) ? $this->services['router.request_context'] : $this->getRouter_RequestContextService()) && false ?: '_'}, ($this->targetDirs[3].'/app/../web'), 'media/cache');
    }

    /**
     * Gets the 'liip_imagine.cache.resolver.no_cache_web_path' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Cache\Resolver\NoCacheWebPathResolver A Liip\ImagineBundle\Imagine\Cache\Resolver\NoCacheWebPathResolver instance
     */
    protected function getLiipImagine_Cache_Resolver_NoCacheWebPathService()
    {
        return $this->services['liip_imagine.cache.resolver.no_cache_web_path'] = new \Liip\ImagineBundle\Imagine\Cache\Resolver\NoCacheWebPathResolver(${($_ = isset($this->services['router.request_context']) ? $this->services['router.request_context'] : $this->getRouter_RequestContextService()) && false ?: '_'});
    }

    /**
     * Gets the 'liip_imagine.cache.signer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Cache\Signer A Liip\ImagineBundle\Imagine\Cache\Signer instance
     */
    protected function getLiipImagine_Cache_SignerService()
    {
        return $this->services['liip_imagine.cache.signer'] = new \Liip\ImagineBundle\Imagine\Cache\Signer('ThisTokenIsNotSoSecretChangeIt');
    }

    /**
     * Gets the 'liip_imagine.controller' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Controller\ImagineController A Liip\ImagineBundle\Controller\ImagineController instance
     */
    protected function getLiipImagine_ControllerService()
    {
        return $this->services['liip_imagine.controller'] = new \Liip\ImagineBundle\Controller\ImagineController($this->get('liip_imagine.data.manager'), $this->get('liip_imagine.filter.manager'), $this->get('liip_imagine.cache.manager'), $this->get('liip_imagine.cache.signer'), $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'liip_imagine.data.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Data\DataManager A Liip\ImagineBundle\Imagine\Data\DataManager instance
     */
    protected function getLiipImagine_Data_ManagerService()
    {
        $this->services['liip_imagine.data.manager'] = $instance = new \Liip\ImagineBundle\Imagine\Data\DataManager($this->get('liip_imagine.binary.mime_type_guesser'), $this->get('liip_imagine.extension_guesser'), $this->get('liip_imagine.filter.configuration'), 'default', NULL);

        $instance->addLoader('cmf_media_doctrine_phpcr', $this->get('cmf_media.liip_imagine.doctrine_phpcr.binary.loader'));
        $instance->addLoader('default', $this->get('liip_imagine.binary.loader.default'));

        return $instance;
    }

    /**
     * Gets the 'liip_imagine.extension_guesser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpFoundation\File\MimeType\ExtensionGuesserInterface A Symfony\Component\HttpFoundation\File\MimeType\ExtensionGuesserInterface instance
     */
    protected function getLiipImagine_ExtensionGuesserService()
    {
        return $this->services['liip_imagine.extension_guesser'] = \Symfony\Component\HttpFoundation\File\MimeType\ExtensionGuesser::getInstance();
    }

    /**
     * Gets the 'liip_imagine.filter.configuration' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\FilterConfiguration A Liip\ImagineBundle\Imagine\Filter\FilterConfiguration instance
     */
    protected function getLiipImagine_Filter_ConfigurationService()
    {
        return $this->services['liip_imagine.filter.configuration'] = new \Liip\ImagineBundle\Imagine\Filter\FilterConfiguration(array('cache' => array('quality' => 100, 'jpeg_quality' => NULL, 'png_compression_level' => NULL, 'png_compression_filter' => NULL, 'format' => NULL, 'animated' => false, 'cache' => NULL, 'data_loader' => NULL, 'default_image' => NULL, 'filters' => array(), 'post_processors' => array()), 'default' => array('quality' => 100, 'jpeg_quality' => NULL, 'png_compression_level' => NULL, 'png_compression_filter' => NULL, 'format' => NULL, 'animated' => false, 'cache' => NULL, 'data_loader' => NULL, 'default_image' => NULL, 'filters' => array(), 'post_processors' => array()), 'full' => array('quality' => 100, 'filters' => array('relative_resize' => array('scale' => 1)), 'jpeg_quality' => NULL, 'png_compression_level' => NULL, 'png_compression_filter' => NULL, 'format' => NULL, 'animated' => false, 'cache' => NULL, 'data_loader' => NULL, 'default_image' => NULL, 'post_processors' => array()), 'cmf_full' => array('data_loader' => 'cmf_media_doctrine_phpcr', 'quality' => 100, 'filters' => array('relative_resize' => array('scale' => 1)), 'jpeg_quality' => NULL, 'png_compression_level' => NULL, 'png_compression_filter' => NULL, 'format' => NULL, 'animated' => false, 'cache' => NULL, 'default_image' => NULL, 'post_processors' => array()), 'thumbnail' => array('quality' => 100, 'filters' => array('thumbnail' => array('size' => array(0 => 60, 1 => 60), 'mode' => 'outbound')), 'jpeg_quality' => NULL, 'png_compression_level' => NULL, 'png_compression_filter' => NULL, 'format' => NULL, 'animated' => false, 'cache' => NULL, 'data_loader' => NULL, 'default_image' => NULL, 'post_processors' => array()), 'cmf_thumbnail' => array('data_loader' => 'cmf_media_doctrine_phpcr', 'filters' => array('thumbnail' => array('size' => array(0 => 60, 1 => 60))), 'quality' => 100, 'jpeg_quality' => NULL, 'png_compression_level' => NULL, 'png_compression_filter' => NULL, 'format' => NULL, 'animated' => false, 'cache' => NULL, 'default_image' => NULL, 'post_processors' => array()), 'thumbnail_XL' => array('quality' => 100, 'filters' => array('thumbnail' => array('size' => array(0 => 90, 1 => 90), 'mode' => 'outbound')), 'jpeg_quality' => NULL, 'png_compression_level' => NULL, 'png_compression_filter' => NULL, 'format' => NULL, 'animated' => false, 'cache' => NULL, 'data_loader' => NULL, 'default_image' => NULL, 'post_processors' => array()), 'thumbnail_S' => array('quality' => 100, 'filters' => array('thumbnail' => array('size' => array(0 => 80, 1 => 55), 'mode' => 'outbound')), 'jpeg_quality' => NULL, 'png_compression_level' => NULL, 'png_compression_filter' => NULL, 'format' => NULL, 'animated' => false, 'cache' => NULL, 'data_loader' => NULL, 'default_image' => NULL, 'post_processors' => array()), 'cmf_thumbnail_S' => array('data_loader' => 'cmf_media_doctrine_phpcr', 'quality' => 100, 'filters' => array('thumbnail' => array('size' => array(0 => 80, 1 => 55), 'mode' => 'outbound')), 'jpeg_quality' => NULL, 'png_compression_level' => NULL, 'png_compression_filter' => NULL, 'format' => NULL, 'animated' => false, 'cache' => NULL, 'default_image' => NULL, 'post_processors' => array()), 'cmf_block_medium' => array('data_loader' => 'cmf_media_doctrine_phpcr', 'filters' => array('relative_resize' => array('widen' => 380)), 'quality' => 100, 'jpeg_quality' => NULL, 'png_compression_level' => NULL, 'png_compression_filter' => NULL, 'format' => NULL, 'animated' => false, 'cache' => NULL, 'default_image' => NULL, 'post_processors' => array()), 'image_box_4' => array('filters' => array('relative_resize' => array('widen' => 300)), 'quality' => 100, 'jpeg_quality' => NULL, 'png_compression_level' => NULL, 'png_compression_filter' => NULL, 'format' => NULL, 'animated' => false, 'cache' => NULL, 'data_loader' => NULL, 'default_image' => NULL, 'post_processors' => array()), 'magazine_item' => array('quality' => 100, 'filters' => array('upscale' => array('min' => array(0 => 500, 1 => 344)), 'thumbnail' => array('size' => array(0 => 500, 1 => 344), 'mode' => 'outbound')), 'jpeg_quality' => NULL, 'png_compression_level' => NULL, 'png_compression_filter' => NULL, 'format' => NULL, 'animated' => false, 'cache' => NULL, 'data_loader' => NULL, 'default_image' => NULL, 'post_processors' => array()), 'cmf_magazine_item' => array('data_loader' => 'cmf_media_doctrine_phpcr', 'quality' => 100, 'filters' => array('upscale' => array('min' => array(0 => 500, 1 => 344)), 'thumbnail' => array('size' => array(0 => 500, 1 => 344), 'mode' => 'outbound')), 'jpeg_quality' => NULL, 'png_compression_level' => NULL, 'png_compression_filter' => NULL, 'format' => NULL, 'animated' => false, 'cache' => NULL, 'default_image' => NULL, 'post_processors' => array()), 'magazine_item_wide' => array('quality' => 100, 'filters' => array('upscale' => array('min' => array(0 => 600, 1 => 300)), 'thumbnail' => array('size' => array(0 => 600, 1 => 300), 'mode' => 'outbound')), 'jpeg_quality' => NULL, 'png_compression_level' => NULL, 'png_compression_filter' => NULL, 'format' => NULL, 'animated' => false, 'cache' => NULL, 'data_loader' => NULL, 'default_image' => NULL, 'post_processors' => array()), 'cmf_magazine_item_wide' => array('quality' => 100, 'data_loader' => 'cmf_media_doctrine_phpcr', 'filters' => array('upscale' => array('min' => array(0 => 600, 1 => 300)), 'thumbnail' => array('size' => array(0 => 600, 1 => 300), 'mode' => 'outbound')), 'jpeg_quality' => NULL, 'png_compression_level' => NULL, 'png_compression_filter' => NULL, 'format' => NULL, 'animated' => false, 'cache' => NULL, 'default_image' => NULL, 'post_processors' => array()), 'image_upload_thumbnail' => array('data_loader' => 'cmf_media_doctrine_phpcr', 'filters' => array('thumbnail' => array('size' => array(0 => 100, 1 => 100), 'mode' => 'outbound')), 'quality' => 100, 'jpeg_quality' => NULL, 'png_compression_level' => NULL, 'png_compression_filter' => NULL, 'format' => NULL, 'animated' => false, 'cache' => NULL, 'default_image' => NULL, 'post_processors' => array()), 'cmf_block' => array('data_loader' => 'cmf_media_doctrine_phpcr', 'filters' => array('relative_resize' => array('scale' => 1)), 'quality' => 100, 'jpeg_quality' => NULL, 'png_compression_level' => NULL, 'png_compression_filter' => NULL, 'format' => NULL, 'animated' => false, 'cache' => NULL, 'default_image' => NULL, 'post_processors' => array()), 'small_width_fixed' => array('filters' => array('relative_resize' => array('widen' => 100)), 'quality' => 100, 'jpeg_quality' => NULL, 'png_compression_level' => NULL, 'png_compression_filter' => NULL, 'format' => NULL, 'animated' => false, 'cache' => NULL, 'data_loader' => NULL, 'default_image' => NULL, 'post_processors' => array()), 'small_height_fixed' => array('filters' => array('relative_resize' => array('heighten' => 80)), 'quality' => 100, 'jpeg_quality' => NULL, 'png_compression_level' => NULL, 'png_compression_filter' => NULL, 'format' => NULL, 'animated' => false, 'cache' => NULL, 'data_loader' => NULL, 'default_image' => NULL, 'post_processors' => array()), 'logo' => array('quality' => 100, 'filters' => array('relative_resize' => array('widen' => 200)), 'jpeg_quality' => NULL, 'png_compression_level' => NULL, 'png_compression_filter' => NULL, 'format' => NULL, 'animated' => false, 'cache' => NULL, 'data_loader' => NULL, 'default_image' => NULL, 'post_processors' => array()), 'pub_banner' => array('quality' => 100, 'filters' => array('thumbnail' => array('size' => array(0 => 300, 1 => 250), 'mode' => 'outbound')), 'jpeg_quality' => NULL, 'png_compression_level' => NULL, 'png_compression_filter' => NULL, 'format' => NULL, 'animated' => false, 'cache' => NULL, 'data_loader' => NULL, 'default_image' => NULL, 'post_processors' => array())));
    }

    /**
     * Gets the 'liip_imagine.filter.loader.auto_rotate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\AutoRotateFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\AutoRotateFilterLoader instance
     */
    protected function getLiipImagine_Filter_Loader_AutoRotateService()
    {
        return $this->services['liip_imagine.filter.loader.auto_rotate'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\AutoRotateFilterLoader();
    }

    /**
     * Gets the 'liip_imagine.filter.loader.background' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\BackgroundFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\BackgroundFilterLoader instance
     */
    protected function getLiipImagine_Filter_Loader_BackgroundService()
    {
        return $this->services['liip_imagine.filter.loader.background'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\BackgroundFilterLoader($this->get('liip_imagine'));
    }

    /**
     * Gets the 'liip_imagine.filter.loader.crop' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\CropFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\CropFilterLoader instance
     */
    protected function getLiipImagine_Filter_Loader_CropService()
    {
        return $this->services['liip_imagine.filter.loader.crop'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\CropFilterLoader();
    }

    /**
     * Gets the 'liip_imagine.filter.loader.downscale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\DownscaleFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\DownscaleFilterLoader instance
     */
    protected function getLiipImagine_Filter_Loader_DownscaleService()
    {
        return $this->services['liip_imagine.filter.loader.downscale'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\DownscaleFilterLoader();
    }

    /**
     * Gets the 'liip_imagine.filter.loader.grayscale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\GrayscaleFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\GrayscaleFilterLoader instance
     */
    protected function getLiipImagine_Filter_Loader_GrayscaleService()
    {
        return $this->services['liip_imagine.filter.loader.grayscale'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\GrayscaleFilterLoader();
    }

    /**
     * Gets the 'liip_imagine.filter.loader.interlace' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\InterlaceFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\InterlaceFilterLoader instance
     */
    protected function getLiipImagine_Filter_Loader_InterlaceService()
    {
        return $this->services['liip_imagine.filter.loader.interlace'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\InterlaceFilterLoader();
    }

    /**
     * Gets the 'liip_imagine.filter.loader.paste' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\PasteFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\PasteFilterLoader instance
     */
    protected function getLiipImagine_Filter_Loader_PasteService()
    {
        return $this->services['liip_imagine.filter.loader.paste'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\PasteFilterLoader($this->get('liip_imagine'), ($this->targetDirs[3].'/app'));
    }

    /**
     * Gets the 'liip_imagine.filter.loader.relative_resize' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\RelativeResizeFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\RelativeResizeFilterLoader instance
     */
    protected function getLiipImagine_Filter_Loader_RelativeResizeService()
    {
        return $this->services['liip_imagine.filter.loader.relative_resize'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\RelativeResizeFilterLoader();
    }

    /**
     * Gets the 'liip_imagine.filter.loader.resize' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\ResizeFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\ResizeFilterLoader instance
     */
    protected function getLiipImagine_Filter_Loader_ResizeService()
    {
        return $this->services['liip_imagine.filter.loader.resize'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\ResizeFilterLoader();
    }

    /**
     * Gets the 'liip_imagine.filter.loader.rotate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\RotateFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\RotateFilterLoader instance
     */
    protected function getLiipImagine_Filter_Loader_RotateService()
    {
        return $this->services['liip_imagine.filter.loader.rotate'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\RotateFilterLoader();
    }

    /**
     * Gets the 'liip_imagine.filter.loader.scale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\ScaleFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\ScaleFilterLoader instance
     */
    protected function getLiipImagine_Filter_Loader_ScaleService()
    {
        return $this->services['liip_imagine.filter.loader.scale'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\ScaleFilterLoader();
    }

    /**
     * Gets the 'liip_imagine.filter.loader.strip' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\StripFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\StripFilterLoader instance
     */
    protected function getLiipImagine_Filter_Loader_StripService()
    {
        return $this->services['liip_imagine.filter.loader.strip'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\StripFilterLoader();
    }

    /**
     * Gets the 'liip_imagine.filter.loader.thumbnail' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\ThumbnailFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\ThumbnailFilterLoader instance
     */
    protected function getLiipImagine_Filter_Loader_ThumbnailService()
    {
        return $this->services['liip_imagine.filter.loader.thumbnail'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\ThumbnailFilterLoader();
    }

    /**
     * Gets the 'liip_imagine.filter.loader.upscale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\UpscaleFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\UpscaleFilterLoader instance
     */
    protected function getLiipImagine_Filter_Loader_UpscaleService()
    {
        return $this->services['liip_imagine.filter.loader.upscale'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\UpscaleFilterLoader();
    }

    /**
     * Gets the 'liip_imagine.filter.loader.watermark' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\WatermarkFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\WatermarkFilterLoader instance
     */
    protected function getLiipImagine_Filter_Loader_WatermarkService()
    {
        return $this->services['liip_imagine.filter.loader.watermark'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\WatermarkFilterLoader($this->get('liip_imagine'), ($this->targetDirs[3].'/app'));
    }

    /**
     * Gets the 'liip_imagine.filter.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\FilterManager A Liip\ImagineBundle\Imagine\Filter\FilterManager instance
     */
    protected function getLiipImagine_Filter_ManagerService()
    {
        $this->services['liip_imagine.filter.manager'] = $instance = new \Liip\ImagineBundle\Imagine\Filter\FilterManager($this->get('liip_imagine.filter.configuration'), $this->get('liip_imagine'), $this->get('liip_imagine.binary.mime_type_guesser'));

        $instance->addLoader('relative_resize', $this->get('liip_imagine.filter.loader.relative_resize'));
        $instance->addLoader('resize', $this->get('liip_imagine.filter.loader.resize'));
        $instance->addLoader('thumbnail', $this->get('liip_imagine.filter.loader.thumbnail'));
        $instance->addLoader('crop', $this->get('liip_imagine.filter.loader.crop'));
        $instance->addLoader('grayscale', $this->get('liip_imagine.filter.loader.grayscale'));
        $instance->addLoader('paste', $this->get('liip_imagine.filter.loader.paste'));
        $instance->addLoader('watermark', $this->get('liip_imagine.filter.loader.watermark'));
        $instance->addLoader('background', $this->get('liip_imagine.filter.loader.background'));
        $instance->addLoader('strip', $this->get('liip_imagine.filter.loader.strip'));
        $instance->addLoader('scale', $this->get('liip_imagine.filter.loader.scale'));
        $instance->addLoader('upscale', $this->get('liip_imagine.filter.loader.upscale'));
        $instance->addLoader('downscale', $this->get('liip_imagine.filter.loader.downscale'));
        $instance->addLoader('auto_rotate', $this->get('liip_imagine.filter.loader.auto_rotate'));
        $instance->addLoader('rotate', $this->get('liip_imagine.filter.loader.rotate'));
        $instance->addLoader('interlace', $this->get('liip_imagine.filter.loader.interlace'));
        $instance->addPostProcessor('jpegoptim', $this->get('liip_imagine.filter.post_processor.jpegoptim'));
        $instance->addPostProcessor('optipng', $this->get('liip_imagine.filter.post_processor.optipng'));
        $instance->addPostProcessor('pngquant', $this->get('liip_imagine.filter.post_processor.pngquant'));
        $instance->addPostProcessor('mozjpeg', $this->get('liip_imagine.filter.post_processor.mozjpeg'));

        return $instance;
    }

    /**
     * Gets the 'liip_imagine.filter.post_processor.jpegoptim' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\PostProcessor\JpegOptimPostProcessor A Liip\ImagineBundle\Imagine\Filter\PostProcessor\JpegOptimPostProcessor instance
     */
    protected function getLiipImagine_Filter_PostProcessor_JpegoptimService()
    {
        return $this->services['liip_imagine.filter.post_processor.jpegoptim'] = new \Liip\ImagineBundle\Imagine\Filter\PostProcessor\JpegOptimPostProcessor('/usr/bin/jpegoptim', true, NULL, true, NULL);
    }

    /**
     * Gets the 'liip_imagine.filter.post_processor.mozjpeg' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\PostProcessor\MozJpegPostProcessor A Liip\ImagineBundle\Imagine\Filter\PostProcessor\MozJpegPostProcessor instance
     */
    protected function getLiipImagine_Filter_PostProcessor_MozjpegService()
    {
        return $this->services['liip_imagine.filter.post_processor.mozjpeg'] = new \Liip\ImagineBundle\Imagine\Filter\PostProcessor\MozJpegPostProcessor('/opt/mozjpeg/bin/cjpeg');
    }

    /**
     * Gets the 'liip_imagine.filter.post_processor.optipng' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\PostProcessor\OptiPngPostProcessor A Liip\ImagineBundle\Imagine\Filter\PostProcessor\OptiPngPostProcessor instance
     */
    protected function getLiipImagine_Filter_PostProcessor_OptipngService()
    {
        return $this->services['liip_imagine.filter.post_processor.optipng'] = new \Liip\ImagineBundle\Imagine\Filter\PostProcessor\OptiPngPostProcessor('/usr/bin/optipng', 7, true, NULL);
    }

    /**
     * Gets the 'liip_imagine.filter.post_processor.pngquant' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\PostProcessor\PngquantPostProcessor A Liip\ImagineBundle\Imagine\Filter\PostProcessor\PngquantPostProcessor instance
     */
    protected function getLiipImagine_Filter_PostProcessor_PngquantService()
    {
        return $this->services['liip_imagine.filter.post_processor.pngquant'] = new \Liip\ImagineBundle\Imagine\Filter\PostProcessor\PngquantPostProcessor('/usr/bin/pngquant');
    }

    /**
     * Gets the 'liip_imagine.form.type.image' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Form\Type\ImageType A Liip\ImagineBundle\Form\Type\ImageType instance
     */
    protected function getLiipImagine_Form_Type_ImageService()
    {
        return $this->services['liip_imagine.form.type.image'] = new \Liip\ImagineBundle\Form\Type\ImageType();
    }

    /**
     * Gets the 'liip_imagine.mime_type_guesser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface A Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface instance
     */
    protected function getLiipImagine_MimeTypeGuesserService()
    {
        return $this->services['liip_imagine.mime_type_guesser'] = \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesser::getInstance();
    }

    /**
     * Gets the 'liip_imagine.templating.helper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Templating\Helper\ImagineHelper A Liip\ImagineBundle\Templating\Helper\ImagineHelper instance
     */
    protected function getLiipImagine_Templating_HelperService()
    {
        return $this->services['liip_imagine.templating.helper'] = new \Liip\ImagineBundle\Templating\Helper\ImagineHelper($this->get('liip_imagine.cache.manager'));
    }

    /**
     * Gets the 'locale_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\LocaleListener A Symfony\Component\HttpKernel\EventListener\LocaleListener instance
     */
    protected function getLocaleListenerService()
    {
        return $this->services['locale_listener'] = new \Symfony\Component\HttpKernel\EventListener\LocaleListener($this->get('request_stack'), 'fr_FR', $this->get('cmf_routing.router', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'logger' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance
     */
    protected function getLoggerService()
    {
        $this->services['logger'] = $instance = new \Symfony\Bridge\Monolog\Logger('app');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->useMicrosecondTimestamps(true);
        $instance->pushHandler($this->get('monolog.handler.console'));
        $instance->pushHandler($this->get('monolog.handler.main'));

        return $instance;
    }

    /**
     * Gets the 'monolog.handler.console' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Handler\ConsoleHandler A Symfony\Bridge\Monolog\Handler\ConsoleHandler instance
     */
    protected function getMonolog_Handler_ConsoleService()
    {
        $this->services['monolog.handler.console'] = $instance = new \Symfony\Bridge\Monolog\Handler\ConsoleHandler(NULL, false, array());

        $instance->pushProcessor(${($_ = isset($this->services['monolog.processor.psr_log_message']) ? $this->services['monolog.processor.psr_log_message'] : $this->getMonolog_Processor_PsrLogMessageService()) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the 'monolog.handler.main' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Monolog\Handler\StreamHandler A Monolog\Handler\StreamHandler instance
     */
    protected function getMonolog_Handler_MainService()
    {
        $this->services['monolog.handler.main'] = $instance = new \Monolog\Handler\StreamHandler(($this->targetDirs[2].'/logs/dev.log'), 100, true, NULL);

        $instance->pushProcessor(${($_ = isset($this->services['monolog.processor.psr_log_message']) ? $this->services['monolog.processor.psr_log_message'] : $this->getMonolog_Processor_PsrLogMessageService()) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the 'monolog.handler.null_internal' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Monolog\Handler\NullHandler A Monolog\Handler\NullHandler instance
     */
    protected function getMonolog_Handler_NullInternalService()
    {
        return $this->services['monolog.handler.null_internal'] = new \Monolog\Handler\NullHandler();
    }

    /**
     * Gets the 'monolog.logger.assetic' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance
     */
    protected function getMonolog_Logger_AsseticService()
    {
        $this->services['monolog.logger.assetic'] = $instance = new \Symfony\Bridge\Monolog\Logger('assetic');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler($this->get('monolog.handler.console'));
        $instance->pushHandler($this->get('monolog.handler.main'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance
     */
    protected function getMonolog_Logger_CacheService()
    {
        $this->services['monolog.logger.cache'] = $instance = new \Symfony\Bridge\Monolog\Logger('cache');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler($this->get('monolog.handler.console'));
        $instance->pushHandler($this->get('monolog.handler.main'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.doctrine' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance
     */
    protected function getMonolog_Logger_DoctrineService()
    {
        $this->services['monolog.logger.doctrine'] = $instance = new \Symfony\Bridge\Monolog\Logger('doctrine');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler($this->get('monolog.handler.console'));
        $instance->pushHandler($this->get('monolog.handler.main'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.doctrine_phpcr' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance
     */
    protected function getMonolog_Logger_DoctrinePhpcrService()
    {
        $this->services['monolog.logger.doctrine_phpcr'] = $instance = new \Symfony\Bridge\Monolog\Logger('doctrine_phpcr');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler($this->get('monolog.handler.console'));
        $instance->pushHandler($this->get('monolog.handler.main'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.elastica' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance
     */
    protected function getMonolog_Logger_ElasticaService()
    {
        $this->services['monolog.logger.elastica'] = $instance = new \Symfony\Bridge\Monolog\Logger('elastica');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler($this->get('monolog.handler.console'));
        $instance->pushHandler($this->get('monolog.handler.main'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.event' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance
     */
    protected function getMonolog_Logger_EventService()
    {
        $this->services['monolog.logger.event'] = $instance = new \Symfony\Bridge\Monolog\Logger('event');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler($this->get('monolog.handler.console'));
        $instance->pushHandler($this->get('monolog.handler.main'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.php' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance
     */
    protected function getMonolog_Logger_PhpService()
    {
        $this->services['monolog.logger.php'] = $instance = new \Symfony\Bridge\Monolog\Logger('php');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler($this->get('monolog.handler.console'));
        $instance->pushHandler($this->get('monolog.handler.main'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.profiler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance
     */
    protected function getMonolog_Logger_ProfilerService()
    {
        $this->services['monolog.logger.profiler'] = $instance = new \Symfony\Bridge\Monolog\Logger('profiler');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler($this->get('monolog.handler.console'));
        $instance->pushHandler($this->get('monolog.handler.main'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.request' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance
     */
    protected function getMonolog_Logger_RequestService()
    {
        $this->services['monolog.logger.request'] = $instance = new \Symfony\Bridge\Monolog\Logger('request');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler($this->get('monolog.handler.console'));
        $instance->pushHandler($this->get('monolog.handler.main'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance
     */
    protected function getMonolog_Logger_RouterService()
    {
        $this->services['monolog.logger.router'] = $instance = new \Symfony\Bridge\Monolog\Logger('router');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler($this->get('monolog.handler.console'));
        $instance->pushHandler($this->get('monolog.handler.main'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.security' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance
     */
    protected function getMonolog_Logger_SecurityService()
    {
        $this->services['monolog.logger.security'] = $instance = new \Symfony\Bridge\Monolog\Logger('security');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler($this->get('monolog.handler.console'));
        $instance->pushHandler($this->get('monolog.handler.main'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.templating' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance
     */
    protected function getMonolog_Logger_TemplatingService()
    {
        $this->services['monolog.logger.templating'] = $instance = new \Symfony\Bridge\Monolog\Logger('templating');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler($this->get('monolog.handler.console'));
        $instance->pushHandler($this->get('monolog.handler.main'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance
     */
    protected function getMonolog_Logger_TranslationService()
    {
        $this->services['monolog.logger.translation'] = $instance = new \Symfony\Bridge\Monolog\Logger('translation');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler($this->get('monolog.handler.console'));
        $instance->pushHandler($this->get('monolog.handler.main'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.wsse' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance
     */
    protected function getMonolog_Logger_WsseService()
    {
        $this->services['monolog.logger.wsse'] = $instance = new \Symfony\Bridge\Monolog\Logger('wsse');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler($this->get('monolog.handler.console'));
        $instance->pushHandler($this->get('monolog.handler.main'));

        return $instance;
    }

    /**
     * Gets the 'mopa_bootstrap.form.type.form_actions' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mopa\Bundle\BootstrapBundle\Form\Type\FormActionsType A Mopa\Bundle\BootstrapBundle\Form\Type\FormActionsType instance
     */
    protected function getMopaBootstrap_Form_Type_FormActionsService()
    {
        return $this->services['mopa_bootstrap.form.type.form_actions'] = new \Mopa\Bundle\BootstrapBundle\Form\Type\FormActionsType();
    }

    /**
     * Gets the 'mopa_bootstrap.form.type.tab' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mopa\Bundle\BootstrapBundle\Form\Type\TabType A Mopa\Bundle\BootstrapBundle\Form\Type\TabType instance
     */
    protected function getMopaBootstrap_Form_Type_TabService()
    {
        return $this->services['mopa_bootstrap.form.type.tab'] = new \Mopa\Bundle\BootstrapBundle\Form\Type\TabType();
    }

    /**
     * Gets the 'mopa_bootstrap.form.type_extension.button' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mopa\Bundle\BootstrapBundle\Form\Extension\IconButtonExtension A Mopa\Bundle\BootstrapBundle\Form\Extension\IconButtonExtension instance
     */
    protected function getMopaBootstrap_Form_TypeExtension_ButtonService()
    {
        return $this->services['mopa_bootstrap.form.type_extension.button'] = new \Mopa\Bundle\BootstrapBundle\Form\Extension\IconButtonExtension();
    }

    /**
     * Gets the 'mopa_bootstrap.form.type_extension.date' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mopa\Bundle\BootstrapBundle\Form\Extension\DateTypeExtension A Mopa\Bundle\BootstrapBundle\Form\Extension\DateTypeExtension instance
     */
    protected function getMopaBootstrap_Form_TypeExtension_DateService()
    {
        return $this->services['mopa_bootstrap.form.type_extension.date'] = new \Mopa\Bundle\BootstrapBundle\Form\Extension\DateTypeExtension(array('date_wrapper_class' => array('year' => 'col-xs-4', 'month' => 'col-xs-4', 'day' => 'col-xs-4')));
    }

    /**
     * Gets the 'mopa_bootstrap.form.type_extension.datetime' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mopa\Bundle\BootstrapBundle\Form\Extension\DatetimeTypeExtension A Mopa\Bundle\BootstrapBundle\Form\Extension\DatetimeTypeExtension instance
     */
    protected function getMopaBootstrap_Form_TypeExtension_DatetimeService()
    {
        return $this->services['mopa_bootstrap.form.type_extension.datetime'] = new \Mopa\Bundle\BootstrapBundle\Form\Extension\DatetimeTypeExtension();
    }

    /**
     * Gets the 'mopa_bootstrap.form.type_extension.embed_form' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mopa\Bundle\BootstrapBundle\Form\Extension\EmbedFormExtension A Mopa\Bundle\BootstrapBundle\Form\Extension\EmbedFormExtension instance
     */
    protected function getMopaBootstrap_Form_TypeExtension_EmbedFormService()
    {
        return $this->services['mopa_bootstrap.form.type_extension.embed_form'] = new \Mopa\Bundle\BootstrapBundle\Form\Extension\EmbedFormExtension();
    }

    /**
     * Gets the 'mopa_bootstrap.form.type_extension.error' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mopa\Bundle\BootstrapBundle\Form\Extension\ErrorTypeFormTypeExtension A Mopa\Bundle\BootstrapBundle\Form\Extension\ErrorTypeFormTypeExtension instance
     */
    protected function getMopaBootstrap_Form_TypeExtension_ErrorService()
    {
        return $this->services['mopa_bootstrap.form.type_extension.error'] = new \Mopa\Bundle\BootstrapBundle\Form\Extension\ErrorTypeFormTypeExtension(array('error_type' => NULL));
    }

    /**
     * Gets the 'mopa_bootstrap.form.type_extension.help' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mopa\Bundle\BootstrapBundle\Form\Extension\HelpFormTypeExtension A Mopa\Bundle\BootstrapBundle\Form\Extension\HelpFormTypeExtension instance
     */
    protected function getMopaBootstrap_Form_TypeExtension_HelpService()
    {
        return $this->services['mopa_bootstrap.form.type_extension.help'] = new \Mopa\Bundle\BootstrapBundle\Form\Extension\HelpFormTypeExtension(array('help_block_tooltip' => array('title' => NULL, 'text' => NULL, 'icon' => 'info-sign', 'placement' => 'top'), 'help_block_popover' => array('title' => NULL, 'content' => NULL, 'text' => NULL, 'icon' => 'info-sign', 'placement' => 'top'), 'help_label_tooltip' => array('title' => NULL, 'text' => NULL, 'icon' => 'info-sign', 'placement' => 'top'), 'help_label_popover' => array('title' => NULL, 'content' => NULL, 'text' => NULL, 'icon' => 'info-sign', 'placement' => 'top'), 'help_widget_popover' => array('title' => NULL, 'content' => NULL, 'trigger' => 'hover', 'toggle' => 'popover', 'placement' => 'right', 'selector' => NULL)));
    }

    /**
     * Gets the 'mopa_bootstrap.form.type_extension.horizontal' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mopa\Bundle\BootstrapBundle\Form\Extension\HorizontalFormTypeExtension A Mopa\Bundle\BootstrapBundle\Form\Extension\HorizontalFormTypeExtension instance
     */
    protected function getMopaBootstrap_Form_TypeExtension_HorizontalService()
    {
        return $this->services['mopa_bootstrap.form.type_extension.horizontal'] = new \Mopa\Bundle\BootstrapBundle\Form\Extension\HorizontalFormTypeExtension(array('horizontal' => true, 'horizontal_label_class' => 'col-sm-3', 'horizontal_label_div_class' => NULL, 'horizontal_label_offset_class' => 'col-sm-offset-3', 'horizontal_input_wrapper_class' => 'col-sm-9'));
    }

    /**
     * Gets the 'mopa_bootstrap.form.type_extension.legend' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mopa\Bundle\BootstrapBundle\Form\Extension\LegendFormTypeExtension A Mopa\Bundle\BootstrapBundle\Form\Extension\LegendFormTypeExtension instance
     */
    protected function getMopaBootstrap_Form_TypeExtension_LegendService()
    {
        return $this->services['mopa_bootstrap.form.type_extension.legend'] = new \Mopa\Bundle\BootstrapBundle\Form\Extension\LegendFormTypeExtension(array('render_fieldset' => true, 'show_legend' => false, 'show_child_legend' => false, 'legend_tag' => 'legend', 'render_required_asterisk' => true, 'render_optional_text' => false));
    }

    /**
     * Gets the 'mopa_bootstrap.form.type_extension.offset_button' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mopa\Bundle\BootstrapBundle\Form\Extension\OffsetButtonExtension A Mopa\Bundle\BootstrapBundle\Form\Extension\OffsetButtonExtension instance
     */
    protected function getMopaBootstrap_Form_TypeExtension_OffsetButtonService()
    {
        return $this->services['mopa_bootstrap.form.type_extension.offset_button'] = new \Mopa\Bundle\BootstrapBundle\Form\Extension\OffsetButtonExtension();
    }

    /**
     * Gets the 'mopa_bootstrap.form.type_extension.static_text' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mopa\Bundle\BootstrapBundle\Form\Extension\StaticTextExtension A Mopa\Bundle\BootstrapBundle\Form\Extension\StaticTextExtension instance
     */
    protected function getMopaBootstrap_Form_TypeExtension_StaticTextService()
    {
        return $this->services['mopa_bootstrap.form.type_extension.static_text'] = new \Mopa\Bundle\BootstrapBundle\Form\Extension\StaticTextExtension();
    }

    /**
     * Gets the 'mopa_bootstrap.form.type_extension.tabbed' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mopa\Bundle\BootstrapBundle\Form\Extension\TabbedFormTypeExtension A Mopa\Bundle\BootstrapBundle\Form\Extension\TabbedFormTypeExtension instance
     */
    protected function getMopaBootstrap_Form_TypeExtension_TabbedService()
    {
        return $this->services['mopa_bootstrap.form.type_extension.tabbed'] = new \Mopa\Bundle\BootstrapBundle\Form\Extension\TabbedFormTypeExtension($this->get('form.factory'), array('class' => 'nav nav-tabs'));
    }

    /**
     * Gets the 'mopa_bootstrap.form.type_extension.time' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mopa\Bundle\BootstrapBundle\Form\Extension\TimeTypeExtension A Mopa\Bundle\BootstrapBundle\Form\Extension\TimeTypeExtension instance
     */
    protected function getMopaBootstrap_Form_TypeExtension_TimeService()
    {
        return $this->services['mopa_bootstrap.form.type_extension.time'] = new \Mopa\Bundle\BootstrapBundle\Form\Extension\TimeTypeExtension();
    }

    /**
     * Gets the 'mopa_bootstrap.form.type_extension.widget' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mopa\Bundle\BootstrapBundle\Form\Extension\WidgetFormTypeExtension A Mopa\Bundle\BootstrapBundle\Form\Extension\WidgetFormTypeExtension instance
     */
    protected function getMopaBootstrap_Form_TypeExtension_WidgetService()
    {
        return $this->services['mopa_bootstrap.form.type_extension.widget'] = new \Mopa\Bundle\BootstrapBundle\Form\Extension\WidgetFormTypeExtension(array('checkbox_label' => 'both'));
    }

    /**
     * Gets the 'mopa_bootstrap.form.type_extension.widget_collection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mopa\Bundle\BootstrapBundle\Form\Extension\WidgetCollectionFormTypeExtension A Mopa\Bundle\BootstrapBundle\Form\Extension\WidgetCollectionFormTypeExtension instance
     */
    protected function getMopaBootstrap_Form_TypeExtension_WidgetCollectionService()
    {
        return $this->services['mopa_bootstrap.form.type_extension.widget_collection'] = new \Mopa\Bundle\BootstrapBundle\Form\Extension\WidgetCollectionFormTypeExtension(array('render_collection_item' => true, 'widget_add_btn' => array('icon' => 'plus', 'attr' => array('class' => 'btn btn-primary'), 'label' => 'add_item', 'translation_domain' => NULL, 'icon_inverted' => false), 'widget_remove_btn' => array('icon' => 'remove', 'attr' => array('class' => 'btn btn-danger'), 'wrapper_div' => array('class' => 'form-group'), 'horizontal_wrapper_div' => array('class' => 'col-sm-3 col-sm-offset-3'), 'label' => 'remove_item', 'translation_domain' => NULL, 'icon_inverted' => false)));
    }

    /**
     * Gets the 'mopa_bootstrap.twig.extension.bootstrap_flash' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mopa\Bundle\BootstrapBundle\Twig\FlashExtension A Mopa\Bundle\BootstrapBundle\Twig\FlashExtension instance
     */
    protected function getMopaBootstrap_Twig_Extension_BootstrapFlashService()
    {
        return $this->services['mopa_bootstrap.twig.extension.bootstrap_flash'] = new \Mopa\Bundle\BootstrapBundle\Twig\FlashExtension(array('success' => 'success', 'error' => 'danger', 'danger' => 'danger', 'warning' => 'warning', 'warn' => 'warning', 'info' => 'info', 'notice' => 'info'));
    }

    /**
     * Gets the 'mopa_bootstrap.twig.extension.bootstrap_form' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mopa\Bundle\BootstrapBundle\Twig\FormExtension A Mopa\Bundle\BootstrapBundle\Twig\FormExtension instance
     */
    protected function getMopaBootstrap_Twig_Extension_BootstrapFormService()
    {
        return $this->services['mopa_bootstrap.twig.extension.bootstrap_form'] = new \Mopa\Bundle\BootstrapBundle\Twig\FormExtension();
    }

    /**
     * Gets the 'mopa_bootstrap.twig.extension.bootstrap_icon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mopa\Bundle\BootstrapBundle\Twig\IconExtension A Mopa\Bundle\BootstrapBundle\Twig\IconExtension instance
     */
    protected function getMopaBootstrap_Twig_Extension_BootstrapIconService()
    {
        return $this->services['mopa_bootstrap.twig.extension.bootstrap_icon'] = new \Mopa\Bundle\BootstrapBundle\Twig\IconExtension('glyphicons', 'icon');
    }

    /**
     * Gets the 'pagerfanta.convert_not_valid_current_page_to_not_found_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \WhiteOctober\PagerfantaBundle\EventListener\ConvertNotValidCurrentPageToNotFoundListener A WhiteOctober\PagerfantaBundle\EventListener\ConvertNotValidCurrentPageToNotFoundListener instance
     */
    protected function getPagerfanta_ConvertNotValidCurrentPageToNotFoundListenerService()
    {
        return $this->services['pagerfanta.convert_not_valid_current_page_to_not_found_listener'] = new \WhiteOctober\PagerfantaBundle\EventListener\ConvertNotValidCurrentPageToNotFoundListener();
    }

    /**
     * Gets the 'pagerfanta.convert_not_valid_max_per_page_to_not_found_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \WhiteOctober\PagerfantaBundle\EventListener\ConvertNotValidMaxPerPageToNotFoundListener A WhiteOctober\PagerfantaBundle\EventListener\ConvertNotValidMaxPerPageToNotFoundListener instance
     */
    protected function getPagerfanta_ConvertNotValidMaxPerPageToNotFoundListenerService()
    {
        return $this->services['pagerfanta.convert_not_valid_max_per_page_to_not_found_listener'] = new \WhiteOctober\PagerfantaBundle\EventListener\ConvertNotValidMaxPerPageToNotFoundListener();
    }

    /**
     * Gets the 'pagerfanta.view.semantic_ui' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\View\SemanticUiView A AppBundle\View\SemanticUiView instance
     */
    protected function getPagerfanta_View_SemanticUiService()
    {
        return $this->services['pagerfanta.view.semantic_ui'] = new \AppBundle\View\SemanticUiView();
    }

    /**
     * Gets the 'pagerfanta.view.semantic_ui_translated' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\View\SemanticUiTranslatedView A AppBundle\View\SemanticUiTranslatedView instance
     */
    protected function getPagerfanta_View_SemanticUiTranslatedService()
    {
        return $this->services['pagerfanta.view.semantic_ui_translated'] = new \AppBundle\View\SemanticUiTranslatedView($this->get('pagerfanta.view.semantic_ui'), $this->get('translator'));
    }

    /**
     * Gets the 'profiler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Profiler\Profiler A Symfony\Component\HttpKernel\Profiler\Profiler instance
     */
    protected function getProfilerService()
    {
        $a = $this->get('monolog.logger.profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE);
        $b = $this->get('kernel', ContainerInterface::NULL_ON_INVALID_REFERENCE);

        $c = new \Doctrine\Bundle\DoctrineBundle\DataCollector\DoctrineDataCollector($this->get('doctrine'));
        $c->addLogger('default', ${($_ = isset($this->services['doctrine.dbal.logger.profiling.default']) ? $this->services['doctrine.dbal.logger.profiling.default'] : $this->getDoctrine_Dbal_Logger_Profiling_DefaultService()) && false ?: '_'});

        $d = new \Symfony\Component\HttpKernel\DataCollector\ConfigDataCollector();
        if ($this->has('kernel')) {
            $d->setKernel($b);
        }

        $this->services['profiler'] = $instance = new \Symfony\Component\HttpKernel\Profiler\Profiler(new \Symfony\Component\HttpKernel\Profiler\FileProfilerStorage(('file:'.__DIR__.'/profiler')), $a);

        $instance->add($this->get('data_collector.request'));
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\TimeDataCollector($b, $this->get('debug.stopwatch', ContainerInterface::NULL_ON_INVALID_REFERENCE)));
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\MemoryDataCollector());
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\AjaxDataCollector());
        $instance->add($this->get('data_collector.form'));
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\ExceptionDataCollector());
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\LoggerDataCollector($a));
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\EventDataCollector($this->get('debug.event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE)));
        $instance->add($this->get('data_collector.router'));
        $instance->add($this->get('data_collector.translation'));
        $instance->add(new \Symfony\Bundle\SecurityBundle\DataCollector\SecurityDataCollector($this->get('security.token_storage', ContainerInterface::NULL_ON_INVALID_REFERENCE), ${($_ = isset($this->services['security.role_hierarchy']) ? $this->services['security.role_hierarchy'] : $this->getSecurity_RoleHierarchyService()) && false ?: '_'}, ${($_ = isset($this->services['security.logout_url_generator']) ? $this->services['security.logout_url_generator'] : $this->getSecurity_LogoutUrlGeneratorService()) && false ?: '_'}, ${($_ = isset($this->services['debug.security.access.decision_manager']) ? $this->services['debug.security.access.decision_manager'] : $this->getDebug_Security_Access_DecisionManagerService()) && false ?: '_'}, ${($_ = isset($this->services['security.firewall.map']) ? $this->services['security.firewall.map'] : $this->getSecurity_Firewall_MapService()) && false ?: '_'}));
        $instance->add(new \Symfony\Bridge\Twig\DataCollector\TwigDataCollector($this->get('twig.profile')));
        $instance->add($c);
        $instance->add(new \Doctrine\Bundle\PHPCRBundle\DataCollector\PHPCRDataCollector($this->get('doctrine_phpcr')));
        $instance->add(new \Symfony\Bundle\SwiftmailerBundle\DataCollector\MessageDataCollector($this));
        $instance->add($this->get('data_collector.dump'));
        $instance->add(new \Sonata\BlockBundle\Profiler\DataCollector\BlockDataCollector($this->get('sonata.block.templating.helper'), array(0 => 'sonata.block.service.container', 1 => 'sonata.page.block.container', 2 => 'sonata.dashboard.block.container', 3 => 'cmf.block.container', 4 => 'cmf.block.slideshow')));
        $instance->add($this->get('fos_elastica.data_collector'));
        $instance->add($d);

        return $instance;
    }

    /**
     * Gets the 'profiler_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ProfilerListener A Symfony\Component\HttpKernel\EventListener\ProfilerListener instance
     */
    protected function getProfilerListenerService()
    {
        return $this->services['profiler_listener'] = new \Symfony\Component\HttpKernel\EventListener\ProfilerListener($this->get('profiler'), $this->get('request_stack'), NULL, false, false);
    }

    /**
     * Gets the 'property_accessor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\PropertyAccess\PropertyAccessor A Symfony\Component\PropertyAccess\PropertyAccessor instance
     */
    protected function getPropertyAccessorService()
    {
        return $this->services['property_accessor'] = new \Symfony\Component\PropertyAccess\PropertyAccessor(false, false, new \Symfony\Component\Cache\Adapter\ArrayAdapter(0, false));
    }

    /**
     * Gets the 'request_stack' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpFoundation\RequestStack A Symfony\Component\HttpFoundation\RequestStack instance
     */
    protected function getRequestStackService()
    {
        return $this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack();
    }

    /**
     * Gets the 'response_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ResponseListener A Symfony\Component\HttpKernel\EventListener\ResponseListener instance
     */
    protected function getResponseListenerService()
    {
        return $this->services['response_listener'] = new \Symfony\Component\HttpKernel\EventListener\ResponseListener('UTF-8');
    }

    /**
     * Gets the 'router_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\RouterListener A Symfony\Component\HttpKernel\EventListener\RouterListener instance
     */
    protected function getRouterListenerService()
    {
        return $this->services['router_listener'] = new \Symfony\Component\HttpKernel\EventListener\RouterListener($this->get('cmf_routing.router'), $this->get('request_stack'), ${($_ = isset($this->services['router.request_context']) ? $this->services['router.request_context'] : $this->getRouter_RequestContextService()) && false ?: '_'}, $this->get('monolog.logger.request', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'routing.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader A Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader instance
     */
    protected function getRouting_LoaderService()
    {
        $a = $this->get('file_locator');
        $b = $this->get('annotation_reader');

        $c = new \Sensio\Bundle\FrameworkExtraBundle\Routing\AnnotatedRouteControllerLoader($b);

        $d = new \Symfony\Component\Config\Loader\LoaderResolver();
        $d->addLoader(new \Symfony\Component\Routing\Loader\XmlFileLoader($a));
        $d->addLoader(new \Symfony\Component\Routing\Loader\YamlFileLoader($a));
        $d->addLoader(new \Symfony\Component\Routing\Loader\PhpFileLoader($a));
        $d->addLoader(new \Symfony\Component\Routing\Loader\DirectoryLoader($a));
        $d->addLoader(new \Symfony\Component\Routing\Loader\DependencyInjection\ServiceRouterLoader($this));
        $d->addLoader(new \Symfony\Bundle\AsseticBundle\Routing\AsseticLoader($this->get('assetic.asset_manager'), array()));
        $d->addLoader(new \Symfony\Component\Routing\Loader\AnnotationDirectoryLoader($a, $c));
        $d->addLoader(new \Symfony\Component\Routing\Loader\AnnotationFileLoader($a, $c));
        $d->addLoader($c);
        $d->addLoader(new \Sylius\Bundle\ResourceBundle\Routing\ResourceLoader(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}, new \Sylius\Bundle\ResourceBundle\Routing\RouteFactory()));
        $d->addLoader(new \FOS\RestBundle\Routing\Loader\DirectoryRouteLoader($a, $this->get('fos_rest.routing.loader.processor')));
        $d->addLoader($this->get('fos_rest.routing.loader.controller'));
        $d->addLoader($this->get('fos_rest.routing.loader.yaml_collection'));
        $d->addLoader($this->get('fos_rest.routing.loader.xml_collection'));

        return $this->services['routing.loader'] = new \Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader(${($_ = isset($this->services['controller_name_converter']) ? $this->services['controller_name_converter'] : $this->getControllerNameConverterService()) && false ?: '_'}, $d);
    }

    /**
     * Gets the 'security.authentication.guard_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Guard\GuardAuthenticatorHandler A Symfony\Component\Security\Guard\GuardAuthenticatorHandler instance
     */
    protected function getSecurity_Authentication_GuardHandlerService()
    {
        return $this->services['security.authentication.guard_handler'] = new \Symfony\Component\Security\Guard\GuardAuthenticatorHandler($this->get('security.token_storage'), $this->get('debug.event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'security.authentication_utils' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Http\Authentication\AuthenticationUtils A Symfony\Component\Security\Http\Authentication\AuthenticationUtils instance
     */
    protected function getSecurity_AuthenticationUtilsService()
    {
        return $this->services['security.authentication_utils'] = new \Symfony\Component\Security\Http\Authentication\AuthenticationUtils($this->get('request_stack'));
    }

    /**
     * Gets the 'security.authorization_checker' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Authorization\AuthorizationChecker A Symfony\Component\Security\Core\Authorization\AuthorizationChecker instance
     */
    protected function getSecurity_AuthorizationCheckerService()
    {
        return $this->services['security.authorization_checker'] = new \Symfony\Component\Security\Core\Authorization\AuthorizationChecker($this->get('security.token_storage'), ${($_ = isset($this->services['security.authentication.manager']) ? $this->services['security.authentication.manager'] : $this->getSecurity_Authentication_ManagerService()) && false ?: '_'}, ${($_ = isset($this->services['debug.security.access.decision_manager']) ? $this->services['debug.security.access.decision_manager'] : $this->getDebug_Security_Access_DecisionManagerService()) && false ?: '_'}, false);
    }

    /**
     * Gets the 'security.csrf.token_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Csrf\CsrfTokenManager A Symfony\Component\Security\Csrf\CsrfTokenManager instance
     */
    protected function getSecurity_Csrf_TokenManagerService()
    {
        return $this->services['security.csrf.token_manager'] = new \Symfony\Component\Security\Csrf\CsrfTokenManager(new \Symfony\Component\Security\Csrf\TokenGenerator\UriSafeTokenGenerator(), new \Symfony\Component\Security\Csrf\TokenStorage\SessionTokenStorage($this->get('session')));
    }

    /**
     * Gets the 'security.encoder_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Encoder\EncoderFactory A Symfony\Component\Security\Core\Encoder\EncoderFactory instance
     */
    protected function getSecurity_EncoderFactoryService()
    {
        return $this->services['security.encoder_factory'] = new \Symfony\Component\Security\Core\Encoder\EncoderFactory(array('Sylius\\Component\\User\\Model\\UserInterface' => array('algorithm' => 'sha512', 'hash_algorithm' => 'sha512', 'key_length' => 40, 'ignore_case' => false, 'encode_as_base64' => true, 'iterations' => 5000, 'cost' => 13)));
    }

    /**
     * Gets the 'security.firewall' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Http\Firewall A Symfony\Component\Security\Http\Firewall instance
     */
    protected function getSecurity_FirewallService()
    {
        return $this->services['security.firewall'] = new \Symfony\Component\Security\Http\Firewall(${($_ = isset($this->services['security.firewall.map']) ? $this->services['security.firewall.map'] : $this->getSecurity_Firewall_MapService()) && false ?: '_'}, $this->get('debug.event_dispatcher'));
    }

    /**
     * Gets the 'security.firewall.map.context.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallContext A Symfony\Bundle\SecurityBundle\Security\FirewallContext instance
     */
    protected function getSecurity_Firewall_Map_Context_ApiService()
    {
        $a = $this->get('security.token_storage');
        $b = $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE);

        return $this->services['security.firewall.map.context.api'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(array(0 => ${($_ = isset($this->services['security.channel_listener']) ? $this->services['security.channel_listener'] : $this->getSecurity_ChannelListenerService()) && false ?: '_'}, 1 => ${($_ = isset($this->services['security.context_listener.0']) ? $this->services['security.context_listener.0'] : $this->getSecurity_ContextListener_0Service()) && false ?: '_'}, 2 => new \Symfony\Component\Security\Http\Firewall\AnonymousAuthenticationListener($a, '58ecd215246dd3.81429637', $b, ${($_ = isset($this->services['security.authentication.manager']) ? $this->services['security.authentication.manager'] : $this->getSecurity_Authentication_ManagerService()) && false ?: '_'}), 3 => ${($_ = isset($this->services['security.access_listener']) ? $this->services['security.access_listener'] : $this->getSecurity_AccessListenerService()) && false ?: '_'}), new \Symfony\Component\Security\Http\Firewall\ExceptionListener($a, ${($_ = isset($this->services['security.authentication.trust_resolver']) ? $this->services['security.authentication.trust_resolver'] : $this->getSecurity_Authentication_TrustResolverService()) && false ?: '_'}, ${($_ = isset($this->services['security.http_utils']) ? $this->services['security.http_utils'] : $this->getSecurity_HttpUtilsService()) && false ?: '_'}, 'api', $this->get('app.security.api_entry_point'), NULL, NULL, $b, false), new \Symfony\Bundle\SecurityBundle\Security\FirewallConfig('api', 'security.user_checker', 'security.request_matcher.e8252d3b68a0036d971de50fe3481213180e5b38fb939d716cb8ea184fe7d5a104a954c3', true, false, 'sylius.shop_user_provider.email_or_name_based', 'user', 'app.security.api_entry_point', NULL, NULL, array(0 => 'anonymous')));
    }

    /**
     * Gets the 'security.firewall.map.context.main' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallContext A Symfony\Bundle\SecurityBundle\Security\FirewallContext instance
     */
    protected function getSecurity_Firewall_Map_Context_MainService()
    {
        $a = ${($_ = isset($this->services['security.http_utils']) ? $this->services['security.http_utils'] : $this->getSecurity_HttpUtilsService()) && false ?: '_'};
        $b = $this->get('sylius.shop_user_provider.email_or_name_based');
        $c = $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE);
        $d = $this->get('security.token_storage');
        $e = $this->get('http_kernel');
        $f = ${($_ = isset($this->services['security.authentication.manager']) ? $this->services['security.authentication.manager'] : $this->getSecurity_Authentication_ManagerService()) && false ?: '_'};
        $g = $this->get('debug.event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE);

        $h = new \Symfony\Component\Security\Http\RememberMe\TokenBasedRememberMeServices(array(0 => $b), 'ThisTokenIsNotSoSecretChangeIt', 'main', array('name' => 'APP_FRONTEND_REMEMBER_ME', 'lifetime' => 31536000, 'remember_me_parameter' => '_remember_me', 'path' => '/', 'domain' => NULL, 'secure' => false, 'httponly' => true, 'always_remember_me' => false), $c);

        $i = new \Symfony\Component\Security\Http\Firewall\LogoutListener($d, $a, new \Symfony\Component\Security\Http\Logout\DefaultLogoutSuccessHandler($a, 'app_homepage'), array('csrf_parameter' => '_csrf_token', 'csrf_token_id' => 'logout', 'logout_path' => 'app_frontend_logout'));
        $i->addHandler(new \Symfony\Component\Security\Http\Logout\SessionLogoutHandler());
        $i->addHandler($h);

        $j = new \Symfony\Component\Security\Http\Session\SessionAuthenticationStrategy('migrate');

        $k = new \Symfony\Component\Security\Http\Authentication\DefaultAuthenticationSuccessHandler($a, array());
        $k->setOptions(array('login_path' => 'sylius_shop_login', 'default_target_path' => '/', 'use_referer' => true, 'always_use_default_target_path' => false, 'target_path_parameter' => '_target_path'));
        $k->setProviderKey('main');

        $l = new \Symfony\Component\Security\Http\Authentication\DefaultAuthenticationFailureHandler($e, $a, array(), $c);
        $l->setOptions(array('login_path' => 'sylius_shop_login', 'failure_path' => 'sylius_shop_login', 'failure_forward' => false, 'failure_path_parameter' => '_failure_path'));

        $m = new \Symfony\Component\Security\Http\Firewall\UsernamePasswordFormAuthenticationListener($d, $f, $j, $a, 'main', $k, $l, array('check_path' => 'sylius_shop_login_check', 'use_forward' => false, 'require_previous_session' => true, 'username_parameter' => '_username', 'password_parameter' => '_password', 'csrf_parameter' => '_csrf_token', 'csrf_token_id' => 'authenticate', 'post_only' => true), $c, $g, NULL);
        $m->setRememberMeServices($h);

        return $this->services['security.firewall.map.context.main'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(array(0 => ${($_ = isset($this->services['security.channel_listener']) ? $this->services['security.channel_listener'] : $this->getSecurity_ChannelListenerService()) && false ?: '_'}, 1 => ${($_ = isset($this->services['security.context_listener.0']) ? $this->services['security.context_listener.0'] : $this->getSecurity_ContextListener_0Service()) && false ?: '_'}, 2 => $i, 3 => $m, 4 => new \Symfony\Component\Security\Http\Firewall\RememberMeListener($d, $h, $f, $c, $g, true, $j), 5 => new \Symfony\Component\Security\Http\Firewall\AnonymousAuthenticationListener($d, '58ecd215246dd3.81429637', $c, $f), 6 => ${($_ = isset($this->services['security.access_listener']) ? $this->services['security.access_listener'] : $this->getSecurity_AccessListenerService()) && false ?: '_'}), new \Symfony\Component\Security\Http\Firewall\ExceptionListener($d, ${($_ = isset($this->services['security.authentication.trust_resolver']) ? $this->services['security.authentication.trust_resolver'] : $this->getSecurity_Authentication_TrustResolverService()) && false ?: '_'}, $a, 'main', new \Symfony\Component\Security\Http\EntryPoint\FormAuthenticationEntryPoint($e, $a, 'sylius_shop_login', false), NULL, NULL, $c, false), new \Symfony\Bundle\SecurityBundle\Security\FirewallConfig('main', 'security.user_checker', 'security.request_matcher.b3056f0f803347e847d96183bd153ca130546888f46f3dba5936b2fe1f3c4a55cc4eac87', true, false, 'sylius.shop_user_provider.email_or_name_based', 'user', 'security.authentication.form_entry_point.main', NULL, NULL, array(0 => 'logout', 1 => 'form_login', 2 => 'remember_me', 3 => 'anonymous')));
    }

    /**
     * Gets the 'security.password_encoder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Encoder\UserPasswordEncoder A Symfony\Component\Security\Core\Encoder\UserPasswordEncoder instance
     */
    protected function getSecurity_PasswordEncoderService()
    {
        return $this->services['security.password_encoder'] = new \Symfony\Component\Security\Core\Encoder\UserPasswordEncoder($this->get('security.encoder_factory'));
    }

    /**
     * Gets the 'security.rememberme.response_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Http\RememberMe\ResponseListener A Symfony\Component\Security\Http\RememberMe\ResponseListener instance
     */
    protected function getSecurity_Rememberme_ResponseListenerService()
    {
        return $this->services['security.rememberme.response_listener'] = new \Symfony\Component\Security\Http\RememberMe\ResponseListener();
    }

    /**
     * Gets the 'security.token_storage' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage A Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage instance
     */
    protected function getSecurity_TokenStorageService()
    {
        return $this->services['security.token_storage'] = new \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage();
    }

    /**
     * Gets the 'security.validator.user_password' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Validator\Constraints\UserPasswordValidator A Symfony\Component\Security\Core\Validator\Constraints\UserPasswordValidator instance
     */
    protected function getSecurity_Validator_UserPasswordService()
    {
        return $this->services['security.validator.user_password'] = new \Symfony\Component\Security\Core\Validator\Constraints\UserPasswordValidator($this->get('security.token_storage'), $this->get('security.encoder_factory'));
    }

    /**
     * Gets the 'sensio_distribution.security_checker' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \SensioLabs\Security\SecurityChecker A SensioLabs\Security\SecurityChecker instance
     */
    protected function getSensioDistribution_SecurityCheckerService()
    {
        return $this->services['sensio_distribution.security_checker'] = new \SensioLabs\Security\SecurityChecker();
    }

    /**
     * Gets the 'sensio_distribution.security_checker.command' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \SensioLabs\Security\Command\SecurityCheckerCommand A SensioLabs\Security\Command\SecurityCheckerCommand instance
     */
    protected function getSensioDistribution_SecurityChecker_CommandService()
    {
        return $this->services['sensio_distribution.security_checker.command'] = new \SensioLabs\Security\Command\SecurityCheckerCommand($this->get('sensio_distribution.security_checker'));
    }

    /**
     * Gets the 'sensio_framework_extra.cache.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener A Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener instance
     */
    protected function getSensioFrameworkExtra_Cache_ListenerService()
    {
        return $this->services['sensio_framework_extra.cache.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener();
    }

    /**
     * Gets the 'sensio_framework_extra.controller.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener A Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener instance
     */
    protected function getSensioFrameworkExtra_Controller_ListenerService()
    {
        return $this->services['sensio_framework_extra.controller.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener($this->get('annotation_reader'));
    }

    /**
     * Gets the 'sensio_framework_extra.converter.datetime' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DateTimeParamConverter A Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DateTimeParamConverter instance
     */
    protected function getSensioFrameworkExtra_Converter_DatetimeService()
    {
        return $this->services['sensio_framework_extra.converter.datetime'] = new \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DateTimeParamConverter();
    }

    /**
     * Gets the 'sensio_framework_extra.converter.doctrine.orm' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DoctrineParamConverter A Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DoctrineParamConverter instance
     */
    protected function getSensioFrameworkExtra_Converter_Doctrine_OrmService()
    {
        return $this->services['sensio_framework_extra.converter.doctrine.orm'] = new \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DoctrineParamConverter($this->get('doctrine', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'sensio_framework_extra.converter.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener A Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener instance
     */
    protected function getSensioFrameworkExtra_Converter_ListenerService()
    {
        return $this->services['sensio_framework_extra.converter.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener($this->get('sensio_framework_extra.converter.manager'), true);
    }

    /**
     * Gets the 'sensio_framework_extra.converter.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\ParamConverterManager A Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\ParamConverterManager instance
     */
    protected function getSensioFrameworkExtra_Converter_ManagerService()
    {
        $this->services['sensio_framework_extra.converter.manager'] = $instance = new \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\ParamConverterManager();

        $instance->add($this->get('sensio_framework_extra.converter.doctrine.orm'), 0, 'doctrine.orm');
        $instance->add($this->get('sensio_framework_extra.converter.datetime'), 0, 'datetime');

        return $instance;
    }

    /**
     * Gets the 'sensio_framework_extra.security.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\SecurityListener A Sensio\Bundle\FrameworkExtraBundle\EventListener\SecurityListener instance
     */
    protected function getSensioFrameworkExtra_Security_ListenerService()
    {
        return $this->services['sensio_framework_extra.security.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\SecurityListener(NULL, new \Sensio\Bundle\FrameworkExtraBundle\Security\ExpressionLanguage(), ${($_ = isset($this->services['security.authentication.trust_resolver']) ? $this->services['security.authentication.trust_resolver'] : $this->getSecurity_Authentication_TrustResolverService()) && false ?: '_'}, ${($_ = isset($this->services['security.role_hierarchy']) ? $this->services['security.role_hierarchy'] : $this->getSecurity_RoleHierarchyService()) && false ?: '_'}, $this->get('security.token_storage', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('security.authorization_checker', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'sensio_framework_extra.view.guesser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser A Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser instance
     */
    protected function getSensioFrameworkExtra_View_GuesserService()
    {
        return $this->services['sensio_framework_extra.view.guesser'] = new \Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser($this->get('kernel'));
    }

    /**
     * Gets the 'sensio_framework_extra.view.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener A Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener instance
     */
    protected function getSensioFrameworkExtra_View_ListenerService()
    {
        return $this->services['sensio_framework_extra.view.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener($this);
    }

    /**
     * Gets the 'service_container' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @throws RuntimeException always since this service is expected to be injected dynamically
     */
    protected function getServiceContainerService()
    {
        throw new RuntimeException('You have requested a synthetic service ("service_container"). The DIC does not know how to construct this service.');
    }

    /**
     * Gets the 'session' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Session A Symfony\Component\HttpFoundation\Session\Session instance
     */
    protected function getSessionService()
    {
        return $this->services['session'] = new \Symfony\Component\HttpFoundation\Session\Session($this->get('session.storage.native'), new \Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag(), new \Symfony\Component\HttpFoundation\Session\Flash\FlashBag());
    }

    /**
     * Gets the 'session.save_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\SaveSessionListener A Symfony\Component\HttpKernel\EventListener\SaveSessionListener instance
     */
    protected function getSession_SaveListenerService()
    {
        return $this->services['session.save_listener'] = new \Symfony\Component\HttpKernel\EventListener\SaveSessionListener();
    }

    /**
     * Gets the 'session.storage.filesystem' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorage A Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorage instance
     */
    protected function getSession_Storage_FilesystemService()
    {
        return $this->services['session.storage.filesystem'] = new \Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorage((__DIR__.'/sessions'), 'MOCKSESSID', ${($_ = isset($this->services['session.storage.metadata_bag']) ? $this->services['session.storage.metadata_bag'] : $this->getSession_Storage_MetadataBagService()) && false ?: '_'});
    }

    /**
     * Gets the 'session.storage.native' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage A Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage instance
     */
    protected function getSession_Storage_NativeService()
    {
        return $this->services['session.storage.native'] = new \Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage(array('cookie_httponly' => true, 'gc_probability' => 1), NULL, ${($_ = isset($this->services['session.storage.metadata_bag']) ? $this->services['session.storage.metadata_bag'] : $this->getSession_Storage_MetadataBagService()) && false ?: '_'});
    }

    /**
     * Gets the 'session.storage.php_bridge' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorage A Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorage instance
     */
    protected function getSession_Storage_PhpBridgeService()
    {
        return $this->services['session.storage.php_bridge'] = new \Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorage(NULL, ${($_ = isset($this->services['session.storage.metadata_bag']) ? $this->services['session.storage.metadata_bag'] : $this->getSession_Storage_MetadataBagService()) && false ?: '_'});
    }

    /**
     * Gets the 'session_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\EventListener\SessionListener A Symfony\Bundle\FrameworkBundle\EventListener\SessionListener instance
     */
    protected function getSessionListenerService()
    {
        return $this->services['session_listener'] = new \Symfony\Bundle\FrameworkBundle\EventListener\SessionListener($this);
    }

    /**
     * Gets the 'sm.callback.cascade_transition' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \SM\Callback\CascadeTransitionCallback A SM\Callback\CascadeTransitionCallback instance
     */
    protected function getSm_Callback_CascadeTransitionService()
    {
        return $this->services['sm.callback.cascade_transition'] = new \SM\Callback\CascadeTransitionCallback($this->get('sm.factory'));
    }

    /**
     * Gets the 'sm.callback_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \winzou\Bundle\StateMachineBundle\Callback\ContainerAwareCallbackFactory A winzou\Bundle\StateMachineBundle\Callback\ContainerAwareCallbackFactory instance
     */
    protected function getSm_CallbackFactoryService()
    {
        return $this->services['sm.callback_factory'] = new \winzou\Bundle\StateMachineBundle\Callback\ContainerAwareCallbackFactory('winzou\\Bundle\\StateMachineBundle\\Callback\\ContainerAwareCallback', $this);
    }

    /**
     * Gets the 'sm.factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \SM\Factory\Factory A SM\Factory\Factory instance
     */
    protected function getSm_FactoryService()
    {
        return $this->services['sm.factory'] = new \SM\Factory\Factory(array('app_article' => array('class' => 'AppBundle\\Entity\\Article', 'property_path' => 'status', 'graph' => 'app_article', 'state_machine_class' => 'Sylius\\Component\\Resource\\StateMachine\\StateMachine', 'states' => array(0 => 'new', 1 => 'pending_review', 2 => 'pending_publication', 3 => 'published'), 'transitions' => array('ask_for_review' => array('from' => array(0 => 'new'), 'to' => 'pending_review'), 'ask_for_publication' => array('from' => array(0 => 'pending_review'), 'to' => 'pending_publication'), 'publish' => array('from' => array(0 => 'pending_publication'), 'to' => 'published')), 'callbacks' => array('after' => array('notify_reviewers' => array('on' => 'ask_for_review', 'do' => array(0 => '@app.notification_manager.article', 1 => 'notifyReviewers'), 'args' => array(0 => 'object'), 'disabled' => false, 'priority' => 0), 'notify_publishers' => array('on' => 'ask_for_publication', 'do' => array(0 => '@app.notification_manager.article', 1 => 'notifyPublishers'), 'args' => array(0 => 'object'), 'disabled' => false, 'priority' => 0), 'start' => array('on' => 'publish', 'do' => array(0 => '@app.publication_manager.article', 1 => 'start'), 'args' => array(0 => 'object'), 'disabled' => false, 'priority' => 0)), 'guard' => array(), 'before' => array())), 'sylius_product' => array('class' => 'AppBundle\\Entity\\Product', 'property_path' => 'status', 'graph' => 'sylius_product', 'state_machine_class' => 'Sylius\\Component\\Resource\\StateMachine\\StateMachine', 'states' => array(0 => 'new', 1 => 'pending_translation', 2 => 'pending_translation_changes', 3 => 'pending_review', 4 => 'pending_publication', 5 => 'published'), 'transitions' => array('ask_for_translation' => array('from' => array(0 => 'new'), 'to' => 'pending_translation'), 'ask_for_review' => array('from' => array(0 => 'new', 1 => 'pending_translation', 2 => 'pending_translation_changes'), 'to' => 'pending_review'), 'ask_for_translation_changes' => array('from' => array(0 => 'pending_review'), 'to' => 'pending_translation_changes'), 'ask_for_publication' => array('from' => array(0 => 'pending_review'), 'to' => 'pending_publication'), 'publish' => array('from' => array(0 => 'pending_publication'), 'to' => 'published')), 'callbacks' => array('after' => array('notify_translators' => array('on' => 'ask_for_translation', 'do' => array(0 => '@app.notification_manager.product', 1 => 'notifyTranslators'), 'args' => array(0 => 'object'), 'disabled' => false, 'priority' => 0), 'notify_reviewers' => array('on' => 'ask_for_review', 'do' => array(0 => '@app.notification_manager.product', 1 => 'notifyReviewers'), 'args' => array(0 => 'object'), 'disabled' => false, 'priority' => 0), 'notify_publishers' => array('on' => 'ask_for_publication', 'do' => array(0 => '@app.notification_manager.product', 1 => 'notifyPublishers'), 'args' => array(0 => 'object'), 'disabled' => false, 'priority' => 0)), 'guard' => array(), 'before' => array()))), $this->get('debug.event_dispatcher'), $this->get('sm.callback_factory'));
    }

    /**
     * Gets the 'sonata.block.cache.handler.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sonata\BlockBundle\Cache\HttpCacheHandler A Sonata\BlockBundle\Cache\HttpCacheHandler instance
     */
    protected function getSonata_Block_Cache_Handler_DefaultService()
    {
        return $this->services['sonata.block.cache.handler.default'] = new \Sonata\BlockBundle\Cache\HttpCacheHandler();
    }

    /**
     * Gets the 'sonata.block.cache.handler.noop' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sonata\BlockBundle\Cache\NoopHttpCacheHandler A Sonata\BlockBundle\Cache\NoopHttpCacheHandler instance
     */
    protected function getSonata_Block_Cache_Handler_NoopService()
    {
        return $this->services['sonata.block.cache.handler.noop'] = new \Sonata\BlockBundle\Cache\NoopHttpCacheHandler();
    }

    /**
     * Gets the 'sonata.block.context_manager.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sonata\BlockBundle\Block\BlockContextManager A Sonata\BlockBundle\Block\BlockContextManager instance
     */
    protected function getSonata_Block_ContextManager_DefaultService()
    {
        $this->services['sonata.block.context_manager.default'] = $instance = new \Sonata\BlockBundle\Block\BlockContextManager($this->get('sonata.block.loader.chain'), ${($_ = isset($this->services['sonata.block.manager']) ? $this->services['sonata.block.manager'] : $this->getSonata_Block_ManagerService()) && false ?: '_'}, array('by_type' => array('sonata.block.service.text' => 'sonata.cache.noop'), 'by_class' => array('Symfony\\Cmf\\Bundle\\BlockBundle\\Doctrine\\Phpcr\\RssBlock' => 'sonata.cache.noop')), $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE));

        $instance->addSettingsByClass('Symfony\\Cmf\\Bundle\\BlockBundle\\Doctrine\\Phpcr\\RssBlock', array('title' => 'Insert the rss title', 'url' => false, 'maxItems' => 10, 'template' => 'CmfBlockBundle:Block:block_rss.html.twig', 'itemClass' => 'Symfony\\Cmf\\Bundle\\BlockBundle\\Model\\FeedItem'), true);

        return $instance;
    }

    /**
     * Gets the 'sonata.block.exception.filter.debug_only' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sonata\BlockBundle\Exception\Filter\DebugOnlyFilter A Sonata\BlockBundle\Exception\Filter\DebugOnlyFilter instance
     */
    protected function getSonata_Block_Exception_Filter_DebugOnlyService()
    {
        return $this->services['sonata.block.exception.filter.debug_only'] = new \Sonata\BlockBundle\Exception\Filter\DebugOnlyFilter(true);
    }

    /**
     * Gets the 'sonata.block.exception.filter.ignore_block_exception' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sonata\BlockBundle\Exception\Filter\IgnoreClassFilter A Sonata\BlockBundle\Exception\Filter\IgnoreClassFilter instance
     */
    protected function getSonata_Block_Exception_Filter_IgnoreBlockExceptionService()
    {
        return $this->services['sonata.block.exception.filter.ignore_block_exception'] = new \Sonata\BlockBundle\Exception\Filter\IgnoreClassFilter('Sonata\\BlockBundle\\Exception\\BlockExceptionInterface');
    }

    /**
     * Gets the 'sonata.block.exception.filter.keep_all' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sonata\BlockBundle\Exception\Filter\KeepAllFilter A Sonata\BlockBundle\Exception\Filter\KeepAllFilter instance
     */
    protected function getSonata_Block_Exception_Filter_KeepAllService()
    {
        return $this->services['sonata.block.exception.filter.keep_all'] = new \Sonata\BlockBundle\Exception\Filter\KeepAllFilter();
    }

    /**
     * Gets the 'sonata.block.exception.filter.keep_none' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sonata\BlockBundle\Exception\Filter\KeepNoneFilter A Sonata\BlockBundle\Exception\Filter\KeepNoneFilter instance
     */
    protected function getSonata_Block_Exception_Filter_KeepNoneService()
    {
        return $this->services['sonata.block.exception.filter.keep_none'] = new \Sonata\BlockBundle\Exception\Filter\KeepNoneFilter();
    }

    /**
     * Gets the 'sonata.block.exception.renderer.inline' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sonata\BlockBundle\Exception\Renderer\InlineRenderer A Sonata\BlockBundle\Exception\Renderer\InlineRenderer instance
     */
    protected function getSonata_Block_Exception_Renderer_InlineService()
    {
        return $this->services['sonata.block.exception.renderer.inline'] = new \Sonata\BlockBundle\Exception\Renderer\InlineRenderer($this->get('templating'), 'SonataBlockBundle:Block:block_exception.html.twig');
    }

    /**
     * Gets the 'sonata.block.exception.renderer.inline_debug' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sonata\BlockBundle\Exception\Renderer\InlineDebugRenderer A Sonata\BlockBundle\Exception\Renderer\InlineDebugRenderer instance
     */
    protected function getSonata_Block_Exception_Renderer_InlineDebugService()
    {
        return $this->services['sonata.block.exception.renderer.inline_debug'] = new \Sonata\BlockBundle\Exception\Renderer\InlineDebugRenderer($this->get('templating'), 'SonataBlockBundle:Block:block_exception_debug.html.twig', true, true);
    }

    /**
     * Gets the 'sonata.block.exception.renderer.throw' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sonata\BlockBundle\Exception\Renderer\MonkeyThrowRenderer A Sonata\BlockBundle\Exception\Renderer\MonkeyThrowRenderer instance
     */
    protected function getSonata_Block_Exception_Renderer_ThrowService()
    {
        return $this->services['sonata.block.exception.renderer.throw'] = new \Sonata\BlockBundle\Exception\Renderer\MonkeyThrowRenderer();
    }

    /**
     * Gets the 'sonata.block.exception.strategy.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sonata\BlockBundle\Exception\Strategy\StrategyManager A Sonata\BlockBundle\Exception\Strategy\StrategyManager instance
     */
    protected function getSonata_Block_Exception_Strategy_ManagerService()
    {
        $this->services['sonata.block.exception.strategy.manager'] = $instance = new \Sonata\BlockBundle\Exception\Strategy\StrategyManager($this, array('debug_only' => 'sonata.block.exception.filter.debug_only', 'ignore_block_exception' => 'sonata.block.exception.filter.ignore_block_exception', 'keep_all' => 'sonata.block.exception.filter.keep_all', 'keep_none' => 'sonata.block.exception.filter.keep_none'), array('inline' => 'sonata.block.exception.renderer.inline', 'inline_debug' => 'sonata.block.exception.renderer.inline_debug', 'throw' => 'sonata.block.exception.renderer.throw'), array(), array());

        $instance->setDefaultFilter('debug_only');
        $instance->setDefaultRenderer('throw');

        return $instance;
    }

    /**
     * Gets the 'sonata.block.form.type.block' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sonata\BlockBundle\Form\Type\ServiceListType A Sonata\BlockBundle\Form\Type\ServiceListType instance
     */
    protected function getSonata_Block_Form_Type_BlockService()
    {
        return $this->services['sonata.block.form.type.block'] = new \Sonata\BlockBundle\Form\Type\ServiceListType(${($_ = isset($this->services['sonata.block.manager']) ? $this->services['sonata.block.manager'] : $this->getSonata_Block_ManagerService()) && false ?: '_'});
    }

    /**
     * Gets the 'sonata.block.form.type.container_template' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sonata\BlockBundle\Form\Type\ContainerTemplateType A Sonata\BlockBundle\Form\Type\ContainerTemplateType instance
     */
    protected function getSonata_Block_Form_Type_ContainerTemplateService()
    {
        return $this->services['sonata.block.form.type.container_template'] = new \Sonata\BlockBundle\Form\Type\ContainerTemplateType(array('SonataBlockBundle:Block:block_container.html.twig' => 'SonataBlockBundle default template'));
    }

    /**
     * Gets the 'sonata.block.loader.chain' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sonata\BlockBundle\Block\BlockLoaderChain A Sonata\BlockBundle\Block\BlockLoaderChain instance
     */
    protected function getSonata_Block_Loader_ChainService()
    {
        return $this->services['sonata.block.loader.chain'] = new \Sonata\BlockBundle\Block\BlockLoaderChain(array(0 => $this->get('sonata.block.loader.service'), 1 => $this->get('cmf.block.service')));
    }

    /**
     * Gets the 'sonata.block.loader.service' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sonata\BlockBundle\Block\Loader\ServiceLoader A Sonata\BlockBundle\Block\Loader\ServiceLoader instance
     */
    protected function getSonata_Block_Loader_ServiceService()
    {
        return $this->services['sonata.block.loader.service'] = new \Sonata\BlockBundle\Block\Loader\ServiceLoader(array(0 => 'sonata.block.service.text'));
    }

    /**
     * Gets the 'sonata.block.menu.registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sonata\BlockBundle\Menu\MenuRegistry A Sonata\BlockBundle\Menu\MenuRegistry instance
     */
    protected function getSonata_Block_Menu_RegistryService()
    {
        return $this->services['sonata.block.menu.registry'] = new \Sonata\BlockBundle\Menu\MenuRegistry(array());
    }

    /**
     * Gets the 'sonata.block.renderer.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sonata\BlockBundle\Block\BlockRenderer A Sonata\BlockBundle\Block\BlockRenderer instance
     */
    protected function getSonata_Block_Renderer_DefaultService()
    {
        return $this->services['sonata.block.renderer.default'] = new \Sonata\BlockBundle\Block\BlockRenderer(${($_ = isset($this->services['sonata.block.manager']) ? $this->services['sonata.block.manager'] : $this->getSonata_Block_ManagerService()) && false ?: '_'}, $this->get('sonata.block.exception.strategy.manager'), $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE), true);
    }

    /**
     * Gets the 'sonata.block.service.container' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sonata\BlockBundle\Block\Service\ContainerBlockService A Sonata\BlockBundle\Block\Service\ContainerBlockService instance
     */
    protected function getSonata_Block_Service_ContainerService()
    {
        return $this->services['sonata.block.service.container'] = new \Sonata\BlockBundle\Block\Service\ContainerBlockService('sonata.block.container', $this->get('templating'));
    }

    /**
     * Gets the 'sonata.block.service.empty' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sonata\BlockBundle\Block\Service\EmptyBlockService A Sonata\BlockBundle\Block\Service\EmptyBlockService instance
     */
    protected function getSonata_Block_Service_EmptyService()
    {
        return $this->services['sonata.block.service.empty'] = new \Sonata\BlockBundle\Block\Service\EmptyBlockService('sonata.block.empty', $this->get('templating'));
    }

    /**
     * Gets the 'sonata.block.service.menu' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sonata\BlockBundle\Block\Service\MenuBlockService A Sonata\BlockBundle\Block\Service\MenuBlockService instance
     */
    protected function getSonata_Block_Service_MenuService()
    {
        return $this->services['sonata.block.service.menu'] = new \Sonata\BlockBundle\Block\Service\MenuBlockService('sonata.block.menu', $this->get('templating'), $this->get('knp_menu.menu_provider'), $this->get('sonata.block.menu.registry'));
    }

    /**
     * Gets the 'sonata.block.service.rss' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sonata\BlockBundle\Block\Service\RssBlockService A Sonata\BlockBundle\Block\Service\RssBlockService instance
     */
    protected function getSonata_Block_Service_RssService()
    {
        return $this->services['sonata.block.service.rss'] = new \Sonata\BlockBundle\Block\Service\RssBlockService('sonata.block.service.rss', $this->get('templating'));
    }

    /**
     * Gets the 'sonata.block.service.template' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sonata\BlockBundle\Block\Service\TemplateBlockService A Sonata\BlockBundle\Block\Service\TemplateBlockService instance
     */
    protected function getSonata_Block_Service_TemplateService()
    {
        return $this->services['sonata.block.service.template'] = new \Sonata\BlockBundle\Block\Service\TemplateBlockService('sonata.block.template', $this->get('templating'));
    }

    /**
     * Gets the 'sonata.block.service.text' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sonata\BlockBundle\Block\Service\TextBlockService A Sonata\BlockBundle\Block\Service\TextBlockService instance
     */
    protected function getSonata_Block_Service_TextService()
    {
        return $this->services['sonata.block.service.text'] = new \Sonata\BlockBundle\Block\Service\TextBlockService('sonata.block.text', $this->get('templating'));
    }

    /**
     * Gets the 'sonata.block.templating.helper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sonata\BlockBundle\Templating\Helper\BlockHelper A Sonata\BlockBundle\Templating\Helper\BlockHelper instance
     */
    protected function getSonata_Block_Templating_HelperService()
    {
        return $this->services['sonata.block.templating.helper'] = new \Sonata\BlockBundle\Templating\Helper\BlockHelper(${($_ = isset($this->services['sonata.block.manager']) ? $this->services['sonata.block.manager'] : $this->getSonata_Block_ManagerService()) && false ?: '_'}, array('by_type' => array('sonata.block.service.text' => 'sonata.cache.noop'), 'by_class' => array('Symfony\\Cmf\\Bundle\\BlockBundle\\Doctrine\\Phpcr\\RssBlock' => 'sonata.cache.noop')), $this->get('sonata.block.renderer.default'), $this->get('sonata.block.context_manager.default'), $this->get('debug.event_dispatcher'), NULL, $this->get('sonata.block.cache.handler.default', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('debug.stopwatch', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'sonata.block.twig.global' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sonata\BlockBundle\Twig\GlobalVariables A Sonata\BlockBundle\Twig\GlobalVariables instance
     */
    protected function getSonata_Block_Twig_GlobalService()
    {
        return $this->services['sonata.block.twig.global'] = new \Sonata\BlockBundle\Twig\GlobalVariables(array('block_base' => 'CmfBlockBundle:Block:block_base.html.twig', 'block_container' => NULL));
    }

    /**
     * Gets the 'stof_doctrine_extensions.uploadable.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Stof\DoctrineExtensionsBundle\Uploadable\UploadableManager A Stof\DoctrineExtensionsBundle\Uploadable\UploadableManager instance
     */
    protected function getStofDoctrineExtensions_Uploadable_ManagerService()
    {
        $a = new \Gedmo\Uploadable\UploadableListener(new \Stof\DoctrineExtensionsBundle\Uploadable\MimeTypeGuesserAdapter());
        $a->setAnnotationReader($this->get('annotation_reader'));
        $a->setDefaultFileInfoClass('Stof\\DoctrineExtensionsBundle\\Uploadable\\UploadedFileInfo');

        return $this->services['stof_doctrine_extensions.uploadable.manager'] = new \Stof\DoctrineExtensionsBundle\Uploadable\UploadableManager($a, 'Stof\\DoctrineExtensionsBundle\\Uploadable\\UploadedFileInfo');
    }

    /**
     * Gets the 'streamed_response_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\StreamedResponseListener A Symfony\Component\HttpKernel\EventListener\StreamedResponseListener instance
     */
    protected function getStreamedResponseListenerService()
    {
        return $this->services['streamed_response_listener'] = new \Symfony\Component\HttpKernel\EventListener\StreamedResponseListener();
    }

    /**
     * Gets the 'swiftmailer.email_sender.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener A Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener instance
     */
    protected function getSwiftmailer_EmailSender_ListenerService()
    {
        return $this->services['swiftmailer.email_sender.listener'] = new \Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener($this, $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'swiftmailer.mailer.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Swift_Mailer A Swift_Mailer instance
     */
    protected function getSwiftmailer_Mailer_DefaultService()
    {
        return $this->services['swiftmailer.mailer.default'] = new \Swift_Mailer($this->get('swiftmailer.mailer.default.transport'));
    }

    /**
     * Gets the 'swiftmailer.mailer.default.plugin.messagelogger' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Swift_Plugins_MessageLogger A Swift_Plugins_MessageLogger instance
     */
    protected function getSwiftmailer_Mailer_Default_Plugin_MessageloggerService()
    {
        return $this->services['swiftmailer.mailer.default.plugin.messagelogger'] = new \Swift_Plugins_MessageLogger();
    }

    /**
     * Gets the 'swiftmailer.mailer.default.spool' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Swift_MemorySpool A Swift_MemorySpool instance
     */
    protected function getSwiftmailer_Mailer_Default_SpoolService()
    {
        return $this->services['swiftmailer.mailer.default.spool'] = new \Swift_MemorySpool();
    }

    /**
     * Gets the 'swiftmailer.mailer.default.transport' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Swift_Transport_SpoolTransport A Swift_Transport_SpoolTransport instance
     */
    protected function getSwiftmailer_Mailer_Default_TransportService()
    {
        $this->services['swiftmailer.mailer.default.transport'] = $instance = new \Swift_Transport_SpoolTransport(${($_ = isset($this->services['swiftmailer.mailer.default.transport.eventdispatcher']) ? $this->services['swiftmailer.mailer.default.transport.eventdispatcher'] : $this->getSwiftmailer_Mailer_Default_Transport_EventdispatcherService()) && false ?: '_'}, $this->get('swiftmailer.mailer.default.spool'));

        $instance->registerPlugin($this->get('swiftmailer.mailer.default.plugin.messagelogger'));

        return $instance;
    }

    /**
     * Gets the 'swiftmailer.mailer.default.transport.real' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Swift_Transport_EsmtpTransport A Swift_Transport_EsmtpTransport instance
     */
    protected function getSwiftmailer_Mailer_Default_Transport_RealService()
    {
        $a = new \Swift_Transport_Esmtp_AuthHandler(array(0 => new \Swift_Transport_Esmtp_Auth_CramMd5Authenticator(), 1 => new \Swift_Transport_Esmtp_Auth_LoginAuthenticator(), 2 => new \Swift_Transport_Esmtp_Auth_PlainAuthenticator()));
        $a->setUsername('22800faeb78cd66e3');
        $a->setPassword('3b7c020fb94050');
        $a->setAuthMode('cram-md5');

        $this->services['swiftmailer.mailer.default.transport.real'] = $instance = new \Swift_Transport_EsmtpTransport(new \Swift_Transport_StreamBuffer(new \Swift_StreamFilters_StringReplacementFilterFactory()), array(0 => $a), ${($_ = isset($this->services['swiftmailer.mailer.default.transport.eventdispatcher']) ? $this->services['swiftmailer.mailer.default.transport.eventdispatcher'] : $this->getSwiftmailer_Mailer_Default_Transport_EventdispatcherService()) && false ?: '_'});

        $instance->setHost('mailtrap.io');
        $instance->setPort(2525);
        $instance->setEncryption(NULL);
        $instance->setTimeout(30);
        $instance->setSourceIp(NULL);
        (new \Symfony\Bundle\SwiftmailerBundle\DependencyInjection\SmtpTransportConfigurator(NULL, ${($_ = isset($this->services['router.request_context']) ? $this->services['router.request_context'] : $this->getRouter_RequestContextService()) && false ?: '_'}))->configure($instance);

        return $instance;
    }

    /**
     * Gets the 'sylius.admin_oauth_user.pin_generator.password_reset' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\User\Security\Generator\UniquePinGenerator A Sylius\Component\User\Security\Generator\UniquePinGenerator instance
     */
    protected function getSylius_AdminOauthUser_PinGenerator_PasswordResetService()
    {
        return $this->services['sylius.admin_oauth_user.pin_generator.password_reset'] = new \Sylius\Component\User\Security\Generator\UniquePinGenerator($this->get('sylius.admin_oauth_user.pin_uniqueness_checker.password_reset'), 4);
    }

    /**
     * Gets the 'sylius.admin_oauth_user.pin_uniqueness_checker.password_reset' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\User\Security\Checker\TokenUniquenessChecker A Sylius\Component\User\Security\Checker\TokenUniquenessChecker instance
     */
    protected function getSylius_AdminOauthUser_PinUniquenessChecker_PasswordResetService()
    {
        return $this->services['sylius.admin_oauth_user.pin_uniqueness_checker.password_reset'] = new \Sylius\Component\User\Security\Checker\TokenUniquenessChecker($this->get('sylius.repository.admin_oauth_user'), 'passwordResetToken');
    }

    /**
     * Gets the 'sylius.admin_oauth_user.reloader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\UserBundle\Reloader\UserReloader A Sylius\Bundle\UserBundle\Reloader\UserReloader instance
     */
    protected function getSylius_AdminOauthUser_ReloaderService()
    {
        return $this->services['sylius.admin_oauth_user.reloader'] = new \Sylius\Bundle\UserBundle\Reloader\UserReloader($this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'sylius.admin_oauth_user.token_generator.email_verification' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\User\Security\Generator\UniqueTokenGenerator A Sylius\Component\User\Security\Generator\UniqueTokenGenerator instance
     */
    protected function getSylius_AdminOauthUser_TokenGenerator_EmailVerificationService()
    {
        return $this->services['sylius.admin_oauth_user.token_generator.email_verification'] = new \Sylius\Component\User\Security\Generator\UniqueTokenGenerator($this->get('sylius.admin_oauth_user.token_uniqueness_checker.email_verification'), 16);
    }

    /**
     * Gets the 'sylius.admin_oauth_user.token_generator.password_reset' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\User\Security\Generator\UniqueTokenGenerator A Sylius\Component\User\Security\Generator\UniqueTokenGenerator instance
     */
    protected function getSylius_AdminOauthUser_TokenGenerator_PasswordResetService()
    {
        return $this->services['sylius.admin_oauth_user.token_generator.password_reset'] = new \Sylius\Component\User\Security\Generator\UniqueTokenGenerator($this->get('sylius.admin_oauth_user.token_uniqueness_checker.password_reset'), 16);
    }

    /**
     * Gets the 'sylius.admin_oauth_user.token_uniqueness_checker.email_verification' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\User\Security\Checker\TokenUniquenessChecker A Sylius\Component\User\Security\Checker\TokenUniquenessChecker instance
     */
    protected function getSylius_AdminOauthUser_TokenUniquenessChecker_EmailVerificationService()
    {
        return $this->services['sylius.admin_oauth_user.token_uniqueness_checker.email_verification'] = new \Sylius\Component\User\Security\Checker\TokenUniquenessChecker($this->get('sylius.repository.admin_oauth_user'), 'emailVerificationToken');
    }

    /**
     * Gets the 'sylius.admin_oauth_user.token_uniqueness_checker.password_reset' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\User\Security\Checker\TokenUniquenessChecker A Sylius\Component\User\Security\Checker\TokenUniquenessChecker instance
     */
    protected function getSylius_AdminOauthUser_TokenUniquenessChecker_PasswordResetService()
    {
        return $this->services['sylius.admin_oauth_user.token_uniqueness_checker.password_reset'] = new \Sylius\Component\User\Security\Checker\TokenUniquenessChecker($this->get('sylius.repository.admin_oauth_user'), 'passwordResetToken');
    }

    /**
     * Gets the 'sylius.admin_oauth_user_provider.email_based' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Sylius\Bundle\UserBundle\Provider\EmailProvider A Sylius\Bundle\UserBundle\Provider\EmailProvider instance
     */
    public function getSylius_AdminOauthUserProvider_EmailBasedService($lazyLoad = true)
    {
        if ($lazyLoad) {

            return $this->services['sylius.admin_oauth_user_provider.email_based'] = SyliusBundleUserBundleProviderEmailProvider_000000004b5112d0000000000f6225f6877f40b66baaf9ca0d0afe40b8a3d26d::staticProxyConstructor(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) {
                    $wrappedInstance = $this->getSylius_AdminOauthUserProvider_EmailBasedService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Sylius\Bundle\UserBundle\Provider\EmailProvider('Sylius\\Component\\User\\Model\\UserOAuth', $this->get('sylius.repository.admin_oauth_user'), $this->get('sylius.canonicalizer'));
    }

    /**
     * Gets the 'sylius.admin_oauth_user_provider.email_or_name_based' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Sylius\Bundle\UserBundle\Provider\UsernameOrEmailProvider A Sylius\Bundle\UserBundle\Provider\UsernameOrEmailProvider instance
     */
    public function getSylius_AdminOauthUserProvider_EmailOrNameBasedService($lazyLoad = true)
    {
        if ($lazyLoad) {

            return $this->services['sylius.admin_oauth_user_provider.email_or_name_based'] = SyliusBundleUserBundleProviderUsernameOrEmailProvider_000000004b5112ce000000000f6225f6877f40b66baaf9ca0d0afe40b8a3d26d::staticProxyConstructor(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) {
                    $wrappedInstance = $this->getSylius_AdminOauthUserProvider_EmailOrNameBasedService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Sylius\Bundle\UserBundle\Provider\UsernameOrEmailProvider('Sylius\\Component\\User\\Model\\UserOAuth', $this->get('sylius.repository.admin_oauth_user'), $this->get('sylius.canonicalizer'));
    }

    /**
     * Gets the 'sylius.admin_oauth_user_provider.name_based' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Sylius\Bundle\UserBundle\Provider\UsernameProvider A Sylius\Bundle\UserBundle\Provider\UsernameProvider instance
     */
    public function getSylius_AdminOauthUserProvider_NameBasedService($lazyLoad = true)
    {
        if ($lazyLoad) {

            return $this->services['sylius.admin_oauth_user_provider.name_based'] = SyliusBundleUserBundleProviderUsernameProvider_000000004b5112d1000000000f6225f6877f40b66baaf9ca0d0afe40b8a3d26d::staticProxyConstructor(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) {
                    $wrappedInstance = $this->getSylius_AdminOauthUserProvider_NameBasedService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Sylius\Bundle\UserBundle\Provider\UsernameProvider('Sylius\\Component\\User\\Model\\UserOAuth', $this->get('sylius.repository.admin_oauth_user'), $this->get('sylius.canonicalizer'));
    }

    /**
     * Gets the 'sylius.attribute_type.checkbox' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Attribute\AttributeType\CheckboxAttributeType A Sylius\Component\Attribute\AttributeType\CheckboxAttributeType instance
     */
    protected function getSylius_AttributeType_CheckboxService()
    {
        return $this->services['sylius.attribute_type.checkbox'] = new \Sylius\Component\Attribute\AttributeType\CheckboxAttributeType();
    }

    /**
     * Gets the 'sylius.attribute_type.date' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Attribute\AttributeType\DateAttributeType A Sylius\Component\Attribute\AttributeType\DateAttributeType instance
     */
    protected function getSylius_AttributeType_DateService()
    {
        return $this->services['sylius.attribute_type.date'] = new \Sylius\Component\Attribute\AttributeType\DateAttributeType();
    }

    /**
     * Gets the 'sylius.attribute_type.datetime' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Attribute\AttributeType\DatetimeAttributeType A Sylius\Component\Attribute\AttributeType\DatetimeAttributeType instance
     */
    protected function getSylius_AttributeType_DatetimeService()
    {
        return $this->services['sylius.attribute_type.datetime'] = new \Sylius\Component\Attribute\AttributeType\DatetimeAttributeType();
    }

    /**
     * Gets the 'sylius.attribute_type.integer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Attribute\AttributeType\IntegerAttributeType A Sylius\Component\Attribute\AttributeType\IntegerAttributeType instance
     */
    protected function getSylius_AttributeType_IntegerService()
    {
        return $this->services['sylius.attribute_type.integer'] = new \Sylius\Component\Attribute\AttributeType\IntegerAttributeType();
    }

    /**
     * Gets the 'sylius.attribute_type.percent' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Attribute\AttributeType\PercentAttributeType A Sylius\Component\Attribute\AttributeType\PercentAttributeType instance
     */
    protected function getSylius_AttributeType_PercentService()
    {
        return $this->services['sylius.attribute_type.percent'] = new \Sylius\Component\Attribute\AttributeType\PercentAttributeType();
    }

    /**
     * Gets the 'sylius.attribute_type.text' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Attribute\AttributeType\TextAttributeType A Sylius\Component\Attribute\AttributeType\TextAttributeType instance
     */
    protected function getSylius_AttributeType_TextService()
    {
        return $this->services['sylius.attribute_type.text'] = new \Sylius\Component\Attribute\AttributeType\TextAttributeType();
    }

    /**
     * Gets the 'sylius.attribute_type.textarea' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Attribute\AttributeType\TextareaAttributeType A Sylius\Component\Attribute\AttributeType\TextareaAttributeType instance
     */
    protected function getSylius_AttributeType_TextareaService()
    {
        return $this->services['sylius.attribute_type.textarea'] = new \Sylius\Component\Attribute\AttributeType\TextareaAttributeType();
    }

    /**
     * Gets the 'sylius.average_rating_calculator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Review\Calculator\AverageRatingCalculator A Sylius\Component\Review\Calculator\AverageRatingCalculator instance
     */
    protected function getSylius_AverageRatingCalculatorService()
    {
        return $this->services['sylius.average_rating_calculator'] = new \Sylius\Component\Review\Calculator\AverageRatingCalculator();
    }

    /**
     * Gets the 'sylius.average_rating_updater' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ReviewBundle\Updater\AverageRatingUpdater A Sylius\Bundle\ReviewBundle\Updater\AverageRatingUpdater instance
     */
    protected function getSylius_AverageRatingUpdaterService()
    {
        return $this->services['sylius.average_rating_updater'] = new \Sylius\Bundle\ReviewBundle\Updater\AverageRatingUpdater($this->get('sylius.average_rating_calculator'), $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'sylius.canonicalizer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\User\Canonicalizer\Canonicalizer A Sylius\Component\User\Canonicalizer\Canonicalizer instance
     */
    protected function getSylius_CanonicalizerService()
    {
        return $this->services['sylius.canonicalizer'] = new \Sylius\Component\User\Canonicalizer\Canonicalizer();
    }

    /**
     * Gets the 'sylius.checker.product_variants_parity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Product\Checker\ProductVariantsParityChecker A Sylius\Component\Product\Checker\ProductVariantsParityChecker instance
     */
    protected function getSylius_Checker_ProductVariantsParityService()
    {
        return $this->services['sylius.checker.product_variants_parity'] = new \Sylius\Component\Product\Checker\ProductVariantsParityChecker();
    }

    /**
     * Gets the 'sylius.console.command.resource_debug' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Command\DebugResourceCommand A Sylius\Bundle\ResourceBundle\Command\DebugResourceCommand instance
     */
    protected function getSylius_Console_Command_ResourceDebugService()
    {
        return $this->services['sylius.console.command.resource_debug'] = new \Sylius\Bundle\ResourceBundle\Command\DebugResourceCommand(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'});
    }

    /**
     * Gets the 'sylius.context.locale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Locale\Context\CompositeLocaleContext A Sylius\Component\Locale\Context\CompositeLocaleContext instance
     */
    protected function getSylius_Context_LocaleService()
    {
        return $this->services['sylius.context.locale'] = new \Sylius\Component\Locale\Context\CompositeLocaleContext();
    }

    /**
     * Gets the 'sylius.controller.admin_oauth_user' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getSylius_Controller_AdminOauthUserService()
    {
        $this->services['sylius.controller.admin_oauth_user'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('sylius.admin_oauth_user'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('sylius.repository.admin_oauth_user'), $this->get('sylius.factory.admin_oauth_user'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'sylius.controller.customer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getSylius_Controller_CustomerService()
    {
        $this->services['sylius.controller.customer'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('sylius.customer'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('sylius.repository.customer'), $this->get('sylius.factory.customer'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'sylius.controller.customer_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getSylius_Controller_CustomerGroupService()
    {
        $this->services['sylius.controller.customer_group'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('sylius.customer_group'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('sylius.repository.customer_group'), $this->get('sylius.factory.customer_group'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'sylius.controller.locale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getSylius_Controller_LocaleService()
    {
        $this->services['sylius.controller.locale'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('sylius.locale'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('sylius.repository.locale'), $this->get('sylius.factory.locale'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'sylius.controller.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Controller\ProductController A AppBundle\Controller\ProductController instance
     */
    protected function getSylius_Controller_ProductService()
    {
        $this->services['sylius.controller.product'] = $instance = new \AppBundle\Controller\ProductController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('sylius.product'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('sylius.repository.product'), $this->get('sylius.factory.product'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'sylius.controller.product_association' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getSylius_Controller_ProductAssociationService()
    {
        $this->services['sylius.controller.product_association'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('sylius.product_association'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('sylius.repository.product_association'), $this->get('sylius.factory.product_association'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'sylius.controller.product_association_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getSylius_Controller_ProductAssociationTypeService()
    {
        $this->services['sylius.controller.product_association_type'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('sylius.product_association_type'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('sylius.repository.product_association_type'), $this->get('sylius.factory.product_association_type'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'sylius.controller.product_attribute' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ProductBundle\Controller\ProductAttributeController A Sylius\Bundle\ProductBundle\Controller\ProductAttributeController instance
     */
    protected function getSylius_Controller_ProductAttributeService()
    {
        $this->services['sylius.controller.product_attribute'] = $instance = new \Sylius\Bundle\ProductBundle\Controller\ProductAttributeController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('sylius.product_attribute'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('sylius.repository.product_attribute'), $this->get('sylius.factory.product_attribute'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'sylius.controller.product_attribute_translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getSylius_Controller_ProductAttributeTranslationService()
    {
        $this->services['sylius.controller.product_attribute_translation'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('sylius.product_attribute_translation'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('sylius.repository.product_attribute_translation'), $this->get('sylius.factory.product_attribute_translation'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'sylius.controller.product_attribute_value' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getSylius_Controller_ProductAttributeValueService()
    {
        $this->services['sylius.controller.product_attribute_value'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('sylius.product_attribute_value'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('sylius.repository.product_attribute_value'), $this->get('sylius.factory.product_attribute_value'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'sylius.controller.product_option' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getSylius_Controller_ProductOptionService()
    {
        $this->services['sylius.controller.product_option'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('sylius.product_option'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('sylius.repository.product_option'), $this->get('sylius.factory.product_option'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'sylius.controller.product_option_translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getSylius_Controller_ProductOptionTranslationService()
    {
        $this->services['sylius.controller.product_option_translation'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('sylius.product_option_translation'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('sylius.repository.product_option_translation'), $this->get('sylius.factory.product_option_translation'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'sylius.controller.product_option_value' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getSylius_Controller_ProductOptionValueService()
    {
        $this->services['sylius.controller.product_option_value'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('sylius.product_option_value'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('sylius.repository.product_option_value'), $this->get('sylius.factory.product_option_value'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'sylius.controller.product_option_value_translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getSylius_Controller_ProductOptionValueTranslationService()
    {
        $this->services['sylius.controller.product_option_value_translation'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('sylius.product_option_value_translation'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('sylius.repository.product_option_value_translation'), $this->get('sylius.factory.product_option_value_translation'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'sylius.controller.product_review' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Controller\ProductReviewController A AppBundle\Controller\ProductReviewController instance
     */
    protected function getSylius_Controller_ProductReviewService()
    {
        $this->services['sylius.controller.product_review'] = $instance = new \AppBundle\Controller\ProductReviewController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('sylius.product_review'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('sylius.repository.product_review'), $this->get('sylius.factory.product_review'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'sylius.controller.product_slug' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ProductBundle\Controller\ProductSlugController A Sylius\Bundle\ProductBundle\Controller\ProductSlugController instance
     */
    protected function getSylius_Controller_ProductSlugService()
    {
        $this->services['sylius.controller.product_slug'] = $instance = new \Sylius\Bundle\ProductBundle\Controller\ProductSlugController();

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'sylius.controller.product_translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getSylius_Controller_ProductTranslationService()
    {
        $this->services['sylius.controller.product_translation'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('sylius.product_translation'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('sylius.repository.product_translation'), $this->get('sylius.factory.product_translation'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'sylius.controller.product_variant' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Controller\ProductVariantController A AppBundle\Controller\ProductVariantController instance
     */
    protected function getSylius_Controller_ProductVariantService()
    {
        $this->services['sylius.controller.product_variant'] = $instance = new \AppBundle\Controller\ProductVariantController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('sylius.product_variant'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('sylius.repository.product_variant'), $this->get('sylius.factory.product_variant'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'sylius.controller.security' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\UiBundle\Controller\SecurityController A Sylius\Bundle\UiBundle\Controller\SecurityController instance
     */
    protected function getSylius_Controller_SecurityService()
    {
        return $this->services['sylius.controller.security'] = new \Sylius\Bundle\UiBundle\Controller\SecurityController($this->get('security.authentication_utils'), $this->get('form.factory'), $this->get('templating'));
    }

    /**
     * Gets the 'sylius.controller.shop_user' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Controller\UserController A AppBundle\Controller\UserController instance
     */
    protected function getSylius_Controller_ShopUserService()
    {
        $this->services['sylius.controller.shop_user'] = $instance = new \AppBundle\Controller\UserController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('sylius.shop_user'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('sylius.repository.shop_user'), $this->get('sylius.factory.shop_user'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'sylius.controller.taxon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Controller\TaxonController A AppBundle\Controller\TaxonController instance
     */
    protected function getSylius_Controller_TaxonService()
    {
        $this->services['sylius.controller.taxon'] = $instance = new \AppBundle\Controller\TaxonController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('sylius.taxon'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('sylius.repository.taxon'), $this->get('sylius.factory.taxon'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'sylius.controller.taxon_slug' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\TaxonomyBundle\Controller\TaxonSlugController A Sylius\Bundle\TaxonomyBundle\Controller\TaxonSlugController instance
     */
    protected function getSylius_Controller_TaxonSlugService()
    {
        $this->services['sylius.controller.taxon_slug'] = $instance = new \Sylius\Bundle\TaxonomyBundle\Controller\TaxonSlugController();

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'sylius.controller.taxon_translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceController A Sylius\Bundle\ResourceBundle\Controller\ResourceController instance
     */
    protected function getSylius_Controller_TaxonTranslationService()
    {
        $this->services['sylius.controller.taxon_translation'] = $instance = new \Sylius\Bundle\ResourceBundle\Controller\ResourceController(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}->get('sylius.taxon_translation'), ${($_ = isset($this->services['sylius.resource_controller.request_configuration_factory']) ? $this->services['sylius.resource_controller.request_configuration_factory'] : $this->getSylius_ResourceController_RequestConfigurationFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.view_handler']) ? $this->services['sylius.resource_controller.view_handler'] : $this->getSylius_ResourceController_ViewHandlerService()) && false ?: '_'}, $this->get('sylius.repository.taxon_translation'), $this->get('sylius.factory.taxon_translation'), ${($_ = isset($this->services['sylius.resource_controller.new_resource_factory']) ? $this->services['sylius.resource_controller.new_resource_factory'] : $this->getSylius_ResourceController_NewResourceFactoryService()) && false ?: '_'}, $this->get('doctrine.orm.default_entity_manager'), ${($_ = isset($this->services['sylius.resource_controller.single_resource_provider']) ? $this->services['sylius.resource_controller.single_resource_provider'] : $this->getSylius_ResourceController_SingleResourceProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.resources_collection_provider']) ? $this->services['sylius.resource_controller.resources_collection_provider'] : $this->getSylius_ResourceController_ResourcesCollectionProviderService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.form_factory']) ? $this->services['sylius.resource_controller.form_factory'] : $this->getSylius_ResourceController_FormFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.redirect_handler']) ? $this->services['sylius.resource_controller.redirect_handler'] : $this->getSylius_ResourceController_RedirectHandlerService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.flash_helper']) ? $this->services['sylius.resource_controller.flash_helper'] : $this->getSylius_ResourceController_FlashHelperService()) && false ?: '_'}, $this->get('sylius.resource_controller.authorization_checker'), ${($_ = isset($this->services['sylius.resource_controller.event_dispatcher']) ? $this->services['sylius.resource_controller.event_dispatcher'] : $this->getSylius_ResourceController_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['sylius.resource_controller.state_machine']) ? $this->services['sylius.resource_controller.state_machine'] : $this->getSylius_ResourceController_StateMachineService()) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'sylius.controller.user_security' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\UserBundle\Controller\SecurityController A Sylius\Bundle\UserBundle\Controller\SecurityController instance
     */
    protected function getSylius_Controller_UserSecurityService()
    {
        $this->services['sylius.controller.user_security'] = $instance = new \Sylius\Bundle\UserBundle\Controller\SecurityController();

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'sylius.custom_grid_renderer.twig' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Grid\Renderer\TwigGridRenderer A Sylius\Bundle\ResourceBundle\Grid\Renderer\TwigGridRenderer instance
     */
    protected function getSylius_CustomGridRenderer_TwigService()
    {
        $a = $this->get('twig');

        $b = new \Sylius\Bundle\GridBundle\Form\Registry\FormTypeRegistry();
        $b->add('string', 'default', 'Sylius\\Bundle\\GridBundle\\Form\\Type\\Filter\\StringFilterType');
        $b->add('boolean', 'default', 'Sylius\\Bundle\\GridBundle\\Form\\Type\\Filter\\BooleanFilterType');

        return $this->services['sylius.custom_grid_renderer.twig'] = new \Sylius\Bundle\ResourceBundle\Grid\Renderer\TwigGridRenderer(new \Sylius\Bundle\GridBundle\Renderer\TwigGridRenderer($a, $this->get('sylius.registry.grid_field'), $this->get('form.factory'), $b, 'SyliusGridBundle::_grid.html.twig', array('show' => 'backend/grid/action/show.html.twig', 'create' => 'backend/grid/action/create.html.twig', 'update' => 'backend/grid/action/update.html.twig', 'delete' => 'backend/grid/action/delete.html.twig', 'create_product' => 'backend/product/grid/action/createProduct.html.twig', 'manage_articles' => 'backend/product/grid/action/manageArticles.html.twig', 'manage_variants' => 'backend/product/grid/action/manageVariants.html.twig', 'list_posts' => 'backend/topic/grid/action/posts.html.twig', 'list_taxons' => 'backend/taxon/grid/action/taxons.html.twig', 'update_product_variant_positions' => 'backend/product_variant/grid/action/updatePositions.html.twig'), array('string' => 'backend/grid/filter/string.html.twig', 'boolean' => 'backend/grid/filter/boolean.html.twig')), $a, new \Sylius\Bundle\ResourceBundle\Grid\Parser\OptionsParser($this, ${($_ = isset($this->services['sylius.expression_language']) ? $this->services['sylius.expression_language'] : $this->getSylius_ExpressionLanguageService()) && false ?: '_'}, $this->get('property_accessor')), array('show' => 'backend/grid/action/show.html.twig', 'create' => 'backend/grid/action/create.html.twig', 'update' => 'backend/grid/action/update.html.twig', 'delete' => 'backend/grid/action/delete.html.twig', 'create_product' => 'backend/product/grid/action/createProduct.html.twig', 'manage_articles' => 'backend/product/grid/action/manageArticles.html.twig', 'manage_variants' => 'backend/product/grid/action/manageVariants.html.twig', 'list_posts' => 'backend/topic/grid/action/posts.html.twig', 'list_taxons' => 'backend/taxon/grid/action/taxons.html.twig', 'update_product_variant_positions' => 'backend/product_variant/grid/action/updatePositions.html.twig'));
    }

    /**
     * Gets the 'sylius.doctrine.orm.event_subscriber.load_metadata.attribute' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\AttributeBundle\Doctrine\ORM\Subscriber\LoadMetadataSubscriber A Sylius\Bundle\AttributeBundle\Doctrine\ORM\Subscriber\LoadMetadataSubscriber instance
     */
    protected function getSylius_Doctrine_Orm_EventSubscriber_LoadMetadata_AttributeService()
    {
        return $this->services['sylius.doctrine.orm.event_subscriber.load_metadata.attribute'] = new \Sylius\Bundle\AttributeBundle\Doctrine\ORM\Subscriber\LoadMetadataSubscriber(array('product' => array('subject' => 'AppBundle\\Entity\\Product', 'attribute' => array('classes' => array('model' => 'Sylius\\Component\\Product\\Model\\ProductAttribute', 'interface' => 'Sylius\\Component\\Product\\Model\\ProductAttributeInterface', 'controller' => 'Sylius\\Bundle\\ProductBundle\\Controller\\ProductAttributeController', 'form' => 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductAttributeType', 'factory' => 'Sylius\\Component\\Resource\\Factory\\TranslatableFactory'), 'translation' => array('classes' => array('model' => 'Sylius\\Component\\Product\\Model\\ProductAttributeTranslation', 'interface' => 'Sylius\\Component\\Product\\Model\\ProductAttributeTranslationInterface', 'form' => 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductAttributeTranslationType', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory'))), 'attribute_value' => array('classes' => array('model' => 'Sylius\\Component\\Product\\Model\\ProductAttributeValue', 'interface' => 'Sylius\\Component\\Product\\Model\\ProductAttributeValueInterface', 'form' => 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductAttributeValueType', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory')))));
    }

    /**
     * Gets the 'sylius.doctrine.orm.event_subscriber.load_metadata.review' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ReviewBundle\Doctrine\ORM\Subscriber\LoadMetadataSubscriber A Sylius\Bundle\ReviewBundle\Doctrine\ORM\Subscriber\LoadMetadataSubscriber instance
     */
    protected function getSylius_Doctrine_Orm_EventSubscriber_LoadMetadata_ReviewService()
    {
        return $this->services['sylius.doctrine.orm.event_subscriber.load_metadata.review'] = new \Sylius\Bundle\ReviewBundle\Doctrine\ORM\Subscriber\LoadMetadataSubscriber(array('product' => array('subject' => 'AppBundle\\Entity\\Product', 'reviewer' => array('classes' => array('model' => 'AppBundle\\Entity\\Customer', 'interface' => 'Sylius\\Component\\Review\\Model\\ReviewerInterface', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory')), 'review' => array('classes' => array('model' => 'AppBundle\\Entity\\ProductReview', 'repository' => 'AppBundle\\Repository\\ProductReviewRepository', 'controller' => 'AppBundle\\Controller\\ProductReviewController', 'form' => 'AppBundle\\Form\\Type\\ProductReviewType', 'interface' => 'Sylius\\Component\\Review\\Model\\ReviewInterface', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory')))));
    }

    /**
     * Gets the 'sylius.email_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Mailer\Provider\EmailProvider A Sylius\Component\Mailer\Provider\EmailProvider instance
     */
    protected function getSylius_EmailProviderService()
    {
        return $this->services['sylius.email_provider'] = new \Sylius\Component\Mailer\Provider\EmailProvider($this->get('sylius.factory.email'), array('reset_password_token' => array('subject' => 'sylius.emails.user.password_reset.subject', 'template' => 'emails/passwordReset.html.twig', 'enabled' => true), 'user_registration' => array('subject' => 'Bienvenue sur Cyclocom', 'template' => 'emails/userRegistration.html.twig', 'enabled' => true), 'website_release' => array('subject' => 'Nouveau Jedisjeux en ligne', 'template' => 'emails/websiteRelease.html.twig', 'enabled' => true), 'contact_request' => array('subject' => 'Nouveau message de contact Jedisjeux', 'template' => 'emails/contactRequest.html.twig', 'enabled' => true), 'verification_token' => array('subject' => 'emails.verification_token.subject', 'template' => 'emails/verification.html.twig', 'enabled' => true)));
    }

    /**
     * Gets the 'sylius.email_renderer.adapter.twig' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\MailerBundle\Renderer\Adapter\EmailTwigAdapter A Sylius\Bundle\MailerBundle\Renderer\Adapter\EmailTwigAdapter instance
     */
    protected function getSylius_EmailRenderer_Adapter_TwigService()
    {
        $this->services['sylius.email_renderer.adapter.twig'] = $instance = new \Sylius\Bundle\MailerBundle\Renderer\Adapter\EmailTwigAdapter($this->get('twig'));

        $instance->setEventDispatcher($this->get('debug.event_dispatcher'));

        return $instance;
    }

    /**
     * Gets the 'sylius.email_sender' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Mailer\Sender\Sender A Sylius\Component\Mailer\Sender\Sender instance
     */
    protected function getSylius_EmailSenderService()
    {
        return $this->services['sylius.email_sender'] = new \Sylius\Component\Mailer\Sender\Sender($this->get('sylius.email_renderer.adapter.twig'), $this->get('sylius.email_sender.adapter.swiftmailer'), $this->get('sylius.email_provider'), $this->get('sylius.mailer.default_settings_provider'));
    }

    /**
     * Gets the 'sylius.email_sender.adapter.swiftmailer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\MailerBundle\Sender\Adapter\SwiftMailerAdapter A Sylius\Bundle\MailerBundle\Sender\Adapter\SwiftMailerAdapter instance
     */
    protected function getSylius_EmailSender_Adapter_SwiftmailerService()
    {
        $this->services['sylius.email_sender.adapter.swiftmailer'] = $instance = new \Sylius\Bundle\MailerBundle\Sender\Adapter\SwiftMailerAdapter($this->get('swiftmailer.mailer.default'));

        $instance->setEventDispatcher($this->get('debug.event_dispatcher'));

        return $instance;
    }

    /**
     * Gets the 'sylius.event_subscriber.orm_mapped_super_class' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\EventListener\ORMMappedSuperClassSubscriber A Sylius\Bundle\ResourceBundle\EventListener\ORMMappedSuperClassSubscriber instance
     */
    protected function getSylius_EventSubscriber_OrmMappedSuperClassService()
    {
        return $this->services['sylius.event_subscriber.orm_mapped_super_class'] = new \Sylius\Bundle\ResourceBundle\EventListener\ORMMappedSuperClassSubscriber(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'});
    }

    /**
     * Gets the 'sylius.event_subscriber.orm_repository_class' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\EventListener\ORMRepositoryClassSubscriber A Sylius\Bundle\ResourceBundle\EventListener\ORMRepositoryClassSubscriber instance
     */
    protected function getSylius_EventSubscriber_OrmRepositoryClassService()
    {
        return $this->services['sylius.event_subscriber.orm_repository_class'] = new \Sylius\Bundle\ResourceBundle\EventListener\ORMRepositoryClassSubscriber(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'});
    }

    /**
     * Gets the 'sylius.event_subscriber.resource_delete' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\EventListener\ResourceDeleteSubscriber A Sylius\Bundle\ResourceBundle\EventListener\ResourceDeleteSubscriber instance
     */
    protected function getSylius_EventSubscriber_ResourceDeleteService()
    {
        return $this->services['sylius.event_subscriber.resource_delete'] = new \Sylius\Bundle\ResourceBundle\EventListener\ResourceDeleteSubscriber($this->get('cmf_routing.router'), $this->get('session'), $this->get('translator'), $this->get('fos_rest.view_handler'));
    }

    /**
     * Gets the 'sylius.factory.admin_oauth_user' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Resource\Factory\Factory A Sylius\Component\Resource\Factory\Factory instance
     */
    protected function getSylius_Factory_AdminOauthUserService()
    {
        return $this->services['sylius.factory.admin_oauth_user'] = new \Sylius\Component\Resource\Factory\Factory('Sylius\\Component\\User\\Model\\UserOAuth');
    }

    /**
     * Gets the 'sylius.factory.customer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Resource\Factory\Factory A Sylius\Component\Resource\Factory\Factory instance
     */
    protected function getSylius_Factory_CustomerService()
    {
        return $this->services['sylius.factory.customer'] = new \Sylius\Component\Resource\Factory\Factory('AppBundle\\Entity\\Customer');
    }

    /**
     * Gets the 'sylius.factory.customer_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Resource\Factory\Factory A Sylius\Component\Resource\Factory\Factory instance
     */
    protected function getSylius_Factory_CustomerGroupService()
    {
        return $this->services['sylius.factory.customer_group'] = new \Sylius\Component\Resource\Factory\Factory('Sylius\\Component\\Customer\\Model\\CustomerGroup');
    }

    /**
     * Gets the 'sylius.factory.email' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Mailer\Factory\EmailFactory A Sylius\Component\Mailer\Factory\EmailFactory instance
     */
    protected function getSylius_Factory_EmailService()
    {
        return $this->services['sylius.factory.email'] = new \Sylius\Component\Mailer\Factory\EmailFactory();
    }

    /**
     * Gets the 'sylius.factory.locale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Resource\Factory\Factory A Sylius\Component\Resource\Factory\Factory instance
     */
    protected function getSylius_Factory_LocaleService()
    {
        return $this->services['sylius.factory.locale'] = new \Sylius\Component\Resource\Factory\Factory('Sylius\\Component\\Locale\\Model\\Locale');
    }

    /**
     * Gets the 'sylius.factory.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Factory\ProductFactory A AppBundle\Factory\ProductFactory instance
     */
    protected function getSylius_Factory_ProductService()
    {
        return $this->services['sylius.factory.product'] = new \AppBundle\Factory\ProductFactory(new \Sylius\Component\Resource\Factory\TranslatableFactory(new \Sylius\Component\Resource\Factory\Factory('AppBundle\\Entity\\Product'), $this->get('sylius.translation_locale_provider.immutable')), $this->get('sylius.factory.product_variant'));
    }

    /**
     * Gets the 'sylius.factory.product_association' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Resource\Factory\Factory A Sylius\Component\Resource\Factory\Factory instance
     */
    protected function getSylius_Factory_ProductAssociationService()
    {
        return $this->services['sylius.factory.product_association'] = new \Sylius\Component\Resource\Factory\Factory('Sylius\\Component\\Product\\Model\\ProductAssociation');
    }

    /**
     * Gets the 'sylius.factory.product_association_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Resource\Factory\Factory A Sylius\Component\Resource\Factory\Factory instance
     */
    protected function getSylius_Factory_ProductAssociationTypeService()
    {
        return $this->services['sylius.factory.product_association_type'] = new \Sylius\Component\Resource\Factory\Factory('Sylius\\Component\\Product\\Model\\ProductAssociationType');
    }

    /**
     * Gets the 'sylius.factory.product_attribute' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Attribute\Factory\AttributeFactory A Sylius\Component\Attribute\Factory\AttributeFactory instance
     */
    protected function getSylius_Factory_ProductAttributeService()
    {
        $a = new \Sylius\Component\Registry\ServiceRegistry('Sylius\\Component\\Attribute\\AttributeType\\AttributeTypeInterface', 'attribute type');
        $a->register('text', $this->get('sylius.attribute_type.text'));
        $a->register('textarea', $this->get('sylius.attribute_type.textarea'));
        $a->register('checkbox', $this->get('sylius.attribute_type.checkbox'));
        $a->register('integer', $this->get('sylius.attribute_type.integer'));
        $a->register('percent', $this->get('sylius.attribute_type.percent'));
        $a->register('datetime', $this->get('sylius.attribute_type.datetime'));
        $a->register('date', $this->get('sylius.attribute_type.date'));

        return $this->services['sylius.factory.product_attribute'] = new \Sylius\Component\Attribute\Factory\AttributeFactory(new \Sylius\Component\Resource\Factory\TranslatableFactory(new \Sylius\Component\Resource\Factory\Factory('Sylius\\Component\\Product\\Model\\ProductAttribute'), $this->get('sylius.translation_locale_provider.immutable')), $a);
    }

    /**
     * Gets the 'sylius.factory.product_attribute_translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Resource\Factory\Factory A Sylius\Component\Resource\Factory\Factory instance
     */
    protected function getSylius_Factory_ProductAttributeTranslationService()
    {
        return $this->services['sylius.factory.product_attribute_translation'] = new \Sylius\Component\Resource\Factory\Factory('Sylius\\Component\\Product\\Model\\ProductAttributeTranslation');
    }

    /**
     * Gets the 'sylius.factory.product_attribute_value' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Resource\Factory\Factory A Sylius\Component\Resource\Factory\Factory instance
     */
    protected function getSylius_Factory_ProductAttributeValueService()
    {
        return $this->services['sylius.factory.product_attribute_value'] = new \Sylius\Component\Resource\Factory\Factory('Sylius\\Component\\Product\\Model\\ProductAttributeValue');
    }

    /**
     * Gets the 'sylius.factory.product_option' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Resource\Factory\TranslatableFactory A Sylius\Component\Resource\Factory\TranslatableFactory instance
     */
    protected function getSylius_Factory_ProductOptionService()
    {
        return $this->services['sylius.factory.product_option'] = new \Sylius\Component\Resource\Factory\TranslatableFactory(new \Sylius\Component\Resource\Factory\Factory('Sylius\\Component\\Product\\Model\\ProductOption'), $this->get('sylius.translation_locale_provider.immutable'));
    }

    /**
     * Gets the 'sylius.factory.product_option_translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Resource\Factory\Factory A Sylius\Component\Resource\Factory\Factory instance
     */
    protected function getSylius_Factory_ProductOptionTranslationService()
    {
        return $this->services['sylius.factory.product_option_translation'] = new \Sylius\Component\Resource\Factory\Factory('Sylius\\Component\\Product\\Model\\ProductOptionTranslation');
    }

    /**
     * Gets the 'sylius.factory.product_option_value' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Resource\Factory\TranslatableFactory A Sylius\Component\Resource\Factory\TranslatableFactory instance
     */
    protected function getSylius_Factory_ProductOptionValueService()
    {
        return $this->services['sylius.factory.product_option_value'] = new \Sylius\Component\Resource\Factory\TranslatableFactory(new \Sylius\Component\Resource\Factory\Factory('Sylius\\Component\\Product\\Model\\ProductOptionValue'), $this->get('sylius.translation_locale_provider.immutable'));
    }

    /**
     * Gets the 'sylius.factory.product_option_value_translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Resource\Factory\Factory A Sylius\Component\Resource\Factory\Factory instance
     */
    protected function getSylius_Factory_ProductOptionValueTranslationService()
    {
        return $this->services['sylius.factory.product_option_value_translation'] = new \Sylius\Component\Resource\Factory\Factory('Sylius\\Component\\Product\\Model\\ProductOptionValueTranslation');
    }

    /**
     * Gets the 'sylius.factory.product_review' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Review\Factory\ReviewFactory A Sylius\Component\Review\Factory\ReviewFactory instance
     */
    protected function getSylius_Factory_ProductReviewService()
    {
        return $this->services['sylius.factory.product_review'] = new \Sylius\Component\Review\Factory\ReviewFactory(new \Sylius\Component\Resource\Factory\Factory('AppBundle\\Entity\\ProductReview'));
    }

    /**
     * Gets the 'sylius.factory.product_reviewer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Resource\Factory\Factory A Sylius\Component\Resource\Factory\Factory instance
     */
    protected function getSylius_Factory_ProductReviewerService()
    {
        return $this->services['sylius.factory.product_reviewer'] = new \Sylius\Component\Resource\Factory\Factory('AppBundle\\Entity\\Customer');
    }

    /**
     * Gets the 'sylius.factory.product_translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Resource\Factory\Factory A Sylius\Component\Resource\Factory\Factory instance
     */
    protected function getSylius_Factory_ProductTranslationService()
    {
        return $this->services['sylius.factory.product_translation'] = new \Sylius\Component\Resource\Factory\Factory('AppBundle\\Entity\\ProductTranslation');
    }

    /**
     * Gets the 'sylius.factory.product_variant' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Product\Factory\ProductVariantFactory A Sylius\Component\Product\Factory\ProductVariantFactory instance
     */
    protected function getSylius_Factory_ProductVariantService()
    {
        return $this->services['sylius.factory.product_variant'] = new \Sylius\Component\Product\Factory\ProductVariantFactory(new \Sylius\Component\Resource\Factory\Factory('AppBundle\\Entity\\ProductVariant'));
    }

    /**
     * Gets the 'sylius.factory.shop_user' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Resource\Factory\Factory A Sylius\Component\Resource\Factory\Factory instance
     */
    protected function getSylius_Factory_ShopUserService()
    {
        return $this->services['sylius.factory.shop_user'] = new \Sylius\Component\Resource\Factory\Factory('AppBundle\\Entity\\User');
    }

    /**
     * Gets the 'sylius.factory.taxon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Taxonomy\Factory\TaxonFactory A Sylius\Component\Taxonomy\Factory\TaxonFactory instance
     */
    protected function getSylius_Factory_TaxonService()
    {
        return $this->services['sylius.factory.taxon'] = new \Sylius\Component\Taxonomy\Factory\TaxonFactory(new \Sylius\Component\Resource\Factory\TranslatableFactory(new \Sylius\Component\Resource\Factory\Factory('AppBundle\\Entity\\Taxon'), $this->get('sylius.translation_locale_provider.immutable')));
    }

    /**
     * Gets the 'sylius.factory.taxon_translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Resource\Factory\Factory A Sylius\Component\Resource\Factory\Factory instance
     */
    protected function getSylius_Factory_TaxonTranslationService()
    {
        return $this->services['sylius.factory.taxon_translation'] = new \Sylius\Component\Resource\Factory\Factory('AppBundle\\Entity\\TaxonTranslation');
    }

    /**
     * Gets the 'sylius.form.event_subscriber.product_variant_generator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ProductBundle\Form\EventSubscriber\GenerateProductVariantsSubscriber A Sylius\Bundle\ProductBundle\Form\EventSubscriber\GenerateProductVariantsSubscriber instance
     */
    protected function getSylius_Form_EventSubscriber_ProductVariantGeneratorService()
    {
        return $this->services['sylius.form.event_subscriber.product_variant_generator'] = new \Sylius\Bundle\ProductBundle\Form\EventSubscriber\GenerateProductVariantsSubscriber($this->get('sylius.generator.product_variant'));
    }

    /**
     * Gets the 'sylius.form.extension.type.collection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Form\Extension\CollectionTypeExtension A Sylius\Bundle\ResourceBundle\Form\Extension\CollectionTypeExtension instance
     */
    protected function getSylius_Form_Extension_Type_CollectionService()
    {
        return $this->services['sylius.form.extension.type.collection'] = new \Sylius\Bundle\ResourceBundle\Form\Extension\CollectionTypeExtension();
    }

    /**
     * Gets the 'sylius.form.type.attribute_type_choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\AttributeBundle\Form\Type\AttributeTypeChoiceType A Sylius\Bundle\AttributeBundle\Form\Type\AttributeTypeChoiceType instance
     */
    protected function getSylius_Form_Type_AttributeTypeChoiceService()
    {
        return $this->services['sylius.form.type.attribute_type_choice'] = new \Sylius\Bundle\AttributeBundle\Form\Type\AttributeTypeChoiceType(array('text' => 'Text', 'textarea' => 'Textarea', 'checkbox' => 'Checkbox', 'integer' => 'Integer', 'percent' => 'Percent', 'datetime' => 'Datetime', 'date' => 'Date'));
    }

    /**
     * Gets the 'sylius.form.type.customer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\CustomerBundle\Form\Type\CustomerType A Sylius\Bundle\CustomerBundle\Form\Type\CustomerType instance
     */
    protected function getSylius_Form_Type_CustomerService()
    {
        return $this->services['sylius.form.type.customer'] = new \Sylius\Bundle\CustomerBundle\Form\Type\CustomerType('AppBundle\\Entity\\Customer', array(0 => 'sylius'));
    }

    /**
     * Gets the 'sylius.form.type.customer_choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\CustomerBundle\Form\Type\CustomerChoiceType A Sylius\Bundle\CustomerBundle\Form\Type\CustomerChoiceType instance
     */
    protected function getSylius_Form_Type_CustomerChoiceService()
    {
        return $this->services['sylius.form.type.customer_choice'] = new \Sylius\Bundle\CustomerBundle\Form\Type\CustomerChoiceType($this->get('sylius.repository.customer'));
    }

    /**
     * Gets the 'sylius.form.type.customer_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\CustomerBundle\Form\Type\CustomerGroupType A Sylius\Bundle\CustomerBundle\Form\Type\CustomerGroupType instance
     */
    protected function getSylius_Form_Type_CustomerGroupService()
    {
        return $this->services['sylius.form.type.customer_group'] = new \Sylius\Bundle\CustomerBundle\Form\Type\CustomerGroupType('Sylius\\Component\\Customer\\Model\\CustomerGroup', array(0 => 'sylius'));
    }

    /**
     * Gets the 'sylius.form.type.customer_group_choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\CustomerBundle\Form\Type\CustomerGroupChoiceType A Sylius\Bundle\CustomerBundle\Form\Type\CustomerGroupChoiceType instance
     */
    protected function getSylius_Form_Type_CustomerGroupChoiceService()
    {
        return $this->services['sylius.form.type.customer_group_choice'] = new \Sylius\Bundle\CustomerBundle\Form\Type\CustomerGroupChoiceType($this->get('sylius.repository.customer_group'));
    }

    /**
     * Gets the 'sylius.form.type.customer_group_code_choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\CustomerBundle\Form\Type\CustomerGroupCodeChoiceType A Sylius\Bundle\CustomerBundle\Form\Type\CustomerGroupCodeChoiceType instance
     */
    protected function getSylius_Form_Type_CustomerGroupCodeChoiceService()
    {
        return $this->services['sylius.form.type.customer_group_code_choice'] = new \Sylius\Bundle\CustomerBundle\Form\Type\CustomerGroupCodeChoiceType($this->get('sylius.repository.customer_group'));
    }

    /**
     * Gets the 'sylius.form.type.customer_profile' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\CustomerBundle\Form\Type\CustomerProfileType A Sylius\Bundle\CustomerBundle\Form\Type\CustomerProfileType instance
     */
    protected function getSylius_Form_Type_CustomerProfileService()
    {
        return $this->services['sylius.form.type.customer_profile'] = new \Sylius\Bundle\CustomerBundle\Form\Type\CustomerProfileType('AppBundle\\Entity\\Customer', array(0 => 'sylius', 1 => 'sylius_customer_profile'));
    }

    /**
     * Gets the 'sylius.form.type.customer_simple_registration' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Form\Type\Customer\CustomerSimpleRegistrationType A AppBundle\Form\Type\Customer\CustomerSimpleRegistrationType instance
     */
    protected function getSylius_Form_Type_CustomerSimpleRegistrationService()
    {
        return $this->services['sylius.form.type.customer_simple_registration'] = new \AppBundle\Form\Type\Customer\CustomerSimpleRegistrationType('AppBundle\\Entity\\Customer', array(0 => 'sylius', 1 => 'sylius_user_registration'), $this->get('sylius.repository.customer'));
    }

    /**
     * Gets the 'sylius.form.type.data_transformer.products_to_product_associations' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Form\DataTransformer\ProductsToProductAssociationsTransformer A AppBundle\Form\DataTransformer\ProductsToProductAssociationsTransformer instance
     */
    protected function getSylius_Form_Type_DataTransformer_ProductsToProductAssociationsService()
    {
        return $this->services['sylius.form.type.data_transformer.products_to_product_associations'] = new \AppBundle\Form\DataTransformer\ProductsToProductAssociationsTransformer($this->get('sylius.factory.product_association'), $this->get('sylius.repository.product'), $this->get('sylius.repository.product_association_type'));
    }

    /**
     * Gets the 'sylius.form.type.grid_filter.boolean' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\GridBundle\Form\Type\Filter\BooleanFilterType A Sylius\Bundle\GridBundle\Form\Type\Filter\BooleanFilterType instance
     */
    protected function getSylius_Form_Type_GridFilter_BooleanService()
    {
        return $this->services['sylius.form.type.grid_filter.boolean'] = new \Sylius\Bundle\GridBundle\Form\Type\Filter\BooleanFilterType();
    }

    /**
     * Gets the 'sylius.form.type.grid_filter.string' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\GridBundle\Form\Type\Filter\StringFilterType A Sylius\Bundle\GridBundle\Form\Type\Filter\StringFilterType instance
     */
    protected function getSylius_Form_Type_GridFilter_StringService()
    {
        return $this->services['sylius.form.type.grid_filter.string'] = new \Sylius\Bundle\GridBundle\Form\Type\Filter\StringFilterType();
    }

    /**
     * Gets the 'sylius.form.type.locale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\LocaleBundle\Form\Type\LocaleType A Sylius\Bundle\LocaleBundle\Form\Type\LocaleType instance
     */
    protected function getSylius_Form_Type_LocaleService()
    {
        return $this->services['sylius.form.type.locale'] = new \Sylius\Bundle\LocaleBundle\Form\Type\LocaleType('Sylius\\Component\\Locale\\Model\\Locale', array(0 => 'sylius'));
    }

    /**
     * Gets the 'sylius.form.type.locale_choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\LocaleBundle\Form\Type\LocaleChoiceType A Sylius\Bundle\LocaleBundle\Form\Type\LocaleChoiceType instance
     */
    protected function getSylius_Form_Type_LocaleChoiceService()
    {
        return $this->services['sylius.form.type.locale_choice'] = new \Sylius\Bundle\LocaleBundle\Form\Type\LocaleChoiceType($this->get('sylius.repository.locale'));
    }

    /**
     * Gets the 'sylius.form.type.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ProductBundle\Form\Type\ProductType A Sylius\Bundle\ProductBundle\Form\Type\ProductType instance
     */
    protected function getSylius_Form_Type_ProductService()
    {
        return $this->services['sylius.form.type.product'] = new \Sylius\Bundle\ProductBundle\Form\Type\ProductType('AppBundle\\Entity\\Product', array(0 => 'sylius'), $this->get('sylius.product_variant_resolver.default'));
    }

    /**
     * Gets the 'sylius.form.type.product_association' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ProductBundle\Form\Type\ProductAssociationType A Sylius\Bundle\ProductBundle\Form\Type\ProductAssociationType instance
     */
    protected function getSylius_Form_Type_ProductAssociationService()
    {
        return $this->services['sylius.form.type.product_association'] = new \Sylius\Bundle\ProductBundle\Form\Type\ProductAssociationType('Sylius\\Component\\Product\\Model\\ProductAssociation', array(0 => 'sylius'));
    }

    /**
     * Gets the 'sylius.form.type.product_association_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ProductBundle\Form\Type\ProductAssociationTypeType A Sylius\Bundle\ProductBundle\Form\Type\ProductAssociationTypeType instance
     */
    protected function getSylius_Form_Type_ProductAssociationTypeService()
    {
        return $this->services['sylius.form.type.product_association_type'] = new \Sylius\Bundle\ProductBundle\Form\Type\ProductAssociationTypeType('Sylius\\Component\\Product\\Model\\ProductAssociationType', array(0 => 'sylius'));
    }

    /**
     * Gets the 'sylius.form.type.product_association_type_choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ProductBundle\Form\Type\ProductAssociationTypeChoiceType A Sylius\Bundle\ProductBundle\Form\Type\ProductAssociationTypeChoiceType instance
     */
    protected function getSylius_Form_Type_ProductAssociationTypeChoiceService()
    {
        return $this->services['sylius.form.type.product_association_type_choice'] = new \Sylius\Bundle\ProductBundle\Form\Type\ProductAssociationTypeChoiceType($this->get('sylius.repository.product_association_type'));
    }

    /**
     * Gets the 'sylius.form.type.product_attribute' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ProductBundle\Form\Type\ProductAttributeType A Sylius\Bundle\ProductBundle\Form\Type\ProductAttributeType instance
     */
    protected function getSylius_Form_Type_ProductAttributeService()
    {
        return $this->services['sylius.form.type.product_attribute'] = new \Sylius\Bundle\ProductBundle\Form\Type\ProductAttributeType('Sylius\\Component\\Product\\Model\\ProductAttribute', array(0 => 'sylius'), 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductAttributeTranslationType', $this->get('sylius.form_registry.attribute_type'));
    }

    /**
     * Gets the 'sylius.form.type.product_attribute_choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ProductBundle\Form\Type\ProductAttributeChoiceType A Sylius\Bundle\ProductBundle\Form\Type\ProductAttributeChoiceType instance
     */
    protected function getSylius_Form_Type_ProductAttributeChoiceService()
    {
        return $this->services['sylius.form.type.product_attribute_choice'] = new \Sylius\Bundle\ProductBundle\Form\Type\ProductAttributeChoiceType($this->get('sylius.repository.product_attribute'));
    }

    /**
     * Gets the 'sylius.form.type.product_attribute_translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ProductBundle\Form\Type\ProductAttributeTranslationType A Sylius\Bundle\ProductBundle\Form\Type\ProductAttributeTranslationType instance
     */
    protected function getSylius_Form_Type_ProductAttributeTranslationService()
    {
        return $this->services['sylius.form.type.product_attribute_translation'] = new \Sylius\Bundle\ProductBundle\Form\Type\ProductAttributeTranslationType('Sylius\\Component\\Product\\Model\\ProductAttributeTranslation', array(0 => 'sylius'));
    }

    /**
     * Gets the 'sylius.form.type.product_attribute_value' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ProductBundle\Form\Type\ProductAttributeValueType A Sylius\Bundle\ProductBundle\Form\Type\ProductAttributeValueType instance
     */
    protected function getSylius_Form_Type_ProductAttributeValueService()
    {
        return $this->services['sylius.form.type.product_attribute_value'] = new \Sylius\Bundle\ProductBundle\Form\Type\ProductAttributeValueType('Sylius\\Component\\Product\\Model\\ProductAttributeValue', array(0 => 'sylius'), 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductAttributeChoiceType', $this->get('sylius.repository.product_attribute'), $this->get('sylius.form_registry.attribute_type'));
    }

    /**
     * Gets the 'sylius.form.type.product_choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ProductBundle\Form\Type\ProductChoiceType A Sylius\Bundle\ProductBundle\Form\Type\ProductChoiceType instance
     */
    protected function getSylius_Form_Type_ProductChoiceService()
    {
        return $this->services['sylius.form.type.product_choice'] = new \Sylius\Bundle\ProductBundle\Form\Type\ProductChoiceType($this->get('sylius.repository.product'));
    }

    /**
     * Gets the 'sylius.form.type.product_code_choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ProductBundle\Form\Type\ProductCodeChoiceType A Sylius\Bundle\ProductBundle\Form\Type\ProductCodeChoiceType instance
     */
    protected function getSylius_Form_Type_ProductCodeChoiceService()
    {
        return $this->services['sylius.form.type.product_code_choice'] = new \Sylius\Bundle\ProductBundle\Form\Type\ProductCodeChoiceType($this->get('sylius.repository.product'));
    }

    /**
     * Gets the 'sylius.form.type.product_generate_variants' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ProductBundle\Form\Type\ProductGenerateVariantsType A Sylius\Bundle\ProductBundle\Form\Type\ProductGenerateVariantsType instance
     */
    protected function getSylius_Form_Type_ProductGenerateVariantsService()
    {
        return $this->services['sylius.form.type.product_generate_variants'] = new \Sylius\Bundle\ProductBundle\Form\Type\ProductGenerateVariantsType('AppBundle\\Entity\\Product', array(0 => 'sylius'), $this->get('sylius.form.event_subscriber.product_variant_generator'));
    }

    /**
     * Gets the 'sylius.form.type.product_option' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ProductBundle\Form\Type\ProductOptionType A Sylius\Bundle\ProductBundle\Form\Type\ProductOptionType instance
     */
    protected function getSylius_Form_Type_ProductOptionService()
    {
        return $this->services['sylius.form.type.product_option'] = new \Sylius\Bundle\ProductBundle\Form\Type\ProductOptionType('Sylius\\Component\\Product\\Model\\ProductOption', array(0 => 'sylius'));
    }

    /**
     * Gets the 'sylius.form.type.product_option_choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ProductBundle\Form\Type\ProductOptionChoiceType A Sylius\Bundle\ProductBundle\Form\Type\ProductOptionChoiceType instance
     */
    protected function getSylius_Form_Type_ProductOptionChoiceService()
    {
        return $this->services['sylius.form.type.product_option_choice'] = new \Sylius\Bundle\ProductBundle\Form\Type\ProductOptionChoiceType($this->get('sylius.repository.product_option'));
    }

    /**
     * Gets the 'sylius.form.type.product_option_translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ProductBundle\Form\Type\ProductOptionTranslationType A Sylius\Bundle\ProductBundle\Form\Type\ProductOptionTranslationType instance
     */
    protected function getSylius_Form_Type_ProductOptionTranslationService()
    {
        return $this->services['sylius.form.type.product_option_translation'] = new \Sylius\Bundle\ProductBundle\Form\Type\ProductOptionTranslationType('Sylius\\Component\\Product\\Model\\ProductOptionTranslation', array(0 => 'sylius'));
    }

    /**
     * Gets the 'sylius.form.type.product_option_value' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ProductBundle\Form\Type\ProductOptionValueType A Sylius\Bundle\ProductBundle\Form\Type\ProductOptionValueType instance
     */
    protected function getSylius_Form_Type_ProductOptionValueService()
    {
        return $this->services['sylius.form.type.product_option_value'] = new \Sylius\Bundle\ProductBundle\Form\Type\ProductOptionValueType('Sylius\\Component\\Product\\Model\\ProductOptionValue', array(0 => 'sylius'));
    }

    /**
     * Gets the 'sylius.form.type.product_option_value_translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ProductBundle\Form\Type\ProductOptionValueTranslationType A Sylius\Bundle\ProductBundle\Form\Type\ProductOptionValueTranslationType instance
     */
    protected function getSylius_Form_Type_ProductOptionValueTranslationService()
    {
        return $this->services['sylius.form.type.product_option_value_translation'] = new \Sylius\Bundle\ProductBundle\Form\Type\ProductOptionValueTranslationType('Sylius\\Component\\Product\\Model\\ProductOptionValueTranslation', array(0 => 'sylius'));
    }

    /**
     * Gets the 'sylius.form.type.product_review_rating' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Form\Type\RatingType A AppBundle\Form\Type\RatingType instance
     */
    protected function getSylius_Form_Type_ProductReviewRatingService()
    {
        return $this->services['sylius.form.type.product_review_rating'] = new \AppBundle\Form\Type\RatingType('AppBundle\\Entity\\ProductReview', array(), 'product');
    }

    /**
     * Gets the 'sylius.form.type.product_translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ProductBundle\Form\Type\ProductTranslationType A Sylius\Bundle\ProductBundle\Form\Type\ProductTranslationType instance
     */
    protected function getSylius_Form_Type_ProductTranslationService()
    {
        return $this->services['sylius.form.type.product_translation'] = new \Sylius\Bundle\ProductBundle\Form\Type\ProductTranslationType('AppBundle\\Entity\\ProductTranslation', array(0 => 'sylius'));
    }

    /**
     * Gets the 'sylius.form.type.product_variant' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ProductBundle\Form\Type\ProductVariantType A Sylius\Bundle\ProductBundle\Form\Type\ProductVariantType instance
     */
    protected function getSylius_Form_Type_ProductVariantService()
    {
        return $this->services['sylius.form.type.product_variant'] = new \Sylius\Bundle\ProductBundle\Form\Type\ProductVariantType('AppBundle\\Entity\\ProductVariant', array(0 => 'sylius'));
    }

    /**
     * Gets the 'sylius.form.type.product_variant_generation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ProductBundle\Form\Type\ProductVariantGenerationType A Sylius\Bundle\ProductBundle\Form\Type\ProductVariantGenerationType instance
     */
    protected function getSylius_Form_Type_ProductVariantGenerationService()
    {
        return $this->services['sylius.form.type.product_variant_generation'] = new \Sylius\Bundle\ProductBundle\Form\Type\ProductVariantGenerationType('AppBundle\\Entity\\ProductVariant', array(0 => 'sylius'));
    }

    /**
     * Gets the 'sylius.form.type.product_view_count' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Form\Type\ProductViewCountType A AppBundle\Form\Type\ProductViewCountType instance
     */
    protected function getSylius_Form_Type_ProductViewCountService()
    {
        return $this->services['sylius.form.type.product_view_count'] = new \AppBundle\Form\Type\ProductViewCountType('AppBundle\\Entity\\Product', array());
    }

    /**
     * Gets the 'sylius.form.type.resource_translations' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Form\Type\ResourceTranslationsType A Sylius\Bundle\ResourceBundle\Form\Type\ResourceTranslationsType instance
     */
    protected function getSylius_Form_Type_ResourceTranslationsService()
    {
        return $this->services['sylius.form.type.resource_translations'] = new \Sylius\Bundle\ResourceBundle\Form\Type\ResourceTranslationsType($this->get('sylius.translation_locale_provider.immutable'));
    }

    /**
     * Gets the 'sylius.form.type.security_login' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\UiBundle\Form\Type\SecurityLoginType A Sylius\Bundle\UiBundle\Form\Type\SecurityLoginType instance
     */
    protected function getSylius_Form_Type_SecurityLoginService()
    {
        return $this->services['sylius.form.type.security_login'] = new \Sylius\Bundle\UiBundle\Form\Type\SecurityLoginType();
    }

    /**
     * Gets the 'sylius.form.type.sylius_product_associations' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Form\Type\ProductAssociationsType A AppBundle\Form\Type\ProductAssociationsType instance
     */
    protected function getSylius_Form_Type_SyliusProductAssociationsService()
    {
        return $this->services['sylius.form.type.sylius_product_associations'] = new \AppBundle\Form\Type\ProductAssociationsType($this->get('sylius.repository.product_association_type'), $this->get('sylius.form.type.data_transformer.products_to_product_associations'));
    }

    /**
     * Gets the 'sylius.form.type.taxon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\TaxonomyBundle\Form\Type\TaxonType A Sylius\Bundle\TaxonomyBundle\Form\Type\TaxonType instance
     */
    protected function getSylius_Form_Type_TaxonService()
    {
        return $this->services['sylius.form.type.taxon'] = new \Sylius\Bundle\TaxonomyBundle\Form\Type\TaxonType('AppBundle\\Entity\\Taxon', array(0 => 'sylius'));
    }

    /**
     * Gets the 'sylius.form.type.taxon_choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\TaxonomyBundle\Form\Type\TaxonChoiceType A Sylius\Bundle\TaxonomyBundle\Form\Type\TaxonChoiceType instance
     */
    protected function getSylius_Form_Type_TaxonChoiceService()
    {
        return $this->services['sylius.form.type.taxon_choice'] = new \Sylius\Bundle\TaxonomyBundle\Form\Type\TaxonChoiceType($this->get('sylius.repository.taxon'));
    }

    /**
     * Gets the 'sylius.form.type.taxon_code_choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\TaxonomyBundle\Form\Type\TaxonCodeChoiceType A Sylius\Bundle\TaxonomyBundle\Form\Type\TaxonCodeChoiceType instance
     */
    protected function getSylius_Form_Type_TaxonCodeChoiceService()
    {
        return $this->services['sylius.form.type.taxon_code_choice'] = new \Sylius\Bundle\TaxonomyBundle\Form\Type\TaxonCodeChoiceType($this->get('sylius.repository.taxon'));
    }

    /**
     * Gets the 'sylius.form.type.taxon_position' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\TaxonomyBundle\Form\Type\TaxonPositionType A Sylius\Bundle\TaxonomyBundle\Form\Type\TaxonPositionType instance
     */
    protected function getSylius_Form_Type_TaxonPositionService()
    {
        return $this->services['sylius.form.type.taxon_position'] = new \Sylius\Bundle\TaxonomyBundle\Form\Type\TaxonPositionType('AppBundle\\Entity\\Taxon', array(0 => 'sylius'));
    }

    /**
     * Gets the 'sylius.form.type.taxon_translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\TaxonomyBundle\Form\Type\TaxonTranslationType A Sylius\Bundle\TaxonomyBundle\Form\Type\TaxonTranslationType instance
     */
    protected function getSylius_Form_Type_TaxonTranslationService()
    {
        return $this->services['sylius.form.type.taxon_translation'] = new \Sylius\Bundle\TaxonomyBundle\Form\Type\TaxonTranslationType('AppBundle\\Entity\\TaxonTranslation', array(0 => 'sylius'));
    }

    /**
     * Gets the 'sylius.form.type.user_change_password' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\UserBundle\Form\Type\UserChangePasswordType A Sylius\Bundle\UserBundle\Form\Type\UserChangePasswordType instance
     */
    protected function getSylius_Form_Type_UserChangePasswordService()
    {
        return $this->services['sylius.form.type.user_change_password'] = new \Sylius\Bundle\UserBundle\Form\Type\UserChangePasswordType('Sylius\\Bundle\\UserBundle\\Form\\Model\\ChangePassword', array(0 => 'sylius'));
    }

    /**
     * Gets the 'sylius.form.type.user_login' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\UserBundle\Form\Type\UserLoginType A Sylius\Bundle\UserBundle\Form\Type\UserLoginType instance
     */
    protected function getSylius_Form_Type_UserLoginService()
    {
        return $this->services['sylius.form.type.user_login'] = new \Sylius\Bundle\UserBundle\Form\Type\UserLoginType();
    }

    /**
     * Gets the 'sylius.form.type.user_request_password_reset' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\UserBundle\Form\Type\UserRequestPasswordResetType A Sylius\Bundle\UserBundle\Form\Type\UserRequestPasswordResetType instance
     */
    protected function getSylius_Form_Type_UserRequestPasswordResetService()
    {
        return $this->services['sylius.form.type.user_request_password_reset'] = new \Sylius\Bundle\UserBundle\Form\Type\UserRequestPasswordResetType('Sylius\\Bundle\\UserBundle\\Form\\Model\\PasswordResetRequest', array(0 => 'sylius'));
    }

    /**
     * Gets the 'sylius.form.type.user_reset_password' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\UserBundle\Form\Type\UserResetPasswordType A Sylius\Bundle\UserBundle\Form\Type\UserResetPasswordType instance
     */
    protected function getSylius_Form_Type_UserResetPasswordService()
    {
        return $this->services['sylius.form.type.user_reset_password'] = new \Sylius\Bundle\UserBundle\Form\Type\UserResetPasswordType('Sylius\\Bundle\\UserBundle\\Form\\Model\\PasswordReset', array(0 => 'sylius'));
    }

    /**
     * Gets the 'sylius.form_registry.attribute_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Form\Registry\FormTypeRegistry A Sylius\Bundle\ResourceBundle\Form\Registry\FormTypeRegistry instance
     */
    protected function getSylius_FormRegistry_AttributeTypeService()
    {
        $this->services['sylius.form_registry.attribute_type'] = $instance = new \Sylius\Bundle\ResourceBundle\Form\Registry\FormTypeRegistry();

        $instance->add('text', 'default', 'Sylius\\Bundle\\AttributeBundle\\Form\\Type\\AttributeType\\TextAttributeType');
        $instance->add('text', 'configuration', 'Sylius\\Bundle\\AttributeBundle\\Form\\Type\\AttributeType\\Configuration\\TextAttributeConfigurationType');
        $instance->add('textarea', 'default', 'Sylius\\Bundle\\AttributeBundle\\Form\\Type\\AttributeType\\TextareaAttributeType');
        $instance->add('checkbox', 'default', 'Sylius\\Bundle\\AttributeBundle\\Form\\Type\\AttributeType\\CheckboxAttributeType');
        $instance->add('integer', 'default', 'Sylius\\Bundle\\AttributeBundle\\Form\\Type\\AttributeType\\IntegerAttributeType');
        $instance->add('percent', 'default', 'Sylius\\Bundle\\AttributeBundle\\Form\\Type\\AttributeType\\PercentAttributeType');
        $instance->add('datetime', 'default', 'Sylius\\Bundle\\AttributeBundle\\Form\\Type\\AttributeType\\DatetimeAttributeType');
        $instance->add('datetime', 'configuration', 'Sylius\\Bundle\\AttributeBundle\\Form\\Type\\AttributeType\\Cofngiuration\\DatetimeAttributeConfigurationType');
        $instance->add('date', 'default', 'Sylius\\Bundle\\AttributeBundle\\Form\\Type\\AttributeType\\DateAttributeType');
        $instance->add('date', 'configuration', 'Sylius\\Bundle\\AttributeBundle\\Form\\Type\\AttributeType\\Cofngiuration\\DateAttributeConfigurationType');

        return $instance;
    }

    /**
     * Gets the 'sylius.generator.product_variant' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Product\Generator\ProductVariantGenerator A Sylius\Component\Product\Generator\ProductVariantGenerator instance
     */
    protected function getSylius_Generator_ProductVariantService()
    {
        return $this->services['sylius.generator.product_variant'] = new \Sylius\Component\Product\Generator\ProductVariantGenerator($this->get('sylius.factory.product_variant'), $this->get('sylius.checker.product_variants_parity'));
    }

    /**
     * Gets the 'sylius.generator.slug' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Product\Generator\SlugGenerator A Sylius\Component\Product\Generator\SlugGenerator instance
     */
    protected function getSylius_Generator_SlugService()
    {
        return $this->services['sylius.generator.slug'] = new \Sylius\Component\Product\Generator\SlugGenerator();
    }

    /**
     * Gets the 'sylius.generator.taxon_slug' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Taxonomy\Generator\TaxonSlugGenerator A Sylius\Component\Taxonomy\Generator\TaxonSlugGenerator instance
     */
    protected function getSylius_Generator_TaxonSlugService()
    {
        return $this->services['sylius.generator.taxon_slug'] = new \Sylius\Component\Taxonomy\Generator\TaxonSlugGenerator($this->get('sylius.repository.taxon'));
    }

    /**
     * Gets the 'sylius.grid.array_to_definition_converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Grid\Definition\ArrayToDefinitionConverter A Sylius\Component\Grid\Definition\ArrayToDefinitionConverter instance
     */
    protected function getSylius_Grid_ArrayToDefinitionConverterService()
    {
        return $this->services['sylius.grid.array_to_definition_converter'] = new \Sylius\Component\Grid\Definition\ArrayToDefinitionConverter();
    }

    /**
     * Gets the 'sylius.grid.data_extractor.property_access' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Grid\DataExtractor\PropertyAccessDataExtractor A Sylius\Component\Grid\DataExtractor\PropertyAccessDataExtractor instance
     */
    protected function getSylius_Grid_DataExtractor_PropertyAccessService()
    {
        return $this->services['sylius.grid.data_extractor.property_access'] = new \Sylius\Component\Grid\DataExtractor\PropertyAccessDataExtractor($this->get('property_accessor'));
    }

    /**
     * Gets the 'sylius.grid.data_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Grid\Data\DataProvider A Sylius\Component\Grid\Data\DataProvider instance
     */
    protected function getSylius_Grid_DataProviderService()
    {
        return $this->services['sylius.grid.data_provider'] = new \Sylius\Component\Grid\Data\DataProvider($this->get('sylius.grid.data_source_provider'), $this->get('sylius.grid.filters_applicator'), $this->get('sylius.grid.sorter'));
    }

    /**
     * Gets the 'sylius.grid.data_source_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Grid\Data\DataSourceProvider A Sylius\Component\Grid\Data\DataSourceProvider instance
     */
    protected function getSylius_Grid_DataSourceProviderService()
    {
        return $this->services['sylius.grid.data_source_provider'] = new \Sylius\Component\Grid\Data\DataSourceProvider($this->get('sylius.registry.grid_driver'));
    }

    /**
     * Gets the 'sylius.grid.filters_applicator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Grid\Filtering\FiltersApplicator A Sylius\Component\Grid\Filtering\FiltersApplicator instance
     */
    protected function getSylius_Grid_FiltersApplicatorService()
    {
        return $this->services['sylius.grid.filters_applicator'] = new \Sylius\Component\Grid\Filtering\FiltersApplicator($this->get('sylius.registry.grid_filter'));
    }

    /**
     * Gets the 'sylius.grid.provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Grid\Provider\ArrayGridProvider A Sylius\Component\Grid\Provider\ArrayGridProvider instance
     */
    protected function getSylius_Grid_ProviderService()
    {
        return $this->services['sylius.grid.provider'] = new \Sylius\Component\Grid\Provider\ArrayGridProvider($this->get('sylius.grid.array_to_definition_converter'), array('app_backend_article' => array('driver' => array('name' => 'doctrine/orm', 'options' => array('class' => 'AppBundle\\Entity\\Article')), 'sorting' => array('createdAt' => 'desc'), 'fields' => array('image' => array('type' => 'twig', 'label' => 'sylius.ui.image', 'path' => '.', 'options' => array('template' => 'backend/article/grid/field/image.html.twig'), 'enabled' => true), 'title' => array('type' => 'string', 'label' => 'sylius.ui.title', 'sortable' => 'title', 'enabled' => true, 'options' => array()), 'status' => array('type' => 'twig', 'label' => 'sylius.ui.status', 'options' => array('template' => 'backend/grid/field/state.html.twig', 'vars' => array('labels' => 'backend/article/label/state')), 'enabled' => true), 'createdAt' => array('type' => 'twig', 'label' => 'app.ui.created_at', 'sortable' => 'createdAt', 'options' => array('template' => 'backend/grid/field/date/medium.html.twig'), 'enabled' => true)), 'filters' => array('search' => array('type' => 'string', 'label' => 'sylius.ui.search', 'options' => array('fields' => array(0 => 'title')), 'enabled' => true)), 'actions' => array('main' => array('create' => array('type' => 'create', 'options' => array())), 'item' => array('update' => array('type' => 'update', 'options' => array()), 'delete' => array('type' => 'delete', 'options' => array())))), 'app_backend_contact_request' => array('driver' => array('name' => 'doctrine/orm', 'options' => array('class' => 'AppBundle\\Entity\\ContactRequest')), 'sorting' => array('createdAt' => 'desc'), 'fields' => array('createdAt' => array('type' => 'twig', 'label' => 'sylius.ui.created_at', 'sortable' => 'createdAt', 'options' => array('template' => 'backend/grid/field/date/medium.html.twig'), 'enabled' => true), 'fullName' => array('type' => 'twig', 'label' => 'sylius.ui.name', 'path' => 'fullName', 'options' => array('template' => 'backend/grid/field/string.html.twig'), 'enabled' => true), 'email' => array('type' => 'string', 'label' => 'sylius.ui.email', 'sortable' => 'email', 'enabled' => true, 'options' => array())), 'filters' => array('search' => array('type' => 'string', 'label' => 'sylius.ui.search', 'options' => array('fields' => array(0 => 'firstName', 1 => 'lastName')), 'enabled' => true)), 'actions' => array('item' => array('show' => array('type' => 'show', 'options' => array()), 'delete' => array('type' => 'delete', 'options' => array())))), 'sylius_backend_customer' => array('driver' => array('name' => 'doctrine/orm', 'options' => array('class' => 'AppBundle\\Entity\\Customer')), 'sorting' => array('createdAt' => 'desc'), 'fields' => array('avatar' => array('type' => 'twig', 'label' => 'app.ui.avatar', 'path' => '.', 'options' => array('template' => 'backend/customer/grid/field/avatar.html.twig'), 'enabled' => true), 'email' => array('type' => 'string', 'label' => 'sylius.ui.email', 'sortable' => 'email', 'enabled' => true, 'options' => array()), 'createdAt' => array('type' => 'twig', 'label' => 'sylius.ui.registration_date', 'sortable' => 'createdAt', 'options' => array('template' => 'backend/grid/field/date/medium.html.twig'), 'enabled' => true)), 'filters' => array('search' => array('type' => 'string', 'label' => 'sylius.ui.search', 'options' => array('fields' => array(0 => 'email')), 'enabled' => true)), 'actions' => array('item' => array('update' => array('type' => 'update', 'options' => array())))), 'sylius_backend_customer_group' => array('driver' => array('name' => 'doctrine/orm', 'options' => array('class' => 'Sylius\\Component\\Customer\\Model\\CustomerGroup')), 'sorting' => array('name' => 'asc'), 'fields' => array('name' => array('type' => 'string', 'label' => 'sylius.ui.name', 'sortable' => 'name', 'enabled' => true, 'options' => array())), 'filters' => array('search' => array('type' => 'string', 'label' => 'sylius.ui.search', 'options' => array('fields' => array(0 => 'name')), 'enabled' => true)), 'actions' => array('main' => array('create' => array('type' => 'create', 'options' => array())), 'item' => array('update' => array('type' => 'update', 'options' => array()), 'delete' => array('type' => 'delete', 'options' => array())))), 'app_backend_dealer' => array('driver' => array('name' => 'doctrine/orm', 'options' => array('class' => 'AppBundle\\Entity\\Dealer')), 'sorting' => array('name' => 'asc'), 'fields' => array('image' => array('type' => 'twig', 'label' => 'sylius.ui.image', 'path' => '.', 'options' => array('template' => 'backend/dealer/grid/field/image.html.twig'), 'enabled' => true), 'name' => array('type' => 'string', 'label' => 'sylius.ui.name', 'sortable' => 'name', 'enabled' => true, 'options' => array()), 'priceList' => array('type' => 'twig', 'label' => 'app.ui.price_list', 'path' => '.', 'options' => array('template' => 'backend/dealer/grid/field/priceList.html.twig'), 'enabled' => true), 'pubBanners' => array('type' => 'twig', 'label' => 'app.ui.pub_banners', 'path' => '.', 'options' => array('template' => 'backend/dealer/grid/field/pubBanners.html.twig'), 'enabled' => true)), 'filters' => array('search' => array('type' => 'string', 'label' => 'sylius.ui.search', 'options' => array('fields' => array(0 => 'name')), 'enabled' => true)), 'actions' => array('main' => array('create' => array('type' => 'create', 'options' => array())), 'item' => array('update' => array('type' => 'update', 'options' => array()), 'delete' => array('type' => 'delete', 'options' => array())))), 'app_backend_dealer_price' => array('driver' => array('name' => 'doctrine/orm', 'options' => array('class' => 'AppBundle\\Entity\\DealerPrice')), 'sorting' => array('createdAt' => 'desc'), 'fields' => array('createdAt' => array('type' => 'twig', 'label' => 'sylius.ui.created_at', 'sortable' => 'createdAt', 'options' => array('template' => 'backend/grid/field/date/medium.html.twig'), 'enabled' => true), 'dealer.name' => array('type' => 'string', 'label' => 'app.ui.dealer', 'enabled' => true, 'options' => array()), 'name' => array('type' => 'string', 'label' => 'sylius.ui.name', 'sortable' => 'name', 'enabled' => true, 'options' => array()), 'barcode' => array('type' => 'string', 'label' => 'app.ui.barcode', 'sortable' => 'barcode', 'enabled' => true, 'options' => array()), 'status' => array('type' => 'twig', 'label' => 'sylius.ui.status', 'options' => array('template' => 'backend/grid/field/state.html.twig', 'vars' => array('labels' => 'backend/dealer_price/label/state')), 'enabled' => true), 'price' => array('type' => 'twig', 'label' => 'sylius.ui.price', 'sortable' => 'price', 'options' => array('template' => 'backend/grid/field/money.html.twig'), 'enabled' => true)), 'filters' => array('search' => array('type' => 'string', 'label' => 'sylius.ui.search', 'options' => array('fields' => array(0 => 'name', 1 => 'barcode')), 'enabled' => true)), 'actions' => array('item' => array('update' => array('type' => 'update', 'options' => array()), 'delete' => array('type' => 'delete', 'options' => array())))), 'app_backend_game_play' => array('driver' => array('name' => 'doctrine/orm', 'options' => array('class' => 'AppBundle\\Entity\\GamePlay', 'repository' => array('method' => 'createListQueryBuilder', 'arguments' => array(0 => 'fr_FR')))), 'sorting' => array('createdAt' => 'desc'), 'fields' => array('avatar' => array('type' => 'twig', 'label' => 'app.ui.avatar', 'path' => 'author', 'options' => array('template' => 'backend/customer/grid/field/avatar.html.twig'), 'enabled' => true), 'name' => array('type' => 'string', 'label' => 'sylius.ui.username', 'path' => 'author', 'enabled' => true, 'options' => array()), 'product' => array('type' => 'string', 'label' => 'sylius.ui.product', 'path' => 'product', 'enabled' => true, 'options' => array()), 'createdAt' => array('type' => 'twig', 'label' => 'sylius.ui.created_at', 'sortable' => NULL, 'options' => array('template' => 'backend/grid/field/date/medium.html.twig'), 'enabled' => true)), 'filters' => array('search' => array('type' => 'string', 'label' => 'sylius.ui.search', 'options' => array('fields' => array(0 => 'author.email', 1 => 'productTranslation.name')), 'enabled' => true)), 'actions' => array('item' => array('update' => array('type' => 'update', 'options' => array()), 'delete' => array('type' => 'delete', 'options' => array())))), 'app_backend_not_found_page' => array('driver' => array('name' => 'doctrine/orm', 'options' => array('class' => 'AppBundle\\Entity\\NotFound')), 'sorting' => array('timestamp' => 'desc'), 'fields' => array('timestamp' => array('type' => 'twig', 'label' => 'sylius.ui.created_at', 'sortable' => NULL, 'options' => array('template' => 'backend/grid/field/date/medium.html.twig'), 'enabled' => true), 'path' => array('type' => 'string', 'label' => 'app.ui.path', 'sortable' => NULL, 'enabled' => true, 'options' => array()), 'referer' => array('type' => 'twig', 'label' => 'app.ui.referer', 'sortable' => NULL, 'options' => array('template' => 'backend/not_found_page/grid/field/referer.html.twig'), 'enabled' => true)), 'filters' => array('search' => array('type' => 'string', 'label' => 'sylius.ui.search', 'options' => array('fields' => array(0 => 'path', 1 => 'referer')), 'enabled' => true)), 'actions' => array()), 'app_backend_person' => array('driver' => array('name' => 'doctrine/orm', 'options' => array('class' => 'AppBundle\\Entity\\Person')), 'sorting' => array('createdAt' => 'desc'), 'fields' => array('image' => array('type' => 'twig', 'label' => 'sylius.ui.image', 'path' => '.', 'options' => array('template' => 'backend/person/grid/field/image.html.twig'), 'enabled' => true), 'slug' => array('type' => 'twig', 'label' => 'sylius.ui.name', 'path' => '.', 'sortable' => 'slug', 'options' => array('template' => 'backend/grid/field/string.html.twig'), 'enabled' => true), 'createdAt' => array('type' => 'twig', 'label' => 'sylius.ui.created_at', 'sortable' => 'createdAt', 'options' => array('template' => 'backend/grid/field/date/medium.html.twig'), 'enabled' => true)), 'filters' => array('search' => array('type' => 'string', 'label' => 'sylius.ui.search', 'options' => array('fields' => array(0 => 'firstName', 1 => 'lastName')), 'enabled' => true)), 'actions' => array('main' => array('create' => array('type' => 'create', 'options' => array())), 'item' => array('update' => array('type' => 'update', 'options' => array()), 'delete' => array('type' => 'delete', 'options' => array())))), 'app_backend_post' => array('driver' => array('name' => 'doctrine/orm', 'options' => array('class' => 'AppBundle\\Entity\\Post', 'repository' => array('method' => 'createListQueryBuilder', 'arguments' => array(0 => '$topicId')))), 'sorting' => array('createdAt' => 'desc'), 'fields' => array('avatar' => array('type' => 'twig', 'label' => 'app.ui.avatar', 'path' => 'author', 'options' => array('template' => 'backend/customer/grid/field/avatar.html.twig'), 'enabled' => true), 'author.user.username' => array('type' => 'string', 'label' => 'sylius.ui.username', 'enabled' => true, 'options' => array()), 'topic.title' => array('type' => 'string', 'label' => 'app.ui.topic', 'enabled' => true, 'options' => array()), 'createdAt' => array('type' => 'twig', 'label' => 'sylius.ui.created_at', 'sortable' => 'createdAt', 'options' => array('template' => 'backend/grid/field/date/medium.html.twig'), 'enabled' => true)), 'actions' => array('item' => array('update' => array('type' => 'update', 'options' => array()), 'delete' => array('type' => 'delete', 'options' => array()))), 'filters' => array()), 'sylius_backend_product' => array('driver' => array('name' => 'doctrine/orm', 'options' => array('class' => 'AppBundle\\Entity\\Product', 'repository' => array('method' => 'createQueryBuilderWithLocaleCode', 'arguments' => array(0 => 'fr_FR')))), 'sorting' => array('createdAt' => 'desc'), 'fields' => array('image' => array('type' => 'twig', 'label' => 'sylius.ui.image', 'path' => '.', 'options' => array('template' => 'backend/product/grid/field/image.html.twig'), 'enabled' => true), 'name' => array('type' => 'string', 'label' => 'sylius.ui.name', 'enabled' => true, 'options' => array()), 'createdAt' => array('type' => 'twig', 'label' => 'sylius.ui.created_at', 'sortable' => 'createdAt', 'options' => array('template' => 'backend/grid/field/date/medium.html.twig'), 'enabled' => true), 'status' => array('type' => 'twig', 'label' => 'sylius.ui.status', 'options' => array('template' => 'backend/grid/field/state.html.twig', 'vars' => array('labels' => 'backend/product/label/state')), 'enabled' => true)), 'filters' => array('search' => array('type' => 'string', 'label' => 'sylius.ui.search', 'options' => array('fields' => array(0 => 'code', 1 => 'translation.name')), 'enabled' => true)), 'actions' => array('main' => array('create' => array('type' => 'create_product', 'options' => array())), 'item' => array('manage_articles' => array('type' => 'manage_articles', 'options' => array()), 'manage_variants' => array('type' => 'manage_variants', 'options' => array()), 'update' => array('type' => 'update', 'options' => array()), 'delete' => array('type' => 'delete', 'options' => array())))), 'sylius_backend_product_association_type' => array('driver' => array('name' => 'doctrine/orm', 'options' => array('class' => 'Sylius\\Component\\Product\\Model\\ProductAssociationType')), 'sorting' => array('code' => 'asc'), 'fields' => array('code' => array('type' => 'string', 'label' => 'sylius.ui.code', 'sortable' => NULL, 'enabled' => true, 'options' => array()), 'name' => array('type' => 'string', 'label' => 'sylius.ui.name', 'enabled' => true, 'options' => array())), 'filters' => array('code' => array('type' => 'string', 'label' => 'sylius.ui.code', 'enabled' => true, 'options' => array()), 'name' => array('type' => 'string', 'label' => 'sylius.ui.name', 'enabled' => true, 'options' => array())), 'actions' => array('main' => array('create' => array('type' => 'create', 'options' => array())), 'item' => array('update' => array('type' => 'update', 'options' => array()), 'delete' => array('type' => 'delete', 'options' => array())))), 'app_backend_product_list' => array('driver' => array('name' => 'doctrine/orm', 'options' => array('class' => 'AppBundle\\Entity\\ProductList', 'repository' => array('method' => 'createListQueryBuilder'))), 'sorting' => array('createdAt' => 'desc'), 'fields' => array('avatar' => array('type' => 'twig', 'path' => 'owner', 'label' => 'app.ui.avatar', 'options' => array('template' => 'backend/customer/grid/field/avatar.html.twig'), 'enabled' => true), 'owner' => array('type' => 'string', 'label' => 'sylius.ui.customer', 'enabled' => true, 'options' => array()), 'name' => array('type' => 'string', 'label' => 'sylius.ui.name', 'sortable' => NULL, 'enabled' => true, 'options' => array()), 'createdAt' => array('type' => 'twig', 'label' => 'sylius.ui.created_at', 'sortable' => NULL, 'options' => array('template' => 'backend/grid/field/date/medium.html.twig'), 'enabled' => true)), 'filters' => array('search' => array('type' => 'string', 'label' => 'sylius.ui.search', 'options' => array('fields' => array(0 => 'name', 1 => 'owner.email', 2 => 'user.username')), 'enabled' => true)), 'actions' => array('item' => array('update' => array('type' => 'update', 'options' => array()), 'delete' => array('type' => 'delete', 'options' => array())))), 'sylius_backend_product_review' => array('driver' => array('name' => 'doctrine/orm', 'options' => array('class' => 'AppBundle\\Entity\\ProductReview')), 'sorting' => array('date' => 'desc'), 'fields' => array('date' => array('type' => 'datetime', 'label' => 'sylius.ui.date', 'path' => 'createdAt', 'sortable' => 'createdAt', 'options' => array('format' => 'd-m-Y H:i:s'), 'enabled' => true), 'title' => array('type' => 'string', 'label' => 'sylius.ui.title', 'sortable' => NULL, 'enabled' => true, 'options' => array()), 'rating' => array('type' => 'string', 'label' => 'sylius.ui.rating', 'sortable' => NULL, 'enabled' => true, 'options' => array()), 'reviewSubject' => array('type' => 'string', 'label' => 'sylius.ui.product', 'enabled' => true, 'options' => array()), 'author' => array('type' => 'string', 'label' => 'sylius.ui.customer', 'enabled' => true, 'options' => array())), 'filters' => array('title' => array('type' => 'string', 'label' => 'sylius.ui.title', 'enabled' => true, 'options' => array())), 'actions' => array('item' => array('update' => array('type' => 'update', 'options' => array()), 'delete' => array('type' => 'delete', 'options' => array())))), 'sylius_backend_product_variant' => array('driver' => array('name' => 'doctrine/orm', 'options' => array('class' => 'AppBundle\\Entity\\ProductVariant', 'repository' => array('method' => 'createQueryBuilderByProductId', 'arguments' => array(0 => '$productId')))), 'sorting' => array('position' => 'asc'), 'fields' => array('name' => array('type' => 'string', 'label' => 'sylius.ui.name', 'enabled' => true, 'options' => array()), 'code' => array('type' => 'string', 'label' => 'sylius.ui.code', 'enabled' => true, 'options' => array()), 'position' => array('type' => 'twig', 'label' => 'sylius.ui.position', 'path' => '.', 'sortable' => NULL, 'options' => array('template' => 'backend/product_variant/grid/field/position.html.twig'), 'enabled' => true)), 'filters' => array('code' => array('type' => 'string', 'label' => 'sylius.ui.code', 'enabled' => true, 'options' => array()), 'name' => array('type' => 'string', 'label' => 'sylius.ui.name', 'options' => array('fields' => array(0 => 'name')), 'enabled' => true)), 'actions' => array('main' => array('update_positions' => array('type' => 'update_product_variant_positions', 'options' => array()), 'create' => array('type' => 'create', 'options' => array())), 'item' => array('update' => array('type' => 'update', 'options' => array()), 'delete' => array('type' => 'delete', 'options' => array())))), 'app_backend_redirection' => array('driver' => array('name' => 'doctrine/orm', 'options' => array('class' => 'AppBundle\\Entity\\Redirection')), 'sorting' => array('source' => 'asc'), 'fields' => array('source' => array('type' => 'string', 'label' => 'app.ui.source', 'sortable' => NULL, 'enabled' => true, 'options' => array()), 'destination' => array('type' => 'string', 'label' => 'app.ui.destination', 'sortable' => NULL, 'enabled' => true, 'options' => array()), 'count' => array('type' => 'string', 'label' => 'app.ui.redirection_count', 'sortable' => NULL, 'enabled' => true, 'options' => array()), 'lastAccessed' => array('type' => 'twig', 'label' => 'app.ui.last_used_at', 'sortable' => NULL, 'options' => array('template' => 'backend/grid/field/date/medium.html.twig'), 'enabled' => true)), 'filters' => array('search' => array('type' => 'string', 'label' => 'sylius.ui.search', 'options' => array('fields' => array(0 => 'source', 1 => 'destination')), 'enabled' => true)), 'actions' => array('main' => array('create' => array('type' => 'create', 'options' => array())), 'item' => array('update' => array('type' => 'update', 'options' => array()), 'delete' => array('type' => 'delete', 'options' => array())))), 'sylius_backend_root_taxon' => array('driver' => array('name' => 'doctrine/orm', 'options' => array('class' => 'AppBundle\\Entity\\Taxon', 'repository' => array('method' => 'createRootListQueryBuilder', 'arguments' => array(0 => array(0 => 'fr_FR'))))), 'sorting' => array('code' => 'desc'), 'fields' => array('code' => array('type' => 'string', 'label' => 'sylius.ui.code', 'sortable' => NULL, 'enabled' => true, 'options' => array()), 'name' => array('type' => 'string', 'label' => 'sylius.ui.name', 'enabled' => true, 'options' => array())), 'filters' => array('search' => array('type' => 'string', 'label' => 'sylius.ui.search', 'options' => array('fields' => array(0 => 'code', 1 => 'translation.name')), 'enabled' => true)), 'actions' => array('main' => array('create' => array('type' => 'create', 'options' => array())), 'item' => array('taxons' => array('type' => 'list_taxons', 'options' => array()), 'update' => array('type' => 'update', 'options' => array()), 'delete' => array('type' => 'delete', 'options' => array())))), 'sylius_backend_taxon_from_root' => array('driver' => array('name' => 'doctrine/orm', 'options' => array('class' => 'AppBundle\\Entity\\Taxon', 'repository' => array('method' => 'createChildrenListQueryBuilder', 'arguments' => array(0 => array(0 => 'fr_FR'), 1 => 'expr:service(\'sylius.repository.taxon\').findOneByCode($rootCode)')))), 'fields' => array('code' => array('type' => 'string', 'label' => 'sylius.ui.code', 'enabled' => true, 'options' => array()), 'parent' => array('type' => 'string', 'label' => 'sylius.ui.parent', 'enabled' => true, 'options' => array()), 'name' => array('type' => 'string', 'label' => 'sylius.ui.name', 'enabled' => true, 'options' => array()), 'public' => array('type' => 'twig', 'label' => 'app.ui.public', 'path' => '.', 'options' => array('template' => 'backend/taxon/grid/field/public.html.twig'), 'enabled' => true)), 'filters' => array('search' => array('type' => 'string', 'label' => 'sylius.ui.search', 'options' => array('fields' => array(0 => 'code', 1 => 'translation.name')), 'enabled' => true)), 'actions' => array('main' => array('create' => array('type' => 'create', 'options' => array())), 'item' => array('update' => array('type' => 'update', 'options' => array()), 'delete' => array('type' => 'delete', 'options' => array()))), 'sorting' => array()), 'app_backend_topic' => array('driver' => array('name' => 'doctrine/orm', 'options' => array('class' => 'AppBundle\\Entity\\Topic')), 'sorting' => array('createdAt' => 'desc'), 'fields' => array('avatar' => array('type' => 'twig', 'label' => 'app.ui.avatar', 'path' => 'author', 'options' => array('template' => 'backend/customer/grid/field/avatar.html.twig'), 'enabled' => true), 'author.user.username' => array('type' => 'string', 'label' => 'sylius.ui.username', 'enabled' => true, 'options' => array()), 'title' => array('type' => 'string', 'label' => 'sylius.ui.title', 'sortable' => 'title', 'enabled' => true, 'options' => array()), 'createdAt' => array('type' => 'twig', 'label' => 'sylius.ui.created_at', 'sortable' => 'createdAt', 'options' => array('template' => 'backend/grid/field/date/medium.html.twig'), 'enabled' => true)), 'filters' => array('search' => array('type' => 'string', 'label' => 'sylius.ui.search', 'options' => array('fields' => array(0 => 'title')), 'enabled' => true)), 'actions' => array('item' => array('posts' => array('type' => 'list_posts', 'options' => array()), 'update' => array('type' => 'update', 'options' => array()), 'delete' => array('type' => 'delete', 'options' => array())))), 'app_frontend_game_play' => array('driver' => array('name' => 'doctrine/orm', 'options' => array('class' => 'AppBundle\\Entity\\GamePlay', 'repository' => array('method' => 'createCommentedListQueryBuilder', 'arguments' => array('locale' => 'fr_FR', 'criteria' => 'expr:service(\'request_stack\').getCurrentRequest().get(\'criteria\', [])')))), 'sorting' => array('createdAt' => 'desc'), 'fields' => array('createdAt' => array('type' => 'twig', 'label' => 'sylius.ui.created_at', 'sortable' => NULL, 'enabled' => true, 'options' => array()), 'topic.postCount' => array('type' => 'twig', 'sortable' => NULL, 'enabled' => true, 'options' => array())), 'filters' => array(), 'actions' => array()), 'app_frontend_game_play_from_author' => array('driver' => array('name' => 'doctrine/orm', 'options' => array('class' => 'AppBundle\\Entity\\GamePlay', 'repository' => array('method' => 'createListQueryBuilder', 'arguments' => array(0 => 'fr_FR', 1 => 'expr:service(\'app.context.customer\').getCustomer().getId()')))), 'sorting' => array('createdAt' => 'desc'), 'fields' => array('createdAt' => array('type' => 'twig', 'label' => 'sylius.ui.created_at', 'sortable' => NULL, 'enabled' => true, 'options' => array())), 'filters' => array(), 'actions' => array()), 'app_frontend_person' => array('driver' => array('name' => 'doctrine/orm', 'options' => array('class' => 'AppBundle\\Entity\\Person', 'repository' => array('method' => 'createListQueryBuilder'))), 'sorting' => array('createdAt' => 'desc'), 'fields' => array('createdAt' => array('type' => 'twig', 'label' => 'sylius.ui.created_at', 'sortable' => NULL, 'enabled' => true, 'options' => array())), 'filters' => array(), 'actions' => array()), 'app_frontend_person_from_taxon' => array('driver' => array('name' => 'doctrine/orm', 'options' => array('class' => 'AppBundle\\Entity\\Person', 'repository' => array('method' => 'createListQueryBuilder', 'arguments' => array(0 => 'expr:service(\'sylius.repository.taxon\').findOneByPermalink($permalink)')))), 'sorting' => array('createdAt' => 'desc'), 'fields' => array('createdAt' => array('type' => 'twig', 'label' => 'sylius.ui.created_at', 'sortable' => NULL, 'enabled' => true, 'options' => array())), 'filters' => array(), 'actions' => array()), 'sylius_frontend_product' => array('driver' => array('name' => 'doctrine/orm', 'options' => array('class' => 'AppBundle\\Entity\\Product', 'repository' => array('method' => 'createListQueryBuilder', 'arguments' => array('locale' => 'fr_FR', 'onlyPublished' => true, 'criteria' => 'expr:service(\'request_stack\').getCurrentRequest().get(\'criteria\', [])')))), 'sorting' => array('createdAt' => 'desc'), 'fields' => array('createdAt' => array('type' => 'string', 'sortable' => NULL, 'enabled' => true, 'options' => array()), 'averageRating' => array('type' => 'string', 'sortable' => NULL, 'enabled' => true, 'options' => array()), 'variant.releasedAt' => array('path' => 'variant.releasedAt', 'type' => 'string', 'sortable' => NULL, 'enabled' => true, 'options' => array())), 'filters' => array(), 'actions' => array()), 'app_frontend_product_list_item' => array('driver' => array('name' => 'doctrine/orm', 'options' => array('class' => 'AppBundle\\Entity\\ProductListItem', 'repository' => array('method' => 'createQueryBuilderByProductList', 'arguments' => array(0 => '$productListSlug', 1 => 'fr_FR')))), 'sorting' => array('createdAt' => 'desc'), 'fields' => array('createdAt' => array('type' => 'twig', 'label' => 'sylius.ui.created_at', 'sortable' => NULL, 'enabled' => true, 'options' => array())), 'filters' => array(), 'actions' => array())));
    }

    /**
     * Gets the 'sylius.grid.resource_view_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Grid\View\ResourceGridViewFactory A Sylius\Bundle\ResourceBundle\Grid\View\ResourceGridViewFactory instance
     */
    protected function getSylius_Grid_ResourceViewFactoryService()
    {
        return $this->services['sylius.grid.resource_view_factory'] = new \Sylius\Bundle\ResourceBundle\Grid\View\ResourceGridViewFactory($this->get('sylius.grid.data_provider'), ${($_ = isset($this->services['sylius.resource_controller.parameters_parser']) ? $this->services['sylius.resource_controller.parameters_parser'] : $this->getSylius_ResourceController_ParametersParserService()) && false ?: '_'});
    }

    /**
     * Gets the 'sylius.grid.sorter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Grid\Sorting\Sorter A Sylius\Component\Grid\Sorting\Sorter instance
     */
    protected function getSylius_Grid_SorterService()
    {
        return $this->services['sylius.grid.sorter'] = new \Sylius\Component\Grid\Sorting\Sorter();
    }

    /**
     * Gets the 'sylius.grid.view_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Grid\View\GridViewFactory A Sylius\Component\Grid\View\GridViewFactory instance
     */
    protected function getSylius_Grid_ViewFactoryService()
    {
        return $this->services['sylius.grid.view_factory'] = new \Sylius\Component\Grid\View\GridViewFactory($this->get('sylius.grid.data_provider'));
    }

    /**
     * Gets the 'sylius.grid_driver.doctrine.dbal' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\GridBundle\Doctrine\DBAL\Driver A Sylius\Bundle\GridBundle\Doctrine\DBAL\Driver instance
     */
    protected function getSylius_GridDriver_Doctrine_DbalService()
    {
        return $this->services['sylius.grid_driver.doctrine.dbal'] = new \Sylius\Bundle\GridBundle\Doctrine\DBAL\Driver($this->get('doctrine.dbal.default_connection'));
    }

    /**
     * Gets the 'sylius.grid_driver.doctrine.orm' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Doctrine\ORM\Driver A AppBundle\Doctrine\ORM\Driver instance
     */
    protected function getSylius_GridDriver_Doctrine_OrmService()
    {
        return $this->services['sylius.grid_driver.doctrine.orm'] = new \AppBundle\Doctrine\ORM\Driver($this->get('doctrine'));
    }

    /**
     * Gets the 'sylius.grid_field.datetime' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Grid\FieldTypes\DatetimeFieldType A Sylius\Component\Grid\FieldTypes\DatetimeFieldType instance
     */
    protected function getSylius_GridField_DatetimeService()
    {
        return $this->services['sylius.grid_field.datetime'] = new \Sylius\Component\Grid\FieldTypes\DatetimeFieldType($this->get('sylius.grid.data_extractor.property_access'));
    }

    /**
     * Gets the 'sylius.grid_field.string' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Grid\FieldTypes\StringFieldType A Sylius\Component\Grid\FieldTypes\StringFieldType instance
     */
    protected function getSylius_GridField_StringService()
    {
        return $this->services['sylius.grid_field.string'] = new \Sylius\Component\Grid\FieldTypes\StringFieldType($this->get('sylius.grid.data_extractor.property_access'));
    }

    /**
     * Gets the 'sylius.grid_field.twig' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\GridBundle\FieldTypes\TwigFieldType A Sylius\Bundle\GridBundle\FieldTypes\TwigFieldType instance
     */
    protected function getSylius_GridField_TwigService()
    {
        return $this->services['sylius.grid_field.twig'] = new \Sylius\Bundle\GridBundle\FieldTypes\TwigFieldType($this->get('sylius.grid.data_extractor.property_access'), $this->get('twig'));
    }

    /**
     * Gets the 'sylius.grid_filter.boolean' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Grid\Filter\BooleanFilter A Sylius\Component\Grid\Filter\BooleanFilter instance
     */
    protected function getSylius_GridFilter_BooleanService()
    {
        return $this->services['sylius.grid_filter.boolean'] = new \Sylius\Component\Grid\Filter\BooleanFilter();
    }

    /**
     * Gets the 'sylius.grid_filter.string' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Grid\Filter\StringFilter A Sylius\Component\Grid\Filter\StringFilter instance
     */
    protected function getSylius_GridFilter_StringService()
    {
        return $this->services['sylius.grid_filter.string'] = new \Sylius\Component\Grid\Filter\StringFilter();
    }

    /**
     * Gets the 'sylius.installer.checker.command_directory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Installer\Checker\CommandDirectoryChecker A AppBundle\Installer\Checker\CommandDirectoryChecker instance
     */
    protected function getSylius_Installer_Checker_CommandDirectoryService()
    {
        return $this->services['sylius.installer.checker.command_directory'] = new \AppBundle\Installer\Checker\CommandDirectoryChecker($this->get('filesystem'));
    }

    /**
     * Gets the 'sylius.listener.admin_oauth_user.reloader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\UserBundle\EventListener\UserReloaderListener A Sylius\Bundle\UserBundle\EventListener\UserReloaderListener instance
     */
    protected function getSylius_Listener_AdminOauthUser_ReloaderService()
    {
        return $this->services['sylius.listener.admin_oauth_user.reloader'] = new \Sylius\Bundle\UserBundle\EventListener\UserReloaderListener($this->get('sylius.admin_oauth_user.reloader'));
    }

    /**
     * Gets the 'sylius.listener.admin_oauth_user_delete' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\UserBundle\EventListener\UserDeleteListener A Sylius\Bundle\UserBundle\EventListener\UserDeleteListener instance
     */
    protected function getSylius_Listener_AdminOauthUserDeleteService()
    {
        return $this->services['sylius.listener.admin_oauth_user_delete'] = new \Sylius\Bundle\UserBundle\EventListener\UserDeleteListener($this->get('security.token_storage'), $this->get('session'));
    }

    /**
     * Gets the 'sylius.listener.admin_oauth_user_last_login' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\UserBundle\EventListener\UserLastLoginSubscriber A Sylius\Bundle\UserBundle\EventListener\UserLastLoginSubscriber instance
     */
    protected function getSylius_Listener_AdminOauthUserLastLoginService()
    {
        return $this->services['sylius.listener.admin_oauth_user_last_login'] = new \Sylius\Bundle\UserBundle\EventListener\UserLastLoginSubscriber($this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'sylius.listener.canonicalizer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\EventListener\CanonicalizerListener A AppBundle\EventListener\CanonicalizerListener instance
     */
    protected function getSylius_Listener_CanonicalizerService()
    {
        return $this->services['sylius.listener.canonicalizer'] = new \AppBundle\EventListener\CanonicalizerListener($this->get('sylius.canonicalizer'));
    }

    /**
     * Gets the 'sylius.listener.password_updater' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\EventListener\PasswordUpdaterListener A AppBundle\EventListener\PasswordUpdaterListener instance
     */
    protected function getSylius_Listener_PasswordUpdaterService()
    {
        return $this->services['sylius.listener.password_updater'] = new \AppBundle\EventListener\PasswordUpdaterListener($this->get('sylius.security.password_updater'));
    }

    /**
     * Gets the 'sylius.listener.request_locale_setter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\LocaleBundle\Listener\RequestLocaleSetter A Sylius\Bundle\LocaleBundle\Listener\RequestLocaleSetter instance
     */
    protected function getSylius_Listener_RequestLocaleSetterService()
    {
        return $this->services['sylius.listener.request_locale_setter'] = new \Sylius\Bundle\LocaleBundle\Listener\RequestLocaleSetter($this->get('sylius.context.locale'), $this->get('sylius.locale_provider'));
    }

    /**
     * Gets the 'sylius.listener.review_change' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ReviewBundle\EventListener\ReviewChangeListener A Sylius\Bundle\ReviewBundle\EventListener\ReviewChangeListener instance
     */
    protected function getSylius_Listener_ReviewChangeService()
    {
        return $this->services['sylius.listener.review_change'] = new \Sylius\Bundle\ReviewBundle\EventListener\ReviewChangeListener($this->get('sylius.average_rating_updater'));
    }

    /**
     * Gets the 'sylius.listener.shop_user.reloader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\UserBundle\EventListener\UserReloaderListener A Sylius\Bundle\UserBundle\EventListener\UserReloaderListener instance
     */
    protected function getSylius_Listener_ShopUser_ReloaderService()
    {
        return $this->services['sylius.listener.shop_user.reloader'] = new \Sylius\Bundle\UserBundle\EventListener\UserReloaderListener($this->get('sylius.shop_user.reloader'));
    }

    /**
     * Gets the 'sylius.listener.shop_user_delete' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\UserBundle\EventListener\UserDeleteListener A Sylius\Bundle\UserBundle\EventListener\UserDeleteListener instance
     */
    protected function getSylius_Listener_ShopUserDeleteService()
    {
        return $this->services['sylius.listener.shop_user_delete'] = new \Sylius\Bundle\UserBundle\EventListener\UserDeleteListener($this->get('security.token_storage'), $this->get('session'));
    }

    /**
     * Gets the 'sylius.listener.shop_user_last_login' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\UserBundle\EventListener\UserLastLoginSubscriber A Sylius\Bundle\UserBundle\EventListener\UserLastLoginSubscriber instance
     */
    protected function getSylius_Listener_ShopUserLastLoginService()
    {
        return $this->services['sylius.listener.shop_user_last_login'] = new \Sylius\Bundle\UserBundle\EventListener\UserLastLoginSubscriber($this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'sylius.listener.user_mailer_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\UserBundle\EventListener\MailerListener A Sylius\Bundle\UserBundle\EventListener\MailerListener instance
     */
    protected function getSylius_Listener_UserMailerListenerService()
    {
        return $this->services['sylius.listener.user_mailer_listener'] = new \Sylius\Bundle\UserBundle\EventListener\MailerListener($this->get('sylius.email_sender'));
    }

    /**
     * Gets the 'sylius.listener.user_registration' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\EventListener\UserRegistrationListener A AppBundle\EventListener\UserRegistrationListener instance
     */
    protected function getSylius_Listener_UserRegistrationService()
    {
        return $this->services['sylius.listener.user_registration'] = new \AppBundle\EventListener\UserRegistrationListener($this->get('doctrine.orm.default_entity_manager'), $this->get('sylius.shop_user.token_generator.email_verification'), $this->get('debug.event_dispatcher'));
    }

    /**
     * Gets the 'sylius.locale_converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Locale\Converter\LocaleConverter A Sylius\Component\Locale\Converter\LocaleConverter instance
     */
    protected function getSylius_LocaleConverterService()
    {
        return $this->services['sylius.locale_converter'] = new \Sylius\Component\Locale\Converter\LocaleConverter();
    }

    /**
     * Gets the 'sylius.locale_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Locale\Provider\LocaleProvider A Sylius\Component\Locale\Provider\LocaleProvider instance
     */
    protected function getSylius_LocaleProviderService()
    {
        return $this->services['sylius.locale_provider'] = new \Sylius\Component\Locale\Provider\LocaleProvider($this->get('sylius.repository.locale'), 'fr_FR');
    }

    /**
     * Gets the 'sylius.mailer.default_settings_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Mailer\Provider\DefaultSettingsProvider A Sylius\Component\Mailer\Provider\DefaultSettingsProvider instance
     */
    protected function getSylius_Mailer_DefaultSettingsProviderService()
    {
        return $this->services['sylius.mailer.default_settings_provider'] = new \Sylius\Component\Mailer\Provider\DefaultSettingsProvider('Contact Jedisjeux', 'no-reply@jedisjeux.net');
    }

    /**
     * Gets the 'sylius.product_variant_resolver.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Product\Resolver\DefaultProductVariantResolver A Sylius\Component\Product\Resolver\DefaultProductVariantResolver instance
     */
    protected function getSylius_ProductVariantResolver_DefaultService()
    {
        return $this->services['sylius.product_variant_resolver.default'] = new \Sylius\Component\Product\Resolver\DefaultProductVariantResolver();
    }

    /**
     * Gets the 'sylius.registry.attribute_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Registry\ServiceRegistry A Sylius\Component\Registry\ServiceRegistry instance
     */
    protected function getSylius_Registry_AttributeTypeService()
    {
        $this->services['sylius.registry.attribute_type'] = $instance = new \Sylius\Component\Registry\ServiceRegistry('Sylius\\Component\\Attribute\\AttributeType\\AttributeTypeInterface', 'attribute type');

        $instance->register('text', $this->get('sylius.attribute_type.text'));
        $instance->register('textarea', $this->get('sylius.attribute_type.textarea'));
        $instance->register('checkbox', $this->get('sylius.attribute_type.checkbox'));
        $instance->register('integer', $this->get('sylius.attribute_type.integer'));
        $instance->register('percent', $this->get('sylius.attribute_type.percent'));
        $instance->register('datetime', $this->get('sylius.attribute_type.datetime'));
        $instance->register('date', $this->get('sylius.attribute_type.date'));

        return $instance;
    }

    /**
     * Gets the 'sylius.registry.grid_driver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Registry\ServiceRegistry A Sylius\Component\Registry\ServiceRegistry instance
     */
    protected function getSylius_Registry_GridDriverService()
    {
        $this->services['sylius.registry.grid_driver'] = $instance = new \Sylius\Component\Registry\ServiceRegistry('Sylius\\Component\\Grid\\Data\\DriverInterface', 'grid driver');

        $instance->register('doctrine/orm', $this->get('sylius.grid_driver.doctrine.orm'));
        $instance->register('doctrine/dbal', $this->get('sylius.grid_driver.doctrine.dbal'));

        return $instance;
    }

    /**
     * Gets the 'sylius.registry.grid_field' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Registry\ServiceRegistry A Sylius\Component\Registry\ServiceRegistry instance
     */
    protected function getSylius_Registry_GridFieldService()
    {
        $this->services['sylius.registry.grid_field'] = $instance = new \Sylius\Component\Registry\ServiceRegistry('Sylius\\Component\\Grid\\FieldTypes\\FieldTypeInterface', 'grid field');

        $instance->register('datetime', $this->get('sylius.grid_field.datetime'));
        $instance->register('string', $this->get('sylius.grid_field.string'));
        $instance->register('twig', $this->get('sylius.grid_field.twig'));

        return $instance;
    }

    /**
     * Gets the 'sylius.registry.grid_filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Registry\ServiceRegistry A Sylius\Component\Registry\ServiceRegistry instance
     */
    protected function getSylius_Registry_GridFilterService()
    {
        $this->services['sylius.registry.grid_filter'] = $instance = new \Sylius\Component\Registry\ServiceRegistry('Sylius\\Component\\Grid\\Filtering\\FilterInterface', 'grid filter');

        $instance->register('string', $this->get('sylius.grid_filter.string'));
        $instance->register('boolean', $this->get('sylius.grid_filter.boolean'));

        return $instance;
    }

    /**
     * Gets the 'sylius.repository.admin_oauth_user' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository A Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository instance
     */
    protected function getSylius_Repository_AdminOauthUserService()
    {
        return $this->services['sylius.repository.admin_oauth_user'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('Sylius\\Component\\User\\Model\\UserOAuth'));
    }

    /**
     * Gets the 'sylius.repository.customer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Repository\CustomerRepository A AppBundle\Repository\CustomerRepository instance
     */
    protected function getSylius_Repository_CustomerService()
    {
        return $this->services['sylius.repository.customer'] = new \AppBundle\Repository\CustomerRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('AppBundle\\Entity\\Customer'));
    }

    /**
     * Gets the 'sylius.repository.customer_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository A Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository instance
     */
    protected function getSylius_Repository_CustomerGroupService()
    {
        return $this->services['sylius.repository.customer_group'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('Sylius\\Component\\Customer\\Model\\CustomerGroup'));
    }

    /**
     * Gets the 'sylius.repository.locale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository A Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository instance
     */
    public function getSylius_Repository_LocaleService($lazyLoad = true)
    {
        if ($lazyLoad) {

            return $this->services['sylius.repository.locale'] = SyliusBundleResourceBundleDoctrineORMEntityRepository_000000004b511bf3000000000f6225f6877f40b66baaf9ca0d0afe40b8a3d26d::staticProxyConstructor(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) {
                    $wrappedInstance = $this->getSylius_Repository_LocaleService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('Sylius\\Component\\Locale\\Model\\Locale'));
    }

    /**
     * Gets the 'sylius.repository.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Repository\ProductRepository A AppBundle\Repository\ProductRepository instance
     */
    protected function getSylius_Repository_ProductService()
    {
        return $this->services['sylius.repository.product'] = new \AppBundle\Repository\ProductRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('AppBundle\\Entity\\Product'));
    }

    /**
     * Gets the 'sylius.repository.product_association' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository A Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository instance
     */
    protected function getSylius_Repository_ProductAssociationService()
    {
        return $this->services['sylius.repository.product_association'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('Sylius\\Component\\Product\\Model\\ProductAssociation'));
    }

    /**
     * Gets the 'sylius.repository.product_association_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository A Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository instance
     */
    protected function getSylius_Repository_ProductAssociationTypeService()
    {
        return $this->services['sylius.repository.product_association_type'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('Sylius\\Component\\Product\\Model\\ProductAssociationType'));
    }

    /**
     * Gets the 'sylius.repository.product_attribute' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\AttributeBundle\Doctrine\ORM\AttributeRepository A Sylius\Bundle\AttributeBundle\Doctrine\ORM\AttributeRepository instance
     */
    protected function getSylius_Repository_ProductAttributeService()
    {
        return $this->services['sylius.repository.product_attribute'] = new \Sylius\Bundle\AttributeBundle\Doctrine\ORM\AttributeRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('Sylius\\Component\\Product\\Model\\ProductAttribute'));
    }

    /**
     * Gets the 'sylius.repository.product_attribute_translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository A Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository instance
     */
    protected function getSylius_Repository_ProductAttributeTranslationService()
    {
        return $this->services['sylius.repository.product_attribute_translation'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('Sylius\\Component\\Product\\Model\\ProductAttributeTranslation'));
    }

    /**
     * Gets the 'sylius.repository.product_attribute_value' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository A Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository instance
     */
    protected function getSylius_Repository_ProductAttributeValueService()
    {
        return $this->services['sylius.repository.product_attribute_value'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('Sylius\\Component\\Product\\Model\\ProductAttributeValue'));
    }

    /**
     * Gets the 'sylius.repository.product_option' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ProductBundle\Doctrine\ORM\ProductOptionRepository A Sylius\Bundle\ProductBundle\Doctrine\ORM\ProductOptionRepository instance
     */
    protected function getSylius_Repository_ProductOptionService()
    {
        return $this->services['sylius.repository.product_option'] = new \Sylius\Bundle\ProductBundle\Doctrine\ORM\ProductOptionRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('Sylius\\Component\\Product\\Model\\ProductOption'));
    }

    /**
     * Gets the 'sylius.repository.product_option_translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository A Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository instance
     */
    protected function getSylius_Repository_ProductOptionTranslationService()
    {
        return $this->services['sylius.repository.product_option_translation'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('Sylius\\Component\\Product\\Model\\ProductOptionTranslation'));
    }

    /**
     * Gets the 'sylius.repository.product_option_value' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository A Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository instance
     */
    protected function getSylius_Repository_ProductOptionValueService()
    {
        return $this->services['sylius.repository.product_option_value'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('Sylius\\Component\\Product\\Model\\ProductOptionValue'));
    }

    /**
     * Gets the 'sylius.repository.product_option_value_translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository A Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository instance
     */
    protected function getSylius_Repository_ProductOptionValueTranslationService()
    {
        return $this->services['sylius.repository.product_option_value_translation'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('Sylius\\Component\\Product\\Model\\ProductOptionValueTranslation'));
    }

    /**
     * Gets the 'sylius.repository.product_review' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Repository\ProductReviewRepository A AppBundle\Repository\ProductReviewRepository instance
     */
    protected function getSylius_Repository_ProductReviewService()
    {
        return $this->services['sylius.repository.product_review'] = new \AppBundle\Repository\ProductReviewRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('AppBundle\\Entity\\ProductReview'));
    }

    /**
     * Gets the 'sylius.repository.product_reviewer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository A Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository instance
     */
    protected function getSylius_Repository_ProductReviewerService()
    {
        return $this->services['sylius.repository.product_reviewer'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('AppBundle\\Entity\\Customer'));
    }

    /**
     * Gets the 'sylius.repository.product_translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository A Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository instance
     */
    protected function getSylius_Repository_ProductTranslationService()
    {
        return $this->services['sylius.repository.product_translation'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('AppBundle\\Entity\\ProductTranslation'));
    }

    /**
     * Gets the 'sylius.repository.product_variant' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Repository\ProductVariantRepository A AppBundle\Repository\ProductVariantRepository instance
     */
    protected function getSylius_Repository_ProductVariantService()
    {
        return $this->services['sylius.repository.product_variant'] = new \AppBundle\Repository\ProductVariantRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('AppBundle\\Entity\\ProductVariant'));
    }

    /**
     * Gets the 'sylius.repository.shop_user' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Repository\UserRepository A AppBundle\Repository\UserRepository instance
     */
    protected function getSylius_Repository_ShopUserService()
    {
        return $this->services['sylius.repository.shop_user'] = new \AppBundle\Repository\UserRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('AppBundle\\Entity\\User'));
    }

    /**
     * Gets the 'sylius.repository.taxon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Repository\TaxonRepository A AppBundle\Repository\TaxonRepository instance
     */
    protected function getSylius_Repository_TaxonService()
    {
        return $this->services['sylius.repository.taxon'] = new \AppBundle\Repository\TaxonRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('AppBundle\\Entity\\Taxon'));
    }

    /**
     * Gets the 'sylius.repository.taxon_translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository A Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository instance
     */
    protected function getSylius_Repository_TaxonTranslationService()
    {
        return $this->services['sylius.repository.taxon_translation'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository($this->get('doctrine.orm.default_entity_manager'), $this->get('doctrine.orm.default_entity_manager')->getClassMetadata('AppBundle\\Entity\\TaxonTranslation'));
    }

    /**
     * Gets the 'sylius.resource_controller.authorization_checker' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\DisabledAuthorizationChecker A Sylius\Bundle\ResourceBundle\Controller\DisabledAuthorizationChecker instance
     */
    protected function getSylius_ResourceController_AuthorizationCheckerService()
    {
        return $this->services['sylius.resource_controller.authorization_checker'] = new \Sylius\Bundle\ResourceBundle\Controller\DisabledAuthorizationChecker();
    }

    /**
     * Gets the 'sylius.resource_controller.resources_resolver.grid_aware' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Grid\Controller\ResourcesResolver A Sylius\Bundle\ResourceBundle\Grid\Controller\ResourcesResolver instance
     */
    protected function getSylius_ResourceController_ResourcesResolver_GridAwareService()
    {
        return $this->services['sylius.resource_controller.resources_resolver.grid_aware'] = new \Sylius\Bundle\ResourceBundle\Grid\Controller\ResourcesResolver(new \Sylius\Bundle\ResourceBundle\Controller\ResourcesResolver(), $this->get('sylius.grid.provider'), $this->get('sylius.grid.resource_view_factory'));
    }

    /**
     * Gets the 'sylius.security.password_encoder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\UserBundle\Security\UserPasswordEncoder A Sylius\Bundle\UserBundle\Security\UserPasswordEncoder instance
     */
    protected function getSylius_Security_PasswordEncoderService()
    {
        return $this->services['sylius.security.password_encoder'] = new \Sylius\Bundle\UserBundle\Security\UserPasswordEncoder($this->get('security.encoder_factory'));
    }

    /**
     * Gets the 'sylius.security.password_updater' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\User\Security\PasswordUpdater A Sylius\Component\User\Security\PasswordUpdater instance
     */
    protected function getSylius_Security_PasswordUpdaterService()
    {
        return $this->services['sylius.security.password_updater'] = new \Sylius\Component\User\Security\PasswordUpdater($this->get('sylius.security.password_encoder'));
    }

    /**
     * Gets the 'sylius.security.user_login' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\UserBundle\Security\UserLogin A Sylius\Bundle\UserBundle\Security\UserLogin instance
     */
    protected function getSylius_Security_UserLoginService()
    {
        return $this->services['sylius.security.user_login'] = new \Sylius\Bundle\UserBundle\Security\UserLogin($this->get('security.token_storage'), ${($_ = isset($this->services['security.user_checker']) ? $this->services['security.user_checker'] : $this->getSecurity_UserCheckerService()) && false ?: '_'}, $this->get('debug.event_dispatcher'));
    }

    /**
     * Gets the 'sylius.setup.locale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Installer\Setup\LocaleSetup A AppBundle\Installer\Setup\LocaleSetup instance
     */
    protected function getSylius_Setup_LocaleService()
    {
        return $this->services['sylius.setup.locale'] = new \AppBundle\Installer\Setup\LocaleSetup($this->get('sylius.repository.locale'), $this->get('sylius.factory.locale'), 'fr_FR');
    }

    /**
     * Gets the 'sylius.shop_user.pin_generator.password_reset' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\User\Security\Generator\UniquePinGenerator A Sylius\Component\User\Security\Generator\UniquePinGenerator instance
     */
    protected function getSylius_ShopUser_PinGenerator_PasswordResetService()
    {
        return $this->services['sylius.shop_user.pin_generator.password_reset'] = new \Sylius\Component\User\Security\Generator\UniquePinGenerator($this->get('sylius.shop_user.pin_uniqueness_checker.password_reset'), 4);
    }

    /**
     * Gets the 'sylius.shop_user.pin_uniqueness_checker.password_reset' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\User\Security\Checker\TokenUniquenessChecker A Sylius\Component\User\Security\Checker\TokenUniquenessChecker instance
     */
    protected function getSylius_ShopUser_PinUniquenessChecker_PasswordResetService()
    {
        return $this->services['sylius.shop_user.pin_uniqueness_checker.password_reset'] = new \Sylius\Component\User\Security\Checker\TokenUniquenessChecker($this->get('sylius.repository.shop_user'), 'passwordResetToken');
    }

    /**
     * Gets the 'sylius.shop_user.reloader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\UserBundle\Reloader\UserReloader A Sylius\Bundle\UserBundle\Reloader\UserReloader instance
     */
    protected function getSylius_ShopUser_ReloaderService()
    {
        return $this->services['sylius.shop_user.reloader'] = new \Sylius\Bundle\UserBundle\Reloader\UserReloader($this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'sylius.shop_user.token_generator.email_verification' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\User\Security\Generator\UniqueTokenGenerator A Sylius\Component\User\Security\Generator\UniqueTokenGenerator instance
     */
    protected function getSylius_ShopUser_TokenGenerator_EmailVerificationService()
    {
        return $this->services['sylius.shop_user.token_generator.email_verification'] = new \Sylius\Component\User\Security\Generator\UniqueTokenGenerator($this->get('sylius.shop_user.token_uniqueness_checker.email_verification'), 16);
    }

    /**
     * Gets the 'sylius.shop_user.token_generator.password_reset' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\User\Security\Generator\UniqueTokenGenerator A Sylius\Component\User\Security\Generator\UniqueTokenGenerator instance
     */
    protected function getSylius_ShopUser_TokenGenerator_PasswordResetService()
    {
        return $this->services['sylius.shop_user.token_generator.password_reset'] = new \Sylius\Component\User\Security\Generator\UniqueTokenGenerator($this->get('sylius.shop_user.token_uniqueness_checker.password_reset'), 16);
    }

    /**
     * Gets the 'sylius.shop_user.token_uniqueness_checker.email_verification' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\User\Security\Checker\TokenUniquenessChecker A Sylius\Component\User\Security\Checker\TokenUniquenessChecker instance
     */
    protected function getSylius_ShopUser_TokenUniquenessChecker_EmailVerificationService()
    {
        return $this->services['sylius.shop_user.token_uniqueness_checker.email_verification'] = new \Sylius\Component\User\Security\Checker\TokenUniquenessChecker($this->get('sylius.repository.shop_user'), 'emailVerificationToken');
    }

    /**
     * Gets the 'sylius.shop_user.token_uniqueness_checker.password_reset' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\User\Security\Checker\TokenUniquenessChecker A Sylius\Component\User\Security\Checker\TokenUniquenessChecker instance
     */
    protected function getSylius_ShopUser_TokenUniquenessChecker_PasswordResetService()
    {
        return $this->services['sylius.shop_user.token_uniqueness_checker.password_reset'] = new \Sylius\Component\User\Security\Checker\TokenUniquenessChecker($this->get('sylius.repository.shop_user'), 'passwordResetToken');
    }

    /**
     * Gets the 'sylius.shop_user_provider.email_based' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Sylius\Bundle\UserBundle\Provider\EmailProvider A Sylius\Bundle\UserBundle\Provider\EmailProvider instance
     */
    public function getSylius_ShopUserProvider_EmailBasedService($lazyLoad = true)
    {
        if ($lazyLoad) {

            return $this->services['sylius.shop_user_provider.email_based'] = SyliusBundleUserBundleProviderEmailProvider_000000004b5112d5000000000f6225f6877f40b66baaf9ca0d0afe40b8a3d26d::staticProxyConstructor(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) {
                    $wrappedInstance = $this->getSylius_ShopUserProvider_EmailBasedService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Sylius\Bundle\UserBundle\Provider\EmailProvider('AppBundle\\Entity\\User', $this->get('sylius.repository.shop_user'), $this->get('sylius.canonicalizer'));
    }

    /**
     * Gets the 'sylius.shop_user_provider.email_or_name_based' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Sylius\Bundle\UserBundle\Provider\UsernameOrEmailProvider A Sylius\Bundle\UserBundle\Provider\UsernameOrEmailProvider instance
     */
    public function getSylius_ShopUserProvider_EmailOrNameBasedService($lazyLoad = true)
    {
        if ($lazyLoad) {

            return $this->services['sylius.shop_user_provider.email_or_name_based'] = SyliusBundleUserBundleProviderUsernameOrEmailProvider_000000004b5112d3000000000f6225f6877f40b66baaf9ca0d0afe40b8a3d26d::staticProxyConstructor(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) {
                    $wrappedInstance = $this->getSylius_ShopUserProvider_EmailOrNameBasedService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Sylius\Bundle\UserBundle\Provider\UsernameOrEmailProvider('AppBundle\\Entity\\User', $this->get('sylius.repository.shop_user'), $this->get('sylius.canonicalizer'));
    }

    /**
     * Gets the 'sylius.shop_user_provider.name_based' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Sylius\Bundle\UserBundle\Provider\UsernameProvider A Sylius\Bundle\UserBundle\Provider\UsernameProvider instance
     */
    public function getSylius_ShopUserProvider_NameBasedService($lazyLoad = true)
    {
        if ($lazyLoad) {

            return $this->services['sylius.shop_user_provider.name_based'] = SyliusBundleUserBundleProviderUsernameProvider_000000004b5112d2000000000f6225f6877f40b66baaf9ca0d0afe40b8a3d26d::staticProxyConstructor(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) {
                    $wrappedInstance = $this->getSylius_ShopUserProvider_NameBasedService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Sylius\Bundle\UserBundle\Provider\UsernameProvider('AppBundle\\Entity\\User', $this->get('sylius.repository.shop_user'), $this->get('sylius.canonicalizer'));
    }

    /**
     * Gets the 'sylius.templating.helper.grid' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Sylius\Bundle\GridBundle\Templating\Helper\GridHelper A Sylius\Bundle\GridBundle\Templating\Helper\GridHelper instance
     */
    public function getSylius_Templating_Helper_GridService($lazyLoad = true)
    {
        if ($lazyLoad) {

            return $this->services['sylius.templating.helper.grid'] = SyliusBundleGridBundleTemplatingHelperGridHelper_000000004b51070b000000000f6225f6877f40b66baaf9ca0d0afe40b8a3d26d::staticProxyConstructor(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) {
                    $wrappedInstance = $this->getSylius_Templating_Helper_GridService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Sylius\Bundle\GridBundle\Templating\Helper\GridHelper($this->get('sylius.custom_grid_renderer.twig'));
    }

    /**
     * Gets the 'sylius.templating.helper.locale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\LocaleBundle\Templating\Helper\LocaleHelper A Sylius\Bundle\LocaleBundle\Templating\Helper\LocaleHelper instance
     */
    protected function getSylius_Templating_Helper_LocaleService()
    {
        return $this->services['sylius.templating.helper.locale'] = new \Sylius\Bundle\LocaleBundle\Templating\Helper\LocaleHelper($this->get('sylius.locale_converter'));
    }

    /**
     * Gets the 'sylius.translatable_entity_locale_assigner' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Resource\Translation\TranslatableEntityLocaleAssigner A Sylius\Component\Resource\Translation\TranslatableEntityLocaleAssigner instance
     */
    protected function getSylius_TranslatableEntityLocaleAssignerService()
    {
        return $this->services['sylius.translatable_entity_locale_assigner'] = new \Sylius\Component\Resource\Translation\TranslatableEntityLocaleAssigner($this->get('sylius.translation_locale_provider.immutable'));
    }

    /**
     * Gets the 'sylius.translation.translatable_listener.doctrine.orm' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ResourceBundle\EventListener\ORMTranslatableListener A Sylius\Bundle\ResourceBundle\EventListener\ORMTranslatableListener instance
     */
    protected function getSylius_Translation_TranslatableListener_Doctrine_OrmService()
    {
        return $this->services['sylius.translation.translatable_listener.doctrine.orm'] = new \Sylius\Bundle\ResourceBundle\EventListener\ORMTranslatableListener(${($_ = isset($this->services['sylius.resource_registry']) ? $this->services['sylius.resource_registry'] : $this->getSylius_ResourceRegistryService()) && false ?: '_'}, $this);
    }

    /**
     * Gets the 'sylius.translation_locale_provider.immutable' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Component\Resource\Translation\Provider\ImmutableTranslationLocaleProvider A Sylius\Component\Resource\Translation\Provider\ImmutableTranslationLocaleProvider instance
     */
    protected function getSylius_TranslationLocaleProvider_ImmutableService()
    {
        return $this->services['sylius.translation_locale_provider.immutable'] = new \Sylius\Component\Resource\Translation\Provider\ImmutableTranslationLocaleProvider(array(0 => 'fr_FR'), 'fr_FR');
    }

    /**
     * Gets the 'sylius.validator.customer_initializer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\Validator\Initializer\CustomerInitializer A AppBundle\Validator\Initializer\CustomerInitializer instance
     */
    protected function getSylius_Validator_CustomerInitializerService()
    {
        return $this->services['sylius.validator.customer_initializer'] = new \AppBundle\Validator\Initializer\CustomerInitializer($this->get('sylius.canonicalizer'));
    }

    /**
     * Gets the 'sylius.validator.product_code_uniqueness' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ProductBundle\Validator\UniqueSimpleProductCodeValidator A Sylius\Bundle\ProductBundle\Validator\UniqueSimpleProductCodeValidator instance
     */
    protected function getSylius_Validator_ProductCodeUniquenessService()
    {
        return $this->services['sylius.validator.product_code_uniqueness'] = new \Sylius\Bundle\ProductBundle\Validator\UniqueSimpleProductCodeValidator($this->get('sylius.repository.product_variant'));
    }

    /**
     * Gets the 'sylius.validator.product_variant_combination' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\ProductBundle\Validator\ProductVariantCombinationValidator A Sylius\Bundle\ProductBundle\Validator\ProductVariantCombinationValidator instance
     */
    protected function getSylius_Validator_ProductVariantCombinationService()
    {
        return $this->services['sylius.validator.product_variant_combination'] = new \Sylius\Bundle\ProductBundle\Validator\ProductVariantCombinationValidator($this->get('sylius.checker.product_variants_parity'));
    }

    /**
     * Gets the 'sylius.validator.valid_attribute_value' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\AttributeBundle\Validator\Constraints\ValidAttributeValueValidator A Sylius\Bundle\AttributeBundle\Validator\Constraints\ValidAttributeValueValidator instance
     */
    protected function getSylius_Validator_ValidAttributeValueService()
    {
        return $this->services['sylius.validator.valid_attribute_value'] = new \Sylius\Bundle\AttributeBundle\Validator\Constraints\ValidAttributeValueValidator($this->get('sylius.registry.attribute_type'));
    }

    /**
     * Gets the 'templating' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\TwigBundle\TwigEngine A Symfony\Bundle\TwigBundle\TwigEngine instance
     */
    protected function getTemplatingService()
    {
        return $this->services['templating'] = new \Symfony\Bundle\TwigBundle\TwigEngine($this->get('twig'), $this->get('templating.name_parser'), ${($_ = isset($this->services['templating.locator']) ? $this->services['templating.locator'] : $this->getTemplating_LocatorService()) && false ?: '_'});
    }

    /**
     * Gets the 'templating.filename_parser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\TemplateFilenameParser A Symfony\Bundle\FrameworkBundle\Templating\TemplateFilenameParser instance
     */
    protected function getTemplating_FilenameParserService()
    {
        return $this->services['templating.filename_parser'] = new \Symfony\Bundle\FrameworkBundle\Templating\TemplateFilenameParser();
    }

    /**
     * Gets the 'templating.helper.logout_url' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Templating\Helper\LogoutUrlHelper A Symfony\Bundle\SecurityBundle\Templating\Helper\LogoutUrlHelper instance
     */
    protected function getTemplating_Helper_LogoutUrlService()
    {
        return $this->services['templating.helper.logout_url'] = new \Symfony\Bundle\SecurityBundle\Templating\Helper\LogoutUrlHelper(${($_ = isset($this->services['security.logout_url_generator']) ? $this->services['security.logout_url_generator'] : $this->getSecurity_LogoutUrlGeneratorService()) && false ?: '_'});
    }

    /**
     * Gets the 'templating.helper.security' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Templating\Helper\SecurityHelper A Symfony\Bundle\SecurityBundle\Templating\Helper\SecurityHelper instance
     */
    protected function getTemplating_Helper_SecurityService()
    {
        return $this->services['templating.helper.security'] = new \Symfony\Bundle\SecurityBundle\Templating\Helper\SecurityHelper($this->get('security.authorization_checker', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'templating.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Loader\FilesystemLoader A Symfony\Bundle\FrameworkBundle\Templating\Loader\FilesystemLoader instance
     */
    protected function getTemplating_LoaderService()
    {
        return $this->services['templating.loader'] = new \Symfony\Bundle\FrameworkBundle\Templating\Loader\FilesystemLoader(${($_ = isset($this->services['templating.locator']) ? $this->services['templating.locator'] : $this->getTemplating_LocatorService()) && false ?: '_'});
    }

    /**
     * Gets the 'templating.name_parser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\TemplateNameParser A Symfony\Bundle\FrameworkBundle\Templating\TemplateNameParser instance
     */
    protected function getTemplating_NameParserService()
    {
        return $this->services['templating.name_parser'] = new \Symfony\Bundle\FrameworkBundle\Templating\TemplateNameParser($this->get('kernel'));
    }

    /**
     * Gets the 'translation.dumper.csv' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\CsvFileDumper A Symfony\Component\Translation\Dumper\CsvFileDumper instance
     */
    protected function getTranslation_Dumper_CsvService()
    {
        return $this->services['translation.dumper.csv'] = new \Symfony\Component\Translation\Dumper\CsvFileDumper();
    }

    /**
     * Gets the 'translation.dumper.ini' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\IniFileDumper A Symfony\Component\Translation\Dumper\IniFileDumper instance
     */
    protected function getTranslation_Dumper_IniService()
    {
        return $this->services['translation.dumper.ini'] = new \Symfony\Component\Translation\Dumper\IniFileDumper();
    }

    /**
     * Gets the 'translation.dumper.json' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\JsonFileDumper A Symfony\Component\Translation\Dumper\JsonFileDumper instance
     */
    protected function getTranslation_Dumper_JsonService()
    {
        return $this->services['translation.dumper.json'] = new \Symfony\Component\Translation\Dumper\JsonFileDumper();
    }

    /**
     * Gets the 'translation.dumper.mo' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\MoFileDumper A Symfony\Component\Translation\Dumper\MoFileDumper instance
     */
    protected function getTranslation_Dumper_MoService()
    {
        return $this->services['translation.dumper.mo'] = new \Symfony\Component\Translation\Dumper\MoFileDumper();
    }

    /**
     * Gets the 'translation.dumper.php' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\PhpFileDumper A Symfony\Component\Translation\Dumper\PhpFileDumper instance
     */
    protected function getTranslation_Dumper_PhpService()
    {
        return $this->services['translation.dumper.php'] = new \Symfony\Component\Translation\Dumper\PhpFileDumper();
    }

    /**
     * Gets the 'translation.dumper.po' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\PoFileDumper A Symfony\Component\Translation\Dumper\PoFileDumper instance
     */
    protected function getTranslation_Dumper_PoService()
    {
        return $this->services['translation.dumper.po'] = new \Symfony\Component\Translation\Dumper\PoFileDumper();
    }

    /**
     * Gets the 'translation.dumper.qt' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\QtFileDumper A Symfony\Component\Translation\Dumper\QtFileDumper instance
     */
    protected function getTranslation_Dumper_QtService()
    {
        return $this->services['translation.dumper.qt'] = new \Symfony\Component\Translation\Dumper\QtFileDumper();
    }

    /**
     * Gets the 'translation.dumper.res' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\IcuResFileDumper A Symfony\Component\Translation\Dumper\IcuResFileDumper instance
     */
    protected function getTranslation_Dumper_ResService()
    {
        return $this->services['translation.dumper.res'] = new \Symfony\Component\Translation\Dumper\IcuResFileDumper();
    }

    /**
     * Gets the 'translation.dumper.xliff' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\XliffFileDumper A Symfony\Component\Translation\Dumper\XliffFileDumper instance
     */
    protected function getTranslation_Dumper_XliffService()
    {
        return $this->services['translation.dumper.xliff'] = new \Symfony\Component\Translation\Dumper\XliffFileDumper();
    }

    /**
     * Gets the 'translation.dumper.yml' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\YamlFileDumper A Symfony\Component\Translation\Dumper\YamlFileDumper instance
     */
    protected function getTranslation_Dumper_YmlService()
    {
        return $this->services['translation.dumper.yml'] = new \Symfony\Component\Translation\Dumper\YamlFileDumper();
    }

    /**
     * Gets the 'translation.extractor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Extractor\ChainExtractor A Symfony\Component\Translation\Extractor\ChainExtractor instance
     */
    protected function getTranslation_ExtractorService()
    {
        $this->services['translation.extractor'] = $instance = new \Symfony\Component\Translation\Extractor\ChainExtractor();

        $instance->addExtractor('php', $this->get('translation.extractor.php'));
        $instance->addExtractor('twig', $this->get('twig.translation.extractor'));

        return $instance;
    }

    /**
     * Gets the 'translation.extractor.php' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Translation\PhpExtractor A Symfony\Bundle\FrameworkBundle\Translation\PhpExtractor instance
     */
    protected function getTranslation_Extractor_PhpService()
    {
        return $this->services['translation.extractor.php'] = new \Symfony\Bundle\FrameworkBundle\Translation\PhpExtractor();
    }

    /**
     * Gets the 'translation.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Translation\TranslationLoader A Symfony\Bundle\FrameworkBundle\Translation\TranslationLoader instance
     */
    protected function getTranslation_LoaderService()
    {
        $a = $this->get('translation.loader.xliff');

        $this->services['translation.loader'] = $instance = new \Symfony\Bundle\FrameworkBundle\Translation\TranslationLoader();

        $instance->addLoader('php', $this->get('translation.loader.php'));
        $instance->addLoader('yml', $this->get('translation.loader.yml'));
        $instance->addLoader('xlf', $a);
        $instance->addLoader('xliff', $a);
        $instance->addLoader('po', $this->get('translation.loader.po'));
        $instance->addLoader('mo', $this->get('translation.loader.mo'));
        $instance->addLoader('ts', $this->get('translation.loader.qt'));
        $instance->addLoader('csv', $this->get('translation.loader.csv'));
        $instance->addLoader('res', $this->get('translation.loader.res'));
        $instance->addLoader('dat', $this->get('translation.loader.dat'));
        $instance->addLoader('ini', $this->get('translation.loader.ini'));
        $instance->addLoader('json', $this->get('translation.loader.json'));

        return $instance;
    }

    /**
     * Gets the 'translation.loader.csv' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\CsvFileLoader A Symfony\Component\Translation\Loader\CsvFileLoader instance
     */
    protected function getTranslation_Loader_CsvService()
    {
        return $this->services['translation.loader.csv'] = new \Symfony\Component\Translation\Loader\CsvFileLoader();
    }

    /**
     * Gets the 'translation.loader.dat' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\IcuDatFileLoader A Symfony\Component\Translation\Loader\IcuDatFileLoader instance
     */
    protected function getTranslation_Loader_DatService()
    {
        return $this->services['translation.loader.dat'] = new \Symfony\Component\Translation\Loader\IcuDatFileLoader();
    }

    /**
     * Gets the 'translation.loader.ini' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\IniFileLoader A Symfony\Component\Translation\Loader\IniFileLoader instance
     */
    protected function getTranslation_Loader_IniService()
    {
        return $this->services['translation.loader.ini'] = new \Symfony\Component\Translation\Loader\IniFileLoader();
    }

    /**
     * Gets the 'translation.loader.json' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\JsonFileLoader A Symfony\Component\Translation\Loader\JsonFileLoader instance
     */
    protected function getTranslation_Loader_JsonService()
    {
        return $this->services['translation.loader.json'] = new \Symfony\Component\Translation\Loader\JsonFileLoader();
    }

    /**
     * Gets the 'translation.loader.mo' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\MoFileLoader A Symfony\Component\Translation\Loader\MoFileLoader instance
     */
    protected function getTranslation_Loader_MoService()
    {
        return $this->services['translation.loader.mo'] = new \Symfony\Component\Translation\Loader\MoFileLoader();
    }

    /**
     * Gets the 'translation.loader.php' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\PhpFileLoader A Symfony\Component\Translation\Loader\PhpFileLoader instance
     */
    protected function getTranslation_Loader_PhpService()
    {
        return $this->services['translation.loader.php'] = new \Symfony\Component\Translation\Loader\PhpFileLoader();
    }

    /**
     * Gets the 'translation.loader.po' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\PoFileLoader A Symfony\Component\Translation\Loader\PoFileLoader instance
     */
    protected function getTranslation_Loader_PoService()
    {
        return $this->services['translation.loader.po'] = new \Symfony\Component\Translation\Loader\PoFileLoader();
    }

    /**
     * Gets the 'translation.loader.qt' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\QtFileLoader A Symfony\Component\Translation\Loader\QtFileLoader instance
     */
    protected function getTranslation_Loader_QtService()
    {
        return $this->services['translation.loader.qt'] = new \Symfony\Component\Translation\Loader\QtFileLoader();
    }

    /**
     * Gets the 'translation.loader.res' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\IcuResFileLoader A Symfony\Component\Translation\Loader\IcuResFileLoader instance
     */
    protected function getTranslation_Loader_ResService()
    {
        return $this->services['translation.loader.res'] = new \Symfony\Component\Translation\Loader\IcuResFileLoader();
    }

    /**
     * Gets the 'translation.loader.xliff' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\TranslationBundle\Translation\Loader\Symfony\XliffLoader A JMS\TranslationBundle\Translation\Loader\Symfony\XliffLoader instance
     */
    protected function getTranslation_Loader_XliffService()
    {
        return $this->services['translation.loader.xliff'] = new \JMS\TranslationBundle\Translation\Loader\Symfony\XliffLoader();
    }

    /**
     * Gets the 'translation.loader.yml' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\YamlFileLoader A Symfony\Component\Translation\Loader\YamlFileLoader instance
     */
    protected function getTranslation_Loader_YmlService()
    {
        return $this->services['translation.loader.yml'] = new \Symfony\Component\Translation\Loader\YamlFileLoader();
    }

    /**
     * Gets the 'translation.writer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Writer\TranslationWriter A Symfony\Component\Translation\Writer\TranslationWriter instance
     */
    protected function getTranslation_WriterService()
    {
        $this->services['translation.writer'] = $instance = new \Symfony\Component\Translation\Writer\TranslationWriter();

        $instance->addDumper('php', $this->get('translation.dumper.php'));
        $instance->addDumper('xlf', $this->get('translation.dumper.xliff'));
        $instance->addDumper('po', $this->get('translation.dumper.po'));
        $instance->addDumper('mo', $this->get('translation.dumper.mo'));
        $instance->addDumper('yml', $this->get('translation.dumper.yml'));
        $instance->addDumper('ts', $this->get('translation.dumper.qt'));
        $instance->addDumper('csv', $this->get('translation.dumper.csv'));
        $instance->addDumper('ini', $this->get('translation.dumper.ini'));
        $instance->addDumper('json', $this->get('translation.dumper.json'));
        $instance->addDumper('res', $this->get('translation.dumper.res'));

        return $instance;
    }

    /**
     * Gets the 'translator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\DataCollectorTranslator A Symfony\Component\Translation\DataCollectorTranslator instance
     */
    protected function getTranslatorService()
    {
        return $this->services['translator'] = new \Symfony\Component\Translation\DataCollectorTranslator(new \Symfony\Component\Translation\LoggingTranslator($this->get('translator.default'), $this->get('monolog.logger.translation')));
    }

    /**
     * Gets the 'translator.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Translation\Translator A Symfony\Bundle\FrameworkBundle\Translation\Translator instance
     */
    protected function getTranslator_DefaultService()
    {
        $this->services['translator.default'] = $instance = new \Symfony\Bundle\FrameworkBundle\Translation\Translator($this, new \Symfony\Component\Translation\MessageSelector(), array('translation.loader.php' => array(0 => 'php'), 'translation.loader.yml' => array(0 => 'yml'), 'translation.loader.xliff' => array(0 => 'xlf', 1 => 'xliff'), 'translation.loader.po' => array(0 => 'po'), 'translation.loader.mo' => array(0 => 'mo'), 'translation.loader.qt' => array(0 => 'ts'), 'translation.loader.csv' => array(0 => 'csv'), 'translation.loader.res' => array(0 => 'res'), 'translation.loader.dat' => array(0 => 'dat'), 'translation.loader.ini' => array(0 => 'ini'), 'translation.loader.json' => array(0 => 'json')), array('cache_dir' => (__DIR__.'/translations'), 'debug' => true, 'resource_files' => array('af' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.af.xlf'), 1 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.af.yml'), 2 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.af.yml'), 3 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/validators.af.yml')), 'ar' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ar.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ar.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.ar.xlf'), 3 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.ar.xliff'), 4 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/messages.ar.yml'), 5 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/messages.ar.yml'), 6 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.ar.yml'), 7 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/messages.ar.yml'), 8 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/validators.ar.yml'), 9 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.ar.yml'), 10 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/validators.ar.yml'), 11 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/messages.ar.yml'), 12 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/flashes.ar.yml'), 13 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/messages.ar.yml'), 14 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.ar.yml'), 15 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/messages.ar.yml'), 16 => ($this->targetDirs[3].'/vendor/mopa/bootstrap-bundle/Mopa/Bundle/BootstrapBundle/Resources/translations/pagination.ar.yml')), 'az' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.az.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.az.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.az.xlf'), 3 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.az.xliff')), 'bg' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.bg.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.bg.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.bg.xlf'), 3 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/messages.bg.yml'), 4 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/validators.bg.yml'), 5 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/messages.bg.yml'), 6 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.bg.yml'), 7 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/messages.bg.yml'), 8 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.bg.yml'), 9 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/validators.bg.yml'), 10 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/messages.bg.yml'), 11 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/messages.bg.yml'), 12 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.bg.yml'), 13 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/validators.bg.yml')), 'ca' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ca.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ca.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.ca.xlf'), 3 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.ca.xliff'), 4 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/messages.ca.yml'), 5 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/messages.ca.yml'), 6 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.ca.yml'), 7 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/messages.ca.yml'), 8 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.ca.yml'), 9 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/validators.ca.yml'), 10 => ($this->targetDirs[3].'/vendor/sylius/mailer-bundle/Resources/translations/messages.ca.yml'), 11 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/messages.ca.yml'), 12 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/messages.ca.yml'), 13 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.ca.yml'), 14 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/validators.ca.yml'), 15 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/messages.ca.yml')), 'cs' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.cs.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.cs.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.cs.xlf'), 3 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.cs.xliff'), 4 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/messages.cs.yml'), 5 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/validators.cs.yml'), 6 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/messages.cs.yml'), 7 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/validators.cs.yml'), 8 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.cs.yml'), 9 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/messages.cs.yml'), 10 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/validators.cs.yml'), 11 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.cs.yml'), 12 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/validators.cs.yml'), 13 => ($this->targetDirs[3].'/vendor/sylius/mailer-bundle/Resources/translations/messages.cs.yml'), 14 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/messages.cs.yml'), 15 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/validators.cs.yml'), 16 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/flashes.cs.yml'), 17 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/messages.cs.yml'), 18 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/validators.cs.yml'), 19 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.cs.yml'), 20 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/validators.cs.yml'), 21 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/messages.cs.yml'), 22 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/validators.cs.yml')), 'cy' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.cy.xlf')), 'da' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.da.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.da.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.da.xlf'), 3 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.da.xliff'), 4 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/messages.da.yml'), 5 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/messages.da.yml'), 6 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/validators.da.yml'), 7 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.da.yml'), 8 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/messages.da.yml'), 9 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/validators.da.yml'), 10 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.da.yml'), 11 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/validators.da.yml'), 12 => ($this->targetDirs[3].'/vendor/sylius/mailer-bundle/Resources/translations/messages.da.yml'), 13 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/messages.da.yml'), 14 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/flashes.da.yml'), 15 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/messages.da.yml'), 16 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.da.yml'), 17 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/validators.da.yml'), 18 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/messages.da.yml'), 19 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/validators.da.yml')), 'de' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.de.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.de.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.de.xlf'), 3 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.de.xliff'), 4 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/messages.de.yml'), 5 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/validators.de.yml'), 6 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/messages.de.yml'), 7 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/validators.de.yml'), 8 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.de.yml'), 9 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/messages.de.yml'), 10 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/validators.de.yml'), 11 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/flashes.de.yml'), 12 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.de.yml'), 13 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/validators.de.yml'), 14 => ($this->targetDirs[3].'/vendor/sylius/mailer-bundle/Resources/translations/messages.de.yml'), 15 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/messages.de.yml'), 16 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/validators.de.yml'), 17 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/flashes.de.yml'), 18 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/messages.de.yml'), 19 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/validators.de.yml'), 20 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.de.yml'), 21 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/validators.de.yml'), 22 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/messages.de.yml'), 23 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/validators.de.yml'), 24 => ($this->targetDirs[3].'/vendor/sonata-project/block-bundle/Resources/translations/SonataBlockBundle.de.xliff'), 25 => ($this->targetDirs[3].'/vendor/mopa/bootstrap-bundle/Mopa/Bundle/BootstrapBundle/Resources/translations/pagination.de.yml')), 'el' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.el.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.el.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.el.xlf'), 3 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/messages.el.yml'), 4 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/messages.el.yml'), 5 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.el.yml'), 6 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/messages.el.yml'), 7 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.el.yml'), 8 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/validators.el.yml'), 9 => ($this->targetDirs[3].'/vendor/sylius/mailer-bundle/Resources/translations/messages.el.yml'), 10 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/messages.el.yml'), 11 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/flashes.el.yml'), 12 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.el.yml'), 13 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/messages.el.yml')), 'en' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.en.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.en.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.en.xlf'), 3 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.en.xliff'), 4 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/messages.en.yml'), 5 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/validators.en.yml'), 6 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/flashes.en.yml'), 7 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/messages.en.yml'), 8 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/validators.en.yml'), 9 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/flashes.en.yml'), 10 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.en.yml'), 11 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/flashes.en.yml'), 12 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/messages.en.yml'), 13 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/validators.en.yml'), 14 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/flashes.en.yml'), 15 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.en.yml'), 16 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/validators.en.yml'), 17 => ($this->targetDirs[3].'/vendor/sylius/mailer-bundle/Resources/translations/messages.en.yml'), 18 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/flashes.en.yml'), 19 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/messages.en.yml'), 20 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/validators.en.yml'), 21 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/flashes.en.yml'), 22 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/messages.en.yml'), 23 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/validators.en.yml'), 24 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.en.yml'), 25 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/validators.en.yml'), 26 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/messages.en.yml'), 27 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/validators.en.yml'), 28 => ($this->targetDirs[3].'/vendor/sonata-project/block-bundle/Resources/translations/SonataBlockBundle.en.xliff'), 29 => ($this->targetDirs[3].'/vendor/mopa/bootstrap-bundle/Mopa/Bundle/BootstrapBundle/Resources/translations/pagination.en.yml'), 30 => ($this->targetDirs[3].'/vendor/zenstruck/redirect-bundle/src/Resources/translations/validators.en.yml'), 31 => ($this->targetDirs[3].'/vendor/zenstruck/redirect-bundle/src/Resources/translations/ZenstruckRedirectBundle.en.yml')), 'es' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.es.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.es.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.es.xlf'), 3 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.es.xliff'), 4 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/messages.es.yml'), 5 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/validators.es.yml'), 6 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/flashes.es.yml'), 7 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/messages.es.yml'), 8 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/validators.es.yml'), 9 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/flashes.es.yml'), 10 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.es.yml'), 11 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/flashes.es.yml'), 12 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/messages.es.yml'), 13 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/validators.es.yml'), 14 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/flashes.es.yml'), 15 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.es.yml'), 16 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/validators.es.yml'), 17 => ($this->targetDirs[3].'/vendor/sylius/mailer-bundle/Resources/translations/messages.es.yml'), 18 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/flashes.es.yml'), 19 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/messages.es.yml'), 20 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/validators.es.yml'), 21 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/flashes.es.yml'), 22 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/messages.es.yml'), 23 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/validators.es.yml'), 24 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.es.yml'), 25 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/validators.es.yml'), 26 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/messages.es.yml'), 27 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/validators.es.yml'), 28 => ($this->targetDirs[3].'/vendor/mopa/bootstrap-bundle/Mopa/Bundle/BootstrapBundle/Resources/translations/pagination.es.yml')), 'et' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.et.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.et.xlf'), 2 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.et.yml'), 3 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.et.yml'), 4 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.et.yml')), 'eu' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.eu.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.eu.xlf')), 'fa' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.fa.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.fa.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.fa.xlf'), 3 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.fa.xliff'), 4 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/messages.fa.yml'), 5 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/validators.fa.yml'), 6 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/messages.fa.yml'), 7 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/validators.fa.yml'), 8 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.fa.yml'), 9 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/messages.fa.yml'), 10 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/validators.fa.yml'), 11 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/flashes.fa.yml'), 12 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.fa.yml'), 13 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/validators.fa.yml'), 14 => ($this->targetDirs[3].'/vendor/sylius/mailer-bundle/Resources/translations/messages.fa.yml'), 15 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/messages.fa.yml'), 16 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/validators.fa.yml'), 17 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/flashes.fa.yml'), 18 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/messages.fa.yml'), 19 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/validators.fa.yml'), 20 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.fa.yml'), 21 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/validators.fa.yml'), 22 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/messages.fa.yml'), 23 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/validators.fa.yml')), 'fi' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.fi.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.fi.xlf'), 2 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/messages.fi.yml'), 3 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.fi.yml'), 4 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/messages.fi.yml'), 5 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/validators.fi.yml'), 6 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.fi.yml'), 7 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/validators.fi.yml'), 8 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/messages.fi.yml'), 9 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.fi.yml'), 10 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/messages.fi.yml')), 'fr' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.fr.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.fr.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.fr.xlf'), 3 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.fr.xliff'), 4 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/messages.fr.yml'), 5 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/validators.fr.yml'), 6 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/flashes.fr.yml'), 7 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/messages.fr.yml'), 8 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/validators.fr.yml'), 9 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.fr.yml'), 10 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/messages.fr.yml'), 11 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/validators.fr.yml'), 12 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/flashes.fr.yml'), 13 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.fr.yml'), 14 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/validators.fr.yml'), 15 => ($this->targetDirs[3].'/vendor/sylius/mailer-bundle/Resources/translations/messages.fr.yml'), 16 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/messages.fr.yml'), 17 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/validators.fr.yml'), 18 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/flashes.fr.yml'), 19 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/messages.fr.yml'), 20 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/validators.fr.yml'), 21 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.fr.yml'), 22 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/validators.fr.yml'), 23 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/messages.fr.yml'), 24 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/validators.fr.yml'), 25 => ($this->targetDirs[3].'/vendor/sonata-project/block-bundle/Resources/translations/SonataBlockBundle.fr.xliff'), 26 => ($this->targetDirs[3].'/vendor/mopa/bootstrap-bundle/Mopa/Bundle/BootstrapBundle/Resources/translations/pagination.fr.yml'), 27 => ($this->targetDirs[3].'/app/Resources/translations/flashes.fr.yml'), 28 => ($this->targetDirs[3].'/app/Resources/translations/messages.fr.yml'), 29 => ($this->targetDirs[3].'/app/Resources/translations/validators.fr.yml')), 'gl' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.gl.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.gl.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.gl.xlf')), 'he' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.he.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.he.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.he.xlf'), 3 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/messages.he.yml'), 4 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.he.yml'), 5 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.he.yml'), 6 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.he.yml')), 'hr' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.hr.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.hr.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.hr.xlf'), 3 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.hr.xliff'), 4 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/messages.hr.yml'), 5 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/validators.hr.yml'), 6 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/messages.hr.yml'), 7 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/validators.hr.yml'), 8 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.hr.yml'), 9 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/messages.hr.yml'), 10 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/validators.hr.yml'), 11 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.hr.yml'), 12 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/validators.hr.yml'), 13 => ($this->targetDirs[3].'/vendor/sylius/mailer-bundle/Resources/translations/messages.hr.yml'), 14 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/messages.hr.yml'), 15 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/validators.hr.yml'), 16 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/flashes.hr.yml'), 17 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/messages.hr.yml'), 18 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.hr.yml'), 19 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/validators.hr.yml'), 20 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/messages.hr.yml'), 21 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/validators.hr.yml')), 'hu' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.hu.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.hu.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.hu.xlf'), 3 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/messages.hu.yml'), 4 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/validators.hu.yml'), 5 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/messages.hu.yml'), 6 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/validators.hu.yml'), 7 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.hu.yml'), 8 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/messages.hu.yml'), 9 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/validators.hu.yml'), 10 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.hu.yml'), 11 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/validators.hu.yml'), 12 => ($this->targetDirs[3].'/vendor/sylius/mailer-bundle/Resources/translations/messages.hu.yml'), 13 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/messages.hu.yml'), 14 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/validators.hu.yml'), 15 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/flashes.hu.yml'), 16 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/messages.hu.yml'), 17 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/validators.hu.yml'), 18 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.hu.yml'), 19 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/validators.hu.yml'), 20 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/messages.hu.yml'), 21 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/validators.hu.yml'), 22 => ($this->targetDirs[3].'/vendor/sonata-project/block-bundle/Resources/translations/SonataBlockBundle.hu.xliff')), 'hy' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.hy.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.hy.xlf')), 'id' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.id.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.id.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.id.xlf'), 3 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/messages.id.yml'), 4 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/messages.id.yml'), 5 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.id.yml'), 6 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/messages.id.yml'), 7 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/validators.id.yml'), 8 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.id.yml'), 9 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/validators.id.yml'), 10 => ($this->targetDirs[3].'/vendor/sylius/mailer-bundle/Resources/translations/messages.id.yml'), 11 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/messages.id.yml'), 12 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.id.yml'), 13 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/validators.id.yml'), 14 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/messages.id.yml')), 'it' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.it.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.it.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.it.xlf'), 3 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.it.xliff'), 4 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/messages.it.yml'), 5 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/validators.it.yml'), 6 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/messages.it.yml'), 7 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/validators.it.yml'), 8 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.it.yml'), 9 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/messages.it.yml'), 10 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/validators.it.yml'), 11 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.it.yml'), 12 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/validators.it.yml'), 13 => ($this->targetDirs[3].'/vendor/sylius/mailer-bundle/Resources/translations/messages.it.yml'), 14 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/messages.it.yml'), 15 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/validators.it.yml'), 16 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/flashes.it.yml'), 17 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/messages.it.yml'), 18 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/validators.it.yml'), 19 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.it.yml'), 20 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/validators.it.yml'), 21 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/messages.it.yml'), 22 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/validators.it.yml'), 23 => ($this->targetDirs[3].'/vendor/sonata-project/block-bundle/Resources/translations/SonataBlockBundle.it.xliff'), 24 => ($this->targetDirs[3].'/vendor/mopa/bootstrap-bundle/Mopa/Bundle/BootstrapBundle/Resources/translations/pagination.it.yml')), 'ja' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ja.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ja.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.ja.xlf'), 3 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/messages.ja.yml'), 4 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.ja.yml'), 5 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/messages.ja.yml'), 6 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.ja.yml'), 7 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/validators.ja.yml'), 8 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/flashes.ja.yml'), 9 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/messages.ja.yml'), 10 => ($this->targetDirs[3].'/vendor/mopa/bootstrap-bundle/Mopa/Bundle/BootstrapBundle/Resources/translations/pagination.ja.yml')), 'lb' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.lb.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.lb.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.lb.xlf')), 'lt' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.lt.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.lt.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.lt.xlf'), 3 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/messages.lt.yml'), 4 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/validators.lt.yml'), 5 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/messages.lt.yml'), 6 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/validators.lt.yml'), 7 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.lt.yml'), 8 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/messages.lt.yml'), 9 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/validators.lt.yml'), 10 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/flashes.lt.yml'), 11 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.lt.yml'), 12 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/validators.lt.yml'), 13 => ($this->targetDirs[3].'/vendor/sylius/mailer-bundle/Resources/translations/messages.lt.yml'), 14 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/messages.lt.yml'), 15 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/validators.lt.yml'), 16 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/flashes.lt.yml'), 17 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/messages.lt.yml'), 18 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/validators.lt.yml'), 19 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.lt.yml'), 20 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/validators.lt.yml'), 21 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/messages.lt.yml'), 22 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/validators.lt.yml'), 23 => ($this->targetDirs[3].'/vendor/mopa/bootstrap-bundle/Mopa/Bundle/BootstrapBundle/Resources/translations/pagination.lt.yml')), 'lv' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.lv.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.lv.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.lv.xlf')), 'mn' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.mn.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.mn.xlf')), 'nl' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.nl.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.nl.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.nl.xlf'), 3 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.nl.xliff'), 4 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/messages.nl.yml'), 5 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/validators.nl.yml'), 6 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/messages.nl.yml'), 7 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/validators.nl.yml'), 8 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.nl.yml'), 9 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/messages.nl.yml'), 10 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/validators.nl.yml'), 11 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/flashes.nl.yml'), 12 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.nl.yml'), 13 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/validators.nl.yml'), 14 => ($this->targetDirs[3].'/vendor/sylius/mailer-bundle/Resources/translations/messages.nl.yml'), 15 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/messages.nl.yml'), 16 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/validators.nl.yml'), 17 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/flashes.nl.yml'), 18 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/messages.nl.yml'), 19 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/validators.nl.yml'), 20 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.nl.yml'), 21 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/validators.nl.yml'), 22 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/messages.nl.yml'), 23 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/validators.nl.yml'), 24 => ($this->targetDirs[3].'/vendor/mopa/bootstrap-bundle/Mopa/Bundle/BootstrapBundle/Resources/translations/pagination.nl.yml')), 'nn' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.nn.xlf')), 'no' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.no.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.no.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.no.xlf'), 3 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/messages.no.yml'), 4 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/validators.no.yml'), 5 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/messages.no.yml'), 6 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/validators.no.yml'), 7 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.no.yml'), 8 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/messages.no.yml'), 9 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/validators.no.yml'), 10 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.no.yml'), 11 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/validators.no.yml'), 12 => ($this->targetDirs[3].'/vendor/sylius/mailer-bundle/Resources/translations/messages.no.yml'), 13 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/messages.no.yml'), 14 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/flashes.no.yml'), 15 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/messages.no.yml'), 16 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.no.yml'), 17 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/validators.no.yml'), 18 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/messages.no.yml'), 19 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/validators.no.yml')), 'pl' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.pl.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.pl.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.pl.xlf'), 3 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.pl.xliff'), 4 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/messages.pl.yml'), 5 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/validators.pl.yml'), 6 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/messages.pl.yml'), 7 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/validators.pl.yml'), 8 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.pl.yml'), 9 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/messages.pl.yml'), 10 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/validators.pl.yml'), 11 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.pl.yml'), 12 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/validators.pl.yml'), 13 => ($this->targetDirs[3].'/vendor/sylius/mailer-bundle/Resources/translations/messages.pl.yml'), 14 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/messages.pl.yml'), 15 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/validators.pl.yml'), 16 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/flashes.pl.yml'), 17 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/messages.pl.yml'), 18 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/validators.pl.yml'), 19 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.pl.yml'), 20 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/validators.pl.yml'), 21 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/messages.pl.yml'), 22 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/validators.pl.yml'), 23 => ($this->targetDirs[3].'/vendor/mopa/bootstrap-bundle/Mopa/Bundle/BootstrapBundle/Resources/translations/pagination.pl.yml')), 'pt' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.pt.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.pt.xlf'), 2 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.pt.xliff'), 3 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/messages.pt.yml'), 4 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/validators.pt.yml'), 5 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/messages.pt.yml'), 6 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/validators.pt.yml'), 7 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.pt.yml'), 8 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/messages.pt.yml'), 9 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/validators.pt.yml'), 10 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/flashes.pt.yml'), 11 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.pt.yml'), 12 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/validators.pt.yml'), 13 => ($this->targetDirs[3].'/vendor/sylius/mailer-bundle/Resources/translations/messages.pt.yml'), 14 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/messages.pt.yml'), 15 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/validators.pt.yml'), 16 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/flashes.pt.yml'), 17 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/messages.pt.yml'), 18 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/validators.pt.yml'), 19 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.pt.yml'), 20 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/validators.pt.yml'), 21 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/messages.pt.yml'), 22 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/validators.pt.yml'), 23 => ($this->targetDirs[3].'/vendor/mopa/bootstrap-bundle/Mopa/Bundle/BootstrapBundle/Resources/translations/pagination.pt.yml')), 'pt_BR' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.pt_BR.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.pt_BR.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.pt_BR.xlf'), 3 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/messages.pt_BR.yml'), 4 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/validators.pt_BR.yml'), 5 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/messages.pt_BR.yml'), 6 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/validators.pt_BR.yml'), 7 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.pt_BR.yml'), 8 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/messages.pt_BR.yml'), 9 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/validators.pt_BR.yml'), 10 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.pt_BR.yml'), 11 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/validators.pt_BR.yml'), 12 => ($this->targetDirs[3].'/vendor/sylius/mailer-bundle/Resources/translations/messages.pt_BR.yml'), 13 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/messages.pt_BR.yml'), 14 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/validators.pt_BR.yml'), 15 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/flashes.pt_BR.yml'), 16 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/messages.pt_BR.yml'), 17 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/validators.pt_BR.yml'), 18 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.pt_BR.yml'), 19 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/validators.pt_BR.yml'), 20 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/messages.pt_BR.yml'), 21 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/validators.pt_BR.yml')), 'ro' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ro.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ro.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.ro.xlf'), 3 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.ro.xliff'), 4 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/messages.ro.yml'), 5 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/validators.ro.yml'), 6 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/messages.ro.yml'), 7 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/validators.ro.yml'), 8 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.ro.yml'), 9 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/messages.ro.yml'), 10 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/validators.ro.yml'), 11 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.ro.yml'), 12 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/validators.ro.yml'), 13 => ($this->targetDirs[3].'/vendor/sylius/mailer-bundle/Resources/translations/messages.ro.yml'), 14 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/messages.ro.yml'), 15 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/flashes.ro.yml'), 16 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/messages.ro.yml'), 17 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.ro.yml'), 18 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/validators.ro.yml'), 19 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/messages.ro.yml'), 20 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/validators.ro.yml')), 'ru' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ru.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ru.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.ru.xlf'), 3 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.ru.xliff'), 4 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/messages.ru.yml'), 5 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/validators.ru.yml'), 6 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/messages.ru.yml'), 7 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/validators.ru.yml'), 8 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.ru.yml'), 9 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/messages.ru.yml'), 10 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/validators.ru.yml'), 11 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/flashes.ru.yml'), 12 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.ru.yml'), 13 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/validators.ru.yml'), 14 => ($this->targetDirs[3].'/vendor/sylius/mailer-bundle/Resources/translations/messages.ru.yml'), 15 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/messages.ru.yml'), 16 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/validators.ru.yml'), 17 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/flashes.ru.yml'), 18 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/messages.ru.yml'), 19 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/validators.ru.yml'), 20 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.ru.yml'), 21 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/validators.ru.yml'), 22 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/messages.ru.yml'), 23 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/validators.ru.yml'), 24 => ($this->targetDirs[3].'/vendor/mopa/bootstrap-bundle/Mopa/Bundle/BootstrapBundle/Resources/translations/pagination.ru.yml')), 'sk' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sk.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sk.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.sk.xlf'), 3 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.sk.xliff'), 4 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/messages.sk.yml'), 5 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/validators.sk.yml'), 6 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/messages.sk.yml'), 7 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/validators.sk.yml'), 8 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.sk.yml'), 9 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/messages.sk.yml'), 10 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/validators.sk.yml'), 11 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.sk.yml'), 12 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/validators.sk.yml'), 13 => ($this->targetDirs[3].'/vendor/sylius/mailer-bundle/Resources/translations/messages.sk.yml'), 14 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/messages.sk.yml'), 15 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/validators.sk.yml'), 16 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/flashes.sk.yml'), 17 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/messages.sk.yml'), 18 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/validators.sk.yml'), 19 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.sk.yml'), 20 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/validators.sk.yml'), 21 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/messages.sk.yml'), 22 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/validators.sk.yml'), 23 => ($this->targetDirs[3].'/vendor/mopa/bootstrap-bundle/Mopa/Bundle/BootstrapBundle/Resources/translations/pagination.sk.yml')), 'sl' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sl.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sl.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.sl.xlf'), 3 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.sl.xliff'), 4 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/messages.sl.yml'), 5 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/validators.sl.yml'), 6 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/messages.sl.yml'), 7 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/validators.sl.yml'), 8 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.sl.yml'), 9 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/messages.sl.yml'), 10 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/validators.sl.yml'), 11 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.sl.yml'), 12 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/validators.sl.yml'), 13 => ($this->targetDirs[3].'/vendor/sylius/mailer-bundle/Resources/translations/messages.sl.yml'), 14 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/messages.sl.yml'), 15 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/validators.sl.yml'), 16 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/flashes.sl.yml'), 17 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/messages.sl.yml'), 18 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/validators.sl.yml'), 19 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.sl.yml'), 20 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/validators.sl.yml'), 21 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/messages.sl.yml'), 22 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/validators.sl.yml'), 23 => ($this->targetDirs[3].'/vendor/mopa/bootstrap-bundle/Mopa/Bundle/BootstrapBundle/Resources/translations/pagination.sl.yml')), 'sq' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sq.xlf'), 1 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/messages.sq.yml'), 2 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/validators.sq.yml'), 3 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/messages.sq.yml'), 4 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/validators.sq.yml'), 5 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.sq.yml'), 6 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/messages.sq.yml'), 7 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/validators.sq.yml'), 8 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.sq.yml'), 9 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/validators.sq.yml'), 10 => ($this->targetDirs[3].'/vendor/sylius/mailer-bundle/Resources/translations/messages.sq.yml'), 11 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/messages.sq.yml'), 12 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/validators.sq.yml'), 13 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/flashes.sq.yml'), 14 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/messages.sq.yml'), 15 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/validators.sq.yml'), 16 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.sq.yml'), 17 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/validators.sq.yml'), 18 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/messages.sq.yml'), 19 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/validators.sq.yml')), 'sr_Cyrl' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sr_Cyrl.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sr_Cyrl.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.sr_Cyrl.xlf'), 3 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.sr_Cyrl.xliff')), 'sr_Latn' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sr_Latn.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sr_Latn.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.sr_Latn.xlf'), 3 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.sr_Latn.xliff')), 'sv' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sv.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sv.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.sv.xlf'), 3 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/messages.sv.yml'), 4 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/messages.sv.yml'), 5 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.sv.yml'), 6 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/messages.sv.yml'), 7 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/validators.sv.yml'), 8 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.sv.yml'), 9 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/validators.sv.yml'), 10 => ($this->targetDirs[3].'/vendor/sylius/mailer-bundle/Resources/translations/messages.sv.yml'), 11 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/messages.sv.yml'), 12 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/messages.sv.yml'), 13 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.sv.yml'), 14 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/validators.sv.yml'), 15 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/messages.sv.yml'), 16 => ($this->targetDirs[3].'/vendor/mopa/bootstrap-bundle/Mopa/Bundle/BootstrapBundle/Resources/translations/pagination.sv.yml')), 'th' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.th.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.th.xlf'), 2 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.th.xliff'), 3 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/messages.th.yml'), 4 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/validators.th.yml'), 5 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/flashes.th.yml'), 6 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/messages.th.yml'), 7 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/validators.th.yml'), 8 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.th.yml'), 9 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/messages.th.yml'), 10 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/validators.th.yml'), 11 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/flashes.th.yml'), 12 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.th.yml'), 13 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/validators.th.yml'), 14 => ($this->targetDirs[3].'/vendor/sylius/mailer-bundle/Resources/translations/messages.th.yml'), 15 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/messages.th.yml'), 16 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/validators.th.yml'), 17 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/flashes.th.yml'), 18 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/messages.th.yml'), 19 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/validators.th.yml'), 20 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.th.yml'), 21 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/validators.th.yml'), 22 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/messages.th.yml'), 23 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/validators.th.yml')), 'tr' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.tr.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.tr.xlf'), 2 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.tr.xliff'), 3 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/messages.tr.yml'), 4 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/validators.tr.yml'), 5 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/messages.tr.yml'), 6 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/validators.tr.yml'), 7 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.tr.yml'), 8 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/messages.tr.yml'), 9 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/validators.tr.yml'), 10 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.tr.yml'), 11 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/validators.tr.yml'), 12 => ($this->targetDirs[3].'/vendor/sylius/mailer-bundle/Resources/translations/messages.tr.yml'), 13 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/messages.tr.yml'), 14 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/validators.tr.yml'), 15 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/flashes.tr.yml'), 16 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/messages.tr.yml'), 17 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/validators.tr.yml'), 18 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.tr.yml'), 19 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/validators.tr.yml'), 20 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/messages.tr.yml'), 21 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/validators.tr.yml')), 'uk' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.uk.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.uk.xlf'), 2 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.uk.xliff'), 3 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/messages.uk.yml'), 4 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/validators.uk.yml'), 5 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/messages.uk.yml'), 6 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/validators.uk.yml'), 7 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.uk.yml'), 8 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/messages.uk.yml'), 9 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/validators.uk.yml'), 10 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.uk.yml'), 11 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/validators.uk.yml'), 12 => ($this->targetDirs[3].'/vendor/sylius/mailer-bundle/Resources/translations/messages.uk.yml'), 13 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/messages.uk.yml'), 14 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/validators.uk.yml'), 15 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/flashes.uk.yml'), 16 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/messages.uk.yml'), 17 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/validators.uk.yml'), 18 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.uk.yml'), 19 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/validators.uk.yml'), 20 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/messages.uk.yml'), 21 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/validators.uk.yml'), 22 => ($this->targetDirs[3].'/vendor/mopa/bootstrap-bundle/Mopa/Bundle/BootstrapBundle/Resources/translations/pagination.uk.yml')), 'vi' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.vi.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.vi.xlf'), 2 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/messages.vi.yml'), 3 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/messages.vi.yml'), 4 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.vi.yml'), 5 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/messages.vi.yml'), 6 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.vi.yml'), 7 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/messages.vi.yml'), 8 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.vi.yml'), 9 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/validators.vi.yml'), 10 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/messages.vi.yml')), 'zh_CN' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.zh_CN.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.zh_CN.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.zh_CN.xlf'), 3 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.zh_CN.xliff'), 4 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/messages.zh_CN.yml'), 5 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/validators.zh_CN.yml'), 6 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/messages.zh_CN.yml'), 7 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/validators.zh_CN.yml'), 8 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.zh_CN.yml'), 9 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/messages.zh_CN.yml'), 10 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/validators.zh_CN.yml'), 11 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.zh_CN.yml'), 12 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/validators.zh_CN.yml'), 13 => ($this->targetDirs[3].'/vendor/sylius/mailer-bundle/Resources/translations/messages.zh_CN.yml'), 14 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/messages.zh_CN.yml'), 15 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/validators.zh_CN.yml'), 16 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/flashes.zh_CN.yml'), 17 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/messages.zh_CN.yml'), 18 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/validators.zh_CN.yml'), 19 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.zh_CN.yml'), 20 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/validators.zh_CN.yml'), 21 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/messages.zh_CN.yml'), 22 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/validators.zh_CN.yml')), 'zh_TW' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.zh_TW.xlf'), 1 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.zh_TW.yml'), 2 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.zh_TW.yml')), 'pt_PT' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.pt_PT.xlf')), 'ua' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.ua.xlf')), 'oc' => array(0 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.oc.xliff')), 'be' => array(0 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/messages.be.yml'), 1 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/validators.be.yml'), 2 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/messages.be.yml'), 3 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/validators.be.yml'), 4 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.be.yml'), 5 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/messages.be.yml'), 6 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.be.yml'), 7 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/validators.be.yml'), 8 => ($this->targetDirs[3].'/vendor/sylius/mailer-bundle/Resources/translations/messages.be.yml'), 9 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/messages.be.yml'), 10 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/flashes.be.yml'), 11 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/messages.be.yml'), 12 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.be.yml'), 13 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/validators.be.yml'), 14 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/messages.be.yml'), 15 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/validators.be.yml')), 'de_CH' => array(0 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/messages.de_CH.yml'), 1 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/messages.de_CH.yml'), 2 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/validators.de_CH.yml'), 3 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.de_CH.yml'), 4 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/messages.de_CH.yml'), 5 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/validators.de_CH.yml'), 6 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.de_CH.yml'), 7 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/validators.de_CH.yml'), 8 => ($this->targetDirs[3].'/vendor/sylius/mailer-bundle/Resources/translations/messages.de_CH.yml'), 9 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/translations/messages.de_CH.yml'), 10 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.de_CH.yml'), 11 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/validators.de_CH.yml'), 12 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/messages.de_CH.yml')), 'mk' => array(0 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/messages.mk.yml'), 1 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/messages.mk.yml'), 2 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.mk.yml'), 3 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/messages.mk.yml'), 4 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/validators.mk.yml'), 5 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.mk.yml'), 6 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/validators.mk.yml'), 7 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.mk.yml')), 'sr_CS' => array(0 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/translations/messages.sr_CS.yml'), 1 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/messages.sr_CS.yml'), 2 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.sr_CS.yml'), 3 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/messages.sr_CS.yml'), 4 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.sr_CS.yml'), 5 => ($this->targetDirs[3].'/vendor/sylius/mailer-bundle/Resources/translations/messages.sr_CS.yml'), 6 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/flashes.sr_CS.yml'), 7 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/messages.sr_CS.yml'), 8 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.sr_CS.yml'), 9 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/translations/messages.sr_CS.yml')), 'ko' => array(0 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/messages.ko.yml'), 1 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.ko.yml'), 2 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/messages.ko.yml'), 3 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.ko.yml'), 4 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.ko.yml')), 'sr' => array(0 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/translations/messages.sr.yml'), 1 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.sr.yml'), 2 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/translations/messages.sr.yml'), 3 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/translations/messages.sr.yml'), 4 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/flashes.sr.yml'), 5 => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/translations/messages.sr.yml'), 6 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.sr.yml'), 7 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/validators.sr.yml')), 'ms' => array(0 => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/translations/messages.ms.yml'), 1 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/translations/messages.ms.yml')))), array());

        $instance->setConfigCacheFactory($this->get('config_cache_factory'));
        $instance->setFallbackLocales(array(0 => 'fr_FR', 1 => 'fr'));

        return $instance;
    }

    /**
     * Gets the 'translator_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\TranslatorListener A Symfony\Component\HttpKernel\EventListener\TranslatorListener instance
     */
    protected function getTranslatorListenerService()
    {
        return $this->services['translator_listener'] = new \Symfony\Component\HttpKernel\EventListener\TranslatorListener($this->get('translator'), $this->get('request_stack'));
    }

    /**
     * Gets the 'twig' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Twig_Environment A Twig_Environment instance
     */
    protected function getTwigService()
    {
        $a = $this->get('debug.stopwatch', ContainerInterface::NULL_ON_INVALID_REFERENCE);
        $b = ${($_ = isset($this->services['debug.file_link_formatter']) ? $this->services['debug.file_link_formatter'] : $this->getDebug_FileLinkFormatterService()) && false ?: '_'};
        $c = $this->get('cmf_routing.router');
        $d = $this->get('request_stack');
        $e = $this->get('knp_menu.matcher');

        $f = new \Knp\Menu\Util\MenuManipulator();

        $g = new \Symfony\Component\VarDumper\Dumper\HtmlDumper(NULL, 'UTF-8', 0);
        if ($this->has('debug.file_link_formatter')) {
            $g->setDisplayOptions(array('fileLinkFormat' => $b));
        }

        $h = new \Symfony\Component\VarDumper\Dumper\HtmlDumper(NULL, 'UTF-8', 1);
        $h->setDisplayOptions(array('maxStringLength' => 4096, 'fileLinkFormat' => $b));

        $i = new \Symfony\Bridge\Twig\AppVariable();
        $i->setEnvironment('dev');
        $i->setDebug(true);
        if ($this->has('security.token_storage')) {
            $i->setTokenStorage($this->get('security.token_storage', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }
        if ($this->has('request_stack')) {
            $i->setRequestStack($d);
        }

        $this->services['twig'] = $instance = new \Twig_Environment($this->get('twig.loader'), array('debug' => true, 'strict_variables' => true, 'exception_controller' => 'twig.controller.exception:showAction', 'form_themes' => array(0 => 'form_div_layout.html.twig'), 'autoescape' => 'name', 'cache' => (__DIR__.'/twig'), 'charset' => 'UTF-8', 'paths' => array(), 'date' => array('format' => 'F j, Y H:i', 'interval_format' => '%d days', 'timezone' => NULL), 'number_format' => array('decimals' => 0, 'decimal_point' => '.', 'thousands_separator' => ',')));

        $instance->addExtension($this->get('twig.extension.intl'));
        $instance->addExtension($this->get('twig.extension.text'));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\LogoutUrlExtension(${($_ = isset($this->services['security.logout_url_generator']) ? $this->services['security.logout_url_generator'] : $this->getSecurity_LogoutUrlGeneratorService()) && false ?: '_'}));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\SecurityExtension($this->get('security.authorization_checker', ContainerInterface::NULL_ON_INVALID_REFERENCE)));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\ProfilerExtension($this->get('twig.profile'), $a));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\TranslationExtension($this->get('translator')));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\AssetExtension($this->get('assets.packages')));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\CodeExtension($b, ($this->targetDirs[3].'/app'), 'UTF-8'));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\RoutingExtension($c));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\YamlExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\StopwatchExtension($a, true));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\ExpressionExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\HttpKernelExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\HttpFoundationExtension($d, ${($_ = isset($this->services['router.request_context']) ? $this->services['router.request_context'] : $this->getRouter_RequestContextService()) && false ?: '_'}));
        $instance->addExtension(new \Twig_Extension_Debug());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\FormExtension(array(0 => $this, 1 => 'twig.form.renderer')));
        $instance->addExtension(new \Symfony\Bundle\AsseticBundle\Twig\AsseticExtension(${($_ = isset($this->services['assetic.asset_factory']) ? $this->services['assetic.asset_factory'] : $this->getAssetic_AssetFactoryService()) && false ?: '_'}, $this->get('templating.name_parser'), true, array(), array(0 => 'FrameworkBundle', 1 => 'SecurityBundle', 2 => 'TwigBundle', 3 => 'MonologBundle', 4 => 'SwiftmailerBundle', 5 => 'AsseticBundle', 6 => 'SensioFrameworkExtraBundle', 7 => 'JMSSerializerBundle', 8 => 'JMSTranslationBundle', 9 => 'StofDoctrineExtensionsBundle', 10 => 'WhiteOctoberPagerfantaBundle', 11 => 'BazingaHateoasBundle', 12 => 'SyliusLocaleBundle', 13 => 'SyliusProductBundle', 14 => 'SyliusUiBundle', 15 => 'SyliusUserBundle', 16 => 'SyliusCustomerBundle', 17 => 'SyliusMailerBundle', 18 => 'SyliusReviewBundle', 19 => 'SyliusResourceBundle', 20 => 'SyliusAttributeBundle', 21 => 'SyliusTaxonomyBundle', 22 => 'winzouStateMachineBundle', 23 => 'SonataBlockBundle', 24 => 'CmfCoreBundle', 25 => 'CmfBlockBundle', 26 => 'CmfMediaBundle', 27 => 'CmfRoutingBundle', 28 => 'SyliusGridBundle', 29 => 'FOSRestBundle', 30 => 'FOSJsRoutingBundle', 31 => 'FOSElasticaBundle', 32 => 'DoctrinePHPCRBundle', 33 => 'DoctrineCacheBundle', 34 => 'DoctrineBundle', 35 => 'DoctrineMigrationsBundle', 36 => 'InfiniteFormBundle', 37 => 'KnpMenuBundle', 38 => 'MopaBootstrapBundle', 39 => 'LiipImagineBundle', 40 => 'IvoryCKEditorBundle', 41 => 'DoctrineBehaviorsBundle', 42 => 'ZenstruckRedirectBundle', 43 => 'BmatznerJQueryUIBundle', 44 => 'BmatznerJQueryBundle', 45 => 'BmatznerFontAwesomeBundle', 46 => 'AppBundle', 47 => 'DebugBundle', 48 => 'WebProfilerBundle', 49 => 'SensioDistributionBundle'), new \Symfony\Bundle\AsseticBundle\DefaultValueSupplier($this)));
        $instance->addExtension(new \JMS\Serializer\Twig\SerializerExtension($this->get('jms_serializer')));
        $instance->addExtension($this->get('jms_translation.twig_extension'));
        $instance->addExtension(new \WhiteOctober\PagerfantaBundle\Twig\PagerfantaExtension($this));
        $instance->addExtension($this->get('hateoas.twig.link'));
        $instance->addExtension(new \Sylius\Bundle\LocaleBundle\Twig\LocaleExtension($this->get('sylius.templating.helper.locale')));
        $instance->addExtension(new \Sylius\Bundle\UiBundle\Twig\PercentageExtension());
        $instance->addExtension(new \Sylius\Bundle\UiBundle\Twig\SortByExtension());
        $instance->addExtension(new \SM\Extension\Twig\SMExtension($this->get('sm.factory')));
        $instance->addExtension(new \Sonata\BlockBundle\Twig\Extension\BlockExtension($this->get('sonata.block.templating.helper')));
        $instance->addExtension(new \Symfony\Cmf\Bundle\CoreBundle\Twig\Extension\CmfExtension(new \Symfony\Cmf\Bundle\CoreBundle\Templating\Helper\CmfHelper($this->get('cmf_core.publish_workflow.checker.default', ContainerInterface::NULL_ON_INVALID_REFERENCE))));
        $instance->addExtension($this->get('cmf_block.twig.embed_extension'));
        $instance->addExtension(new \Symfony\Cmf\Bundle\MediaBundle\Twig\Extension\CmfMediaExtension(new \Symfony\Cmf\Bundle\MediaBundle\Templating\Helper\CmfMediaHelper(${($_ = isset($this->services['cmf_media.persistence.phpcr.manager']) ? $this->services['cmf_media.persistence.phpcr.manager'] : $this->getCmfMedia_Persistence_Phpcr_ManagerService()) && false ?: '_'}, $c, $this->get('liip_imagine.templating.helper'))));
        $instance->addExtension(new \Sylius\Bundle\GridBundle\Twig\GridExtension($this->get('sylius.templating.helper.grid')));
        $instance->addExtension(new \Doctrine\Bundle\DoctrineBundle\Twig\DoctrineExtension());
        $instance->addExtension($this->get('infinite_form.twig_extension'));
        $instance->addExtension(new \Knp\Menu\Twig\MenuExtension(new \Knp\Menu\Twig\Helper($this->get('knp_menu.renderer_provider'), $this->get('knp_menu.menu_provider'), $f, $e), $e, $f));
        $instance->addExtension($this->get('mopa_bootstrap.twig.extension.bootstrap_form'));
        $instance->addExtension($this->get('mopa_bootstrap.twig.extension.bootstrap_icon'));
        $instance->addExtension($this->get('mopa_bootstrap.twig.extension.bootstrap_flash'));
        $instance->addExtension(new \Liip\ImagineBundle\Templating\ImagineExtension($this->get('liip_imagine.cache.manager')));
        $instance->addExtension($this->get('ivory_ck_editor.twig_extension'));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\DumpExtension($this->get('var_dumper.cloner'), $g));
        $instance->addExtension(new \Symfony\Bundle\WebProfilerBundle\Twig\WebProfilerExtension($h));
        $instance->addGlobal('app', $i);
        $instance->addRuntimeLoader(new \Symfony\Bundle\TwigBundle\ContainerAwareRuntimeLoader($this, array('Symfony\\Bridge\\Twig\\Extension\\HttpKernelRuntime' => 'twig.runtime.httpkernel', 'Symfony\\Bridge\\Twig\\Form\\TwigRenderer' => 'twig.form.renderer'), $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE)));
        $instance->addGlobal('ga_tracking', 'UA-XXXXX-1');
        $instance->addGlobal('sonata_block', $this->get('sonata.block.twig.global'));
        (new \Symfony\Bundle\TwigBundle\DependencyInjection\Configurator\EnvironmentConfigurator('F j, Y H:i', '%d days', NULL, 0, '.', ','))->configure($instance);

        return $instance;
    }

    /**
     * Gets the 'twig.controller.exception' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\TwigBundle\Controller\ExceptionController A Symfony\Bundle\TwigBundle\Controller\ExceptionController instance
     */
    protected function getTwig_Controller_ExceptionService()
    {
        return $this->services['twig.controller.exception'] = new \Symfony\Bundle\TwigBundle\Controller\ExceptionController($this->get('twig'), true);
    }

    /**
     * Gets the 'twig.controller.preview_error' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\TwigBundle\Controller\PreviewErrorController A Symfony\Bundle\TwigBundle\Controller\PreviewErrorController instance
     */
    protected function getTwig_Controller_PreviewErrorService()
    {
        return $this->services['twig.controller.preview_error'] = new \Symfony\Bundle\TwigBundle\Controller\PreviewErrorController($this->get('http_kernel'), 'twig.controller.exception:showAction');
    }

    /**
     * Gets the 'twig.exception_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ExceptionListener A Symfony\Component\HttpKernel\EventListener\ExceptionListener instance
     */
    protected function getTwig_ExceptionListenerService()
    {
        return $this->services['twig.exception_listener'] = new \Symfony\Component\HttpKernel\EventListener\ExceptionListener('twig.controller.exception:showAction', $this->get('monolog.logger.request', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'twig.extension.intl' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Twig_Extensions_Extension_Intl A Twig_Extensions_Extension_Intl instance
     */
    protected function getTwig_Extension_IntlService()
    {
        return $this->services['twig.extension.intl'] = new \Twig_Extensions_Extension_Intl();
    }

    /**
     * Gets the 'twig.extension.text' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Twig_Extensions_Extension_Text A Twig_Extensions_Extension_Text instance
     */
    protected function getTwig_Extension_TextService()
    {
        return $this->services['twig.extension.text'] = new \Twig_Extensions_Extension_Text();
    }

    /**
     * Gets the 'twig.form.renderer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Twig\Form\TwigRenderer A Symfony\Bridge\Twig\Form\TwigRenderer instance
     */
    protected function getTwig_Form_RendererService()
    {
        return $this->services['twig.form.renderer'] = new \Symfony\Bridge\Twig\Form\TwigRenderer(new \Symfony\Bridge\Twig\Form\TwigRendererEngine(array(0 => 'IvoryCKEditorBundle:Form:ckeditor_widget.html.twig', 1 => 'form_div_layout.html.twig', 2 => 'MopaBootstrapBundle:Form:fields.html.twig', 3 => 'CmfCoreBundle:Form:checkbox_url_label_form_type.html.twig', 4 => 'LiipImagineBundle:Form:form_div_layout.html.twig'), $this->get('twig')), $this->get('security.csrf.token_manager', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'twig.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\TwigBundle\Loader\FilesystemLoader A Symfony\Bundle\TwigBundle\Loader\FilesystemLoader instance
     */
    protected function getTwig_LoaderService()
    {
        $this->services['twig.loader'] = $instance = new \Symfony\Bundle\TwigBundle\Loader\FilesystemLoader(${($_ = isset($this->services['templating.locator']) ? $this->services['templating.locator'] : $this->getTemplating_LocatorService()) && false ?: '_'}, $this->get('templating.name_parser'), $this->targetDirs[3]);

        $instance->addPath(($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Resources/views'), 'Framework');
        $instance->addPath(($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/SecurityBundle/Resources/views'), 'Security');
        $instance->addPath(($this->targetDirs[3].'/app/Resources/TwigBundle/views'), 'Twig');
        $instance->addPath(($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/TwigBundle/Resources/views'), 'Twig');
        $instance->addPath(($this->targetDirs[3].'/vendor/symfony/swiftmailer-bundle/Resources/views'), 'Swiftmailer');
        $instance->addPath(($this->targetDirs[3].'/vendor/jms/translation-bundle/JMS/TranslationBundle/Resources/views'), 'JMSTranslation');
        $instance->addPath(($this->targetDirs[3].'/app/Resources/SyliusUiBundle/views'), 'SyliusUi');
        $instance->addPath(($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/views'), 'SyliusUi');
        $instance->addPath(($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/views'), 'SyliusResource');
        $instance->addPath(($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/views'), 'SyliusAttribute');
        $instance->addPath(($this->targetDirs[3].'/vendor/sonata-project/block-bundle/Resources/views'), 'SonataBlock');
        $instance->addPath(($this->targetDirs[3].'/vendor/symfony-cmf/core-bundle/src/Resources/views'), 'CmfCore');
        $instance->addPath(($this->targetDirs[3].'/app/Resources/CmfBlockBundle/views'), 'CmfBlock');
        $instance->addPath(($this->targetDirs[3].'/vendor/symfony-cmf/block-bundle/src/Resources/views'), 'CmfBlock');
        $instance->addPath(($this->targetDirs[3].'/vendor/symfony-cmf/media-bundle/Resources/views'), 'CmfMedia');
        $instance->addPath(($this->targetDirs[3].'/vendor/friendsofsymfony/elastica-bundle/Resources/views'), 'FOSElastica');
        $instance->addPath(($this->targetDirs[3].'/vendor/doctrine/phpcr-bundle/Resources/views'), 'DoctrinePHPCR');
        $instance->addPath(($this->targetDirs[3].'/vendor/doctrine/doctrine-bundle/Resources/views'), 'Doctrine');
        $instance->addPath(($this->targetDirs[3].'/vendor/infinite-networks/form-bundle/Resources/views'), 'InfiniteForm');
        $instance->addPath(($this->targetDirs[3].'/vendor/knplabs/knp-menu-bundle/Resources/views'), 'KnpMenu');
        $instance->addPath(($this->targetDirs[3].'/app/Resources/MopaBootstrapBundle/views'), 'MopaBootstrap');
        $instance->addPath(($this->targetDirs[3].'/vendor/mopa/bootstrap-bundle/Mopa/Bundle/BootstrapBundle/Resources/views'), 'MopaBootstrap');
        $instance->addPath(($this->targetDirs[3].'/vendor/liip/imagine-bundle/Resources/views'), 'LiipImagine');
        $instance->addPath(($this->targetDirs[3].'/vendor/egeloen/ckeditor-bundle/Resources/views'), 'IvoryCKEditor');
        $instance->addPath(($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/DebugBundle/Resources/views'), 'Debug');
        $instance->addPath(($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/WebProfilerBundle/Resources/views'), 'WebProfiler');
        $instance->addPath(($this->targetDirs[3].'/app/Resources/views'));
        $instance->addPath(($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bridge/Twig/Resources/views/Form'));
        $instance->addPath(($this->targetDirs[3].'/vendor/knplabs/knp-menu/src/Knp/Menu/Resources/views'));

        return $instance;
    }

    /**
     * Gets the 'twig.profile' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Twig_Profiler_Profile A Twig_Profiler_Profile instance
     */
    protected function getTwig_ProfileService()
    {
        return $this->services['twig.profile'] = new \Twig_Profiler_Profile();
    }

    /**
     * Gets the 'twig.runtime.httpkernel' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Twig\Extension\HttpKernelRuntime A Symfony\Bridge\Twig\Extension\HttpKernelRuntime instance
     */
    protected function getTwig_Runtime_HttpkernelService()
    {
        return $this->services['twig.runtime.httpkernel'] = new \Symfony\Bridge\Twig\Extension\HttpKernelRuntime($this->get('fragment.handler'));
    }

    /**
     * Gets the 'twig.translation.extractor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Twig\Translation\TwigExtractor A Symfony\Bridge\Twig\Translation\TwigExtractor instance
     */
    protected function getTwig_Translation_ExtractorService()
    {
        return $this->services['twig.translation.extractor'] = new \Symfony\Bridge\Twig\Translation\TwigExtractor($this->get('twig'));
    }

    /**
     * Gets the 'uri_signer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\UriSigner A Symfony\Component\HttpKernel\UriSigner instance
     */
    protected function getUriSignerService()
    {
        return $this->services['uri_signer'] = new \Symfony\Component\HttpKernel\UriSigner('ThisTokenIsNotSoSecretChangeIt');
    }

    /**
     * Gets the 'validate_request_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ValidateRequestListener A Symfony\Component\HttpKernel\EventListener\ValidateRequestListener instance
     */
    protected function getValidateRequestListenerService()
    {
        return $this->services['validate_request_listener'] = new \Symfony\Component\HttpKernel\EventListener\ValidateRequestListener();
    }

    /**
     * Gets the 'validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Validator\Validator\ValidatorInterface A Symfony\Component\Validator\Validator\ValidatorInterface instance
     */
    protected function getValidatorService()
    {
        return $this->services['validator'] = $this->get('validator.builder')->getValidator();
    }

    /**
     * Gets the 'validator.builder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Validator\ValidatorBuilderInterface A Symfony\Component\Validator\ValidatorBuilderInterface instance
     */
    protected function getValidator_BuilderService()
    {
        $this->services['validator.builder'] = $instance = \Symfony\Component\Validator\Validation::createValidatorBuilder();

        $instance->setConstraintValidatorFactory(new \Symfony\Bundle\FrameworkBundle\Validator\ConstraintValidatorFactory($this, array('validator.expression' => 'validator.expression', 'Symfony\\Component\\Validator\\Constraints\\ExpressionValidator' => 'validator.expression', 'Symfony\\Component\\Validator\\Constraints\\EmailValidator' => 'validator.email', 'security.validator.user_password' => 'security.validator.user_password', 'Symfony\\Component\\Security\\Core\\Validator\\Constraints\\UserPasswordValidator' => 'security.validator.user_password', 'sylius.validator.product_variant_combination' => 'sylius.validator.product_variant_combination', 'Sylius\\Bundle\\ProductBundle\\Validator\\ProductVariantCombinationValidator' => 'sylius.validator.product_variant_combination', 'sylius.validator.unique_simple_product_code' => 'sylius.validator.product_code_uniqueness', 'Sylius\\Bundle\\ProductBundle\\Validator\\UniqueSimpleProductCodeValidator' => 'sylius.validator.product_code_uniqueness', 'sylius_valid_attribute_value_validator' => 'sylius.validator.valid_attribute_value', 'Sylius\\Bundle\\AttributeBundle\\Validator\\Constraints\\ValidAttributeValueValidator' => 'sylius.validator.valid_attribute_value', 'cmf_routing.validator.route_defaults' => 'cmf_routing.validator.route_defaults', 'Symfony\\Cmf\\Bundle\\RoutingBundle\\Validator\\Constraints\\RouteDefaultsValidator' => 'cmf_routing.validator.route_defaults', 'doctrine_phpcr.odm.validator.valid_phpcr_odm' => 'doctrine_phpcr.odm.validator.valid_phpcr_odm', 'Doctrine\\Bundle\\PHPCRBundle\\Validator\\Constraints\\ValidPhpcrOdmValidator' => 'doctrine_phpcr.odm.validator.valid_phpcr_odm', 'doctrine.orm.validator.unique' => 'doctrine.orm.validator.unique', 'Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntityValidator' => 'doctrine.orm.validator.unique')));
        $instance->setTranslator($this->get('translator'));
        $instance->setTranslationDomain('validators');
        $instance->addXmlMappings(array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/config/validation.xml'), 1 => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/config/validation/Locale.xml'), 2 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/config/validation/Product.xml'), 3 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/config/validation/ProductAssociationType.xml'), 4 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/config/validation/ProductOption.xml'), 5 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/config/validation/ProductOptionTranslation.xml'), 6 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/config/validation/ProductOptionValue.xml'), 7 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/config/validation/ProductOptionValueTranslation.xml'), 8 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/config/validation/ProductTranslation.xml'), 9 => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/config/validation/ProductVariant.xml'), 10 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/config/validation/ChangePassword.xml'), 11 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/config/validation/PasswordReset.xml'), 12 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/config/validation/PasswordResetRequest.xml'), 13 => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/config/validation/User.xml'), 14 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/config/validation/Customer.xml'), 15 => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/config/validation/CustomerGroup.xml'), 16 => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/config/validation/Review.xml'), 17 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/config/validation/Attribute.xml'), 18 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/config/validation/AttributeTranslation.xml'), 19 => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/config/validation/AttributeValue.xml'), 20 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/config/validation/Taxon.xml'), 21 => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/config/validation/TaxonTranslation.xml'), 22 => ($this->targetDirs[3].'/vendor/zenstruck/redirect-bundle/src/Resources/config/validation.xml')));
        $instance->enableAnnotationMapping($this->get('annotation_reader'));
        $instance->addMethodMapping('loadValidatorMetadata');
        $instance->addObjectInitializers(array(0 => $this->get('sylius.validator.customer_initializer'), 1 => $this->get('doctrine.orm.validator_initializer')));
        $instance->addXmlMappings(array(0 => ($this->targetDirs[3].'/vendor/symfony-cmf/block-bundle/src/DependencyInjection/Compiler/../../Resources/config/validation-phpcr.xml')));
        $instance->addXmlMappings(array(0 => ($this->targetDirs[3].'/vendor/symfony-cmf/routing-bundle/src/DependencyInjection/Compiler/../../Resources/config/validation-phpcr.xml')));

        return $instance;
    }

    /**
     * Gets the 'validator.email' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Validator\Constraints\EmailValidator A Symfony\Component\Validator\Constraints\EmailValidator instance
     */
    protected function getValidator_EmailService()
    {
        return $this->services['validator.email'] = new \Symfony\Component\Validator\Constraints\EmailValidator(false);
    }

    /**
     * Gets the 'validator.expression' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Validator\Constraints\ExpressionValidator A Symfony\Component\Validator\Constraints\ExpressionValidator instance
     */
    protected function getValidator_ExpressionService()
    {
        return $this->services['validator.expression'] = new \Symfony\Component\Validator\Constraints\ExpressionValidator();
    }

    /**
     * Gets the 'var_dumper.cli_dumper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\VarDumper\Dumper\CliDumper A Symfony\Component\VarDumper\Dumper\CliDumper instance
     */
    protected function getVarDumper_CliDumperService()
    {
        return $this->services['var_dumper.cli_dumper'] = new \Symfony\Component\VarDumper\Dumper\CliDumper(NULL, 'UTF-8', 0);
    }

    /**
     * Gets the 'var_dumper.cloner' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\VarDumper\Cloner\VarCloner A Symfony\Component\VarDumper\Cloner\VarCloner instance
     */
    protected function getVarDumper_ClonerService()
    {
        $this->services['var_dumper.cloner'] = $instance = new \Symfony\Component\VarDumper\Cloner\VarCloner();

        $instance->setMaxItems(2500);
        $instance->setMaxString(-1);

        return $instance;
    }

    /**
     * Gets the 'web_profiler.controller.exception' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\Controller\ExceptionController A Symfony\Bundle\WebProfilerBundle\Controller\ExceptionController instance
     */
    protected function getWebProfiler_Controller_ExceptionService()
    {
        return $this->services['web_profiler.controller.exception'] = new \Symfony\Bundle\WebProfilerBundle\Controller\ExceptionController($this->get('profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('twig'), true);
    }

    /**
     * Gets the 'web_profiler.controller.profiler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\Controller\ProfilerController A Symfony\Bundle\WebProfilerBundle\Controller\ProfilerController instance
     */
    protected function getWebProfiler_Controller_ProfilerService()
    {
        return $this->services['web_profiler.controller.profiler'] = new \Symfony\Bundle\WebProfilerBundle\Controller\ProfilerController($this->get('cmf_routing.router', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('twig'), array('data_collector.request' => array(0 => 'request', 1 => '@WebProfiler/Collector/request.html.twig'), 'data_collector.time' => array(0 => 'time', 1 => '@WebProfiler/Collector/time.html.twig'), 'data_collector.memory' => array(0 => 'memory', 1 => '@WebProfiler/Collector/memory.html.twig'), 'data_collector.ajax' => array(0 => 'ajax', 1 => '@WebProfiler/Collector/ajax.html.twig'), 'data_collector.form' => array(0 => 'form', 1 => '@WebProfiler/Collector/form.html.twig'), 'data_collector.exception' => array(0 => 'exception', 1 => '@WebProfiler/Collector/exception.html.twig'), 'data_collector.logger' => array(0 => 'logger', 1 => '@WebProfiler/Collector/logger.html.twig'), 'data_collector.events' => array(0 => 'events', 1 => '@WebProfiler/Collector/events.html.twig'), 'data_collector.router' => array(0 => 'router', 1 => '@WebProfiler/Collector/router.html.twig'), 'data_collector.translation' => array(0 => 'translation', 1 => '@WebProfiler/Collector/translation.html.twig'), 'data_collector.security' => array(0 => 'security', 1 => '@Security/Collector/security.html.twig'), 'data_collector.twig' => array(0 => 'twig', 1 => '@WebProfiler/Collector/twig.html.twig'), 'data_collector.doctrine' => array(0 => 'db', 1 => '@Doctrine/Collector/db.html.twig'), 'doctrine_phpcr.data_collector' => array(0 => 'phpcr', 1 => 'DoctrinePHPCRBundle:Collector:phpcr'), 'swiftmailer.data_collector' => array(0 => 'swiftmailer', 1 => '@Swiftmailer/Collector/swiftmailer.html.twig'), 'data_collector.dump' => array(0 => 'dump', 1 => '@Debug/Profiler/dump.html.twig'), 'sonata.block.data_collector' => array(0 => 'block', 1 => 'SonataBlockBundle:Profiler:block.html.twig'), 'fos_elastica.data_collector' => array(0 => 'elastica', 1 => 'FOSElasticaBundle:Collector:elastica'), 'data_collector.config' => array(0 => 'config', 1 => '@WebProfiler/Collector/config.html.twig')), 'bottom', ${($_ = isset($this->services['web_profiler.csp.handler']) ? $this->services['web_profiler.csp.handler'] : $this->getWebProfiler_Csp_HandlerService()) && false ?: '_'}, $this->targetDirs[3]);
    }

    /**
     * Gets the 'web_profiler.controller.router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\Controller\RouterController A Symfony\Bundle\WebProfilerBundle\Controller\RouterController instance
     */
    protected function getWebProfiler_Controller_RouterService()
    {
        return $this->services['web_profiler.controller.router'] = new \Symfony\Bundle\WebProfilerBundle\Controller\RouterController($this->get('profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('twig'), $this->get('cmf_routing.router', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'web_profiler.debug_toolbar' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener A Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener instance
     */
    protected function getWebProfiler_DebugToolbarService()
    {
        return $this->services['web_profiler.debug_toolbar'] = new \Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener($this->get('twig'), false, 2, 'bottom', $this->get('cmf_routing.router', ContainerInterface::NULL_ON_INVALID_REFERENCE), '^/(app(_[\\w]+)?\\.php/)?_wdt', ${($_ = isset($this->services['web_profiler.csp.handler']) ? $this->services['web_profiler.csp.handler'] : $this->getWebProfiler_Csp_HandlerService()) && false ?: '_'});
    }

    /**
     * Gets the 'white_october_pagerfanta.view_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pagerfanta\View\ViewFactory A Pagerfanta\View\ViewFactory instance
     */
    protected function getWhiteOctoberPagerfanta_ViewFactoryService()
    {
        $a = $this->get('translator');

        $b = new \Pagerfanta\View\DefaultView();

        $c = new \Pagerfanta\View\TwitterBootstrapView();

        $d = new \Pagerfanta\View\TwitterBootstrap3View();

        $this->services['white_october_pagerfanta.view_factory'] = $instance = new \Pagerfanta\View\ViewFactory(array());

        $instance->add(array('semantic_ui_translated' => $this->get('pagerfanta.view.semantic_ui_translated'), 'default' => $b, 'default_translated' => new \WhiteOctober\PagerfantaBundle\View\DefaultTranslatedView($b, $a), 'twitter_bootstrap' => $c, 'twitter_bootstrap3' => $d, 'twitter_bootstrap3_translated' => new \WhiteOctober\PagerfantaBundle\View\TwitterBootstrap3TranslatedView($d, $a), 'twitter_bootstrap_translated' => new \WhiteOctober\PagerfantaBundle\View\TwitterBootstrapTranslatedView($c, $a)));

        return $instance;
    }

    /**
     * Gets the 'zenstruck_redirect.not_found_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Zenstruck\RedirectBundle\EventListener\CreateNotFoundListener A Zenstruck\RedirectBundle\EventListener\CreateNotFoundListener instance
     */
    protected function getZenstruckRedirect_NotFoundListenerService()
    {
        return $this->services['zenstruck_redirect.not_found_listener'] = new \Zenstruck\RedirectBundle\EventListener\CreateNotFoundListener($this->get('zenstruck_redirect.not_found_manager'));
    }

    /**
     * Gets the 'zenstruck_redirect.not_found_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Zenstruck\RedirectBundle\Service\NotFoundManager A Zenstruck\RedirectBundle\Service\NotFoundManager instance
     */
    protected function getZenstruckRedirect_NotFoundManagerService()
    {
        return $this->services['zenstruck_redirect.not_found_manager'] = new \Zenstruck\RedirectBundle\Service\NotFoundManager('AppBundle\\Entity\\NotFound', $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'zenstruck_redirect.redirect.form.type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Zenstruck\RedirectBundle\Form\Type\RedirectType A Zenstruck\RedirectBundle\Form\Type\RedirectType instance
     */
    protected function getZenstruckRedirect_Redirect_Form_TypeService()
    {
        return $this->services['zenstruck_redirect.redirect.form.type'] = new \Zenstruck\RedirectBundle\Form\Type\RedirectType('AppBundle\\Entity\\Redirection');
    }

    /**
     * Gets the 'zenstruck_redirect.redirect_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Zenstruck\RedirectBundle\EventListener\RedirectOnNotFoundListener A Zenstruck\RedirectBundle\EventListener\RedirectOnNotFoundListener instance
     */
    protected function getZenstruckRedirect_RedirectListenerService()
    {
        return $this->services['zenstruck_redirect.redirect_listener'] = new \Zenstruck\RedirectBundle\EventListener\RedirectOnNotFoundListener($this->get('zenstruck_redirect.redirect_manager'));
    }

    /**
     * Gets the 'zenstruck_redirect.redirect_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Zenstruck\RedirectBundle\Service\RedirectManager A Zenstruck\RedirectBundle\Service\RedirectManager instance
     */
    protected function getZenstruckRedirect_RedirectManagerService()
    {
        return $this->services['zenstruck_redirect.redirect_manager'] = new \Zenstruck\RedirectBundle\Service\RedirectManager('AppBundle\\Entity\\Redirection', $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'annotations.reader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Doctrine\Common\Annotations\AnnotationReader A Doctrine\Common\Annotations\AnnotationReader instance
     */
    protected function getAnnotations_ReaderService()
    {
        return $this->services['annotations.reader'] = new \Doctrine\Common\Annotations\AnnotationReader();
    }

    /**
     * Gets the 'assetic.asset_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Bundle\AsseticBundle\Factory\AssetFactory A Symfony\Bundle\AsseticBundle\Factory\AssetFactory instance
     */
    protected function getAssetic_AssetFactoryService()
    {
        $this->services['assetic.asset_factory'] = $instance = new \Symfony\Bundle\AsseticBundle\Factory\AssetFactory($this->get('kernel'), $this, $this->getParameterBag(), ($this->targetDirs[3].'/app/../web'), true);

        $instance->addWorker(new \Symfony\Bundle\AsseticBundle\Factory\Worker\UseControllerWorker());

        return $instance;
    }

    /**
     * Gets the 'cache.annotations' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface A Symfony\Component\Cache\Adapter\AdapterInterface instance
     */
    protected function getCache_AnnotationsService()
    {
        return $this->services['cache.annotations'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('3xypzREBRL', 0, 'mSAx1P1h9OTOq7lHVG7fHU', (__DIR__.'/pools'), $this->get('monolog.logger.cache', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'cmf_media.persistence.phpcr.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Cmf\Bundle\MediaBundle\Doctrine\Phpcr\MediaManager A Symfony\Cmf\Bundle\MediaBundle\Doctrine\Phpcr\MediaManager instance
     */
    protected function getCmfMedia_Persistence_Phpcr_ManagerService()
    {
        return $this->services['cmf_media.persistence.phpcr.manager'] = new \Symfony\Cmf\Bundle\MediaBundle\Doctrine\Phpcr\MediaManager($this->get('doctrine_phpcr'), NULL, '/cms/media');
    }

    /**
     * Gets the 'controller_name_converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser A Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser instance
     */
    protected function getControllerNameConverterService()
    {
        return $this->services['controller_name_converter'] = new \Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser($this->get('kernel'));
    }

    /**
     * Gets the 'debug.file_link_formatter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\HttpKernel\Debug\FileLinkFormatter A Symfony\Component\HttpKernel\Debug\FileLinkFormatter instance
     */
    protected function getDebug_FileLinkFormatterService()
    {
        return $this->services['debug.file_link_formatter'] = new \Symfony\Component\HttpKernel\Debug\FileLinkFormatter(NULL, $this->get('request_stack', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->targetDirs[3], '/_profiler/open?file=%f&line=%l#line%l');
    }

    /**
     * Gets the 'debug.log_processor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Bridge\Monolog\Processor\DebugProcessor A Symfony\Bridge\Monolog\Processor\DebugProcessor instance
     */
    protected function getDebug_LogProcessorService()
    {
        return $this->services['debug.log_processor'] = new \Symfony\Bridge\Monolog\Processor\DebugProcessor();
    }

    /**
     * Gets the 'debug.security.access.decision_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Core\Authorization\DebugAccessDecisionManager A Symfony\Component\Security\Core\Authorization\DebugAccessDecisionManager instance
     */
    protected function getDebug_Security_Access_DecisionManagerService()
    {
        $a = ${($_ = isset($this->services['security.authentication.trust_resolver']) ? $this->services['security.authentication.trust_resolver'] : $this->getSecurity_Authentication_TrustResolverService()) && false ?: '_'};
        $b = ${($_ = isset($this->services['security.role_hierarchy']) ? $this->services['security.role_hierarchy'] : $this->getSecurity_RoleHierarchyService()) && false ?: '_'};

        $this->services['debug.security.access.decision_manager'] = $instance = new \Symfony\Component\Security\Core\Authorization\DebugAccessDecisionManager(new \Symfony\Component\Security\Core\Authorization\AccessDecisionManager(array(), 'affirmative', false, true));

        $instance->setVoters(array(0 => new \Symfony\Component\Security\Core\Authorization\Voter\AuthenticatedVoter($a), 1 => new \Symfony\Component\Security\Core\Authorization\Voter\RoleHierarchyVoter($b), 2 => new \Symfony\Component\Security\Core\Authorization\Voter\ExpressionVoter(new \Symfony\Component\Security\Core\Authorization\ExpressionLanguage(), $a, $b), 3 => new \Symfony\Cmf\Bundle\CoreBundle\PublishWorkflow\Voter\PublishableVoter($this)));

        return $instance;
    }

    /**
     * Gets the 'doctrine.dbal.logger.profiling.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Doctrine\DBAL\Logging\DebugStack A Doctrine\DBAL\Logging\DebugStack instance
     */
    protected function getDoctrine_Dbal_Logger_Profiling_DefaultService()
    {
        return $this->services['doctrine.dbal.logger.profiling.default'] = new \Doctrine\DBAL\Logging\DebugStack();
    }

    /**
     * Gets the 'fos_elastica.elastica_to_model_transformer.jedisjeux.article' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \FOS\ElasticaBundle\Doctrine\ORM\ElasticaToModelTransformer A FOS\ElasticaBundle\Doctrine\ORM\ElasticaToModelTransformer instance
     */
    protected function getFosElastica_ElasticaToModelTransformer_Jedisjeux_ArticleService()
    {
        $this->services['fos_elastica.elastica_to_model_transformer.jedisjeux.article'] = $instance = new \FOS\ElasticaBundle\Doctrine\ORM\ElasticaToModelTransformer($this->get('doctrine'), 'AppBundle\\Entity\\Article', array('hints' => array(), 'hydrate' => true, 'ignore_missing' => false, 'query_builder_method' => 'createQueryBuilder', 'identifier' => 'id'));

        $instance->setPropertyAccessor($this->get('fos_elastica.property_accessor'));

        return $instance;
    }

    /**
     * Gets the 'fos_elastica.elastica_to_model_transformer.jedisjeux.person' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \FOS\ElasticaBundle\Doctrine\ORM\ElasticaToModelTransformer A FOS\ElasticaBundle\Doctrine\ORM\ElasticaToModelTransformer instance
     */
    protected function getFosElastica_ElasticaToModelTransformer_Jedisjeux_PersonService()
    {
        $this->services['fos_elastica.elastica_to_model_transformer.jedisjeux.person'] = $instance = new \FOS\ElasticaBundle\Doctrine\ORM\ElasticaToModelTransformer($this->get('doctrine'), 'AppBundle\\Entity\\Person', array('hints' => array(), 'hydrate' => true, 'ignore_missing' => false, 'query_builder_method' => 'createQueryBuilder', 'identifier' => 'id'));

        $instance->setPropertyAccessor($this->get('fos_elastica.property_accessor'));

        return $instance;
    }

    /**
     * Gets the 'fos_elastica.elastica_to_model_transformer.jedisjeux.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \FOS\ElasticaBundle\Doctrine\ORM\ElasticaToModelTransformer A FOS\ElasticaBundle\Doctrine\ORM\ElasticaToModelTransformer instance
     */
    protected function getFosElastica_ElasticaToModelTransformer_Jedisjeux_ProductService()
    {
        $this->services['fos_elastica.elastica_to_model_transformer.jedisjeux.product'] = $instance = new \FOS\ElasticaBundle\Doctrine\ORM\ElasticaToModelTransformer($this->get('doctrine'), 'AppBundle\\Entity\\Product', array('hints' => array(), 'hydrate' => true, 'ignore_missing' => false, 'query_builder_method' => 'createQueryBuilder', 'identifier' => 'id'));

        $instance->setPropertyAccessor($this->get('fos_elastica.property_accessor'));

        return $instance;
    }

    /**
     * Gets the 'fos_elastica.elastica_to_model_transformer.jedisjeux.taxon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \FOS\ElasticaBundle\Doctrine\ORM\ElasticaToModelTransformer A FOS\ElasticaBundle\Doctrine\ORM\ElasticaToModelTransformer instance
     */
    protected function getFosElastica_ElasticaToModelTransformer_Jedisjeux_TaxonService()
    {
        $this->services['fos_elastica.elastica_to_model_transformer.jedisjeux.taxon'] = $instance = new \FOS\ElasticaBundle\Doctrine\ORM\ElasticaToModelTransformer($this->get('doctrine'), 'AppBundle\\Entity\\Taxon', array('hints' => array(), 'hydrate' => true, 'ignore_missing' => false, 'query_builder_method' => 'createQueryBuilder', 'identifier' => 'id'));

        $instance->setPropertyAccessor($this->get('fos_elastica.property_accessor'));

        return $instance;
    }

    /**
     * Gets the 'fos_elastica.elastica_to_model_transformer.jedisjeux.topic' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \FOS\ElasticaBundle\Doctrine\ORM\ElasticaToModelTransformer A FOS\ElasticaBundle\Doctrine\ORM\ElasticaToModelTransformer instance
     */
    protected function getFosElastica_ElasticaToModelTransformer_Jedisjeux_TopicService()
    {
        $this->services['fos_elastica.elastica_to_model_transformer.jedisjeux.topic'] = $instance = new \FOS\ElasticaBundle\Doctrine\ORM\ElasticaToModelTransformer($this->get('doctrine'), 'AppBundle\\Entity\\Topic', array('hints' => array(), 'hydrate' => true, 'ignore_missing' => false, 'query_builder_method' => 'createQueryBuilder', 'identifier' => 'id'));

        $instance->setPropertyAccessor($this->get('fos_elastica.property_accessor'));

        return $instance;
    }

    /**
     * Gets the 'fos_elastica.elastica_to_model_transformer.jedisjeux.user' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \FOS\ElasticaBundle\Doctrine\ORM\ElasticaToModelTransformer A FOS\ElasticaBundle\Doctrine\ORM\ElasticaToModelTransformer instance
     */
    protected function getFosElastica_ElasticaToModelTransformer_Jedisjeux_UserService()
    {
        $this->services['fos_elastica.elastica_to_model_transformer.jedisjeux.user'] = $instance = new \FOS\ElasticaBundle\Doctrine\ORM\ElasticaToModelTransformer($this->get('doctrine'), 'AppBundle\\Entity\\User', array('hints' => array(), 'hydrate' => true, 'ignore_missing' => false, 'query_builder_method' => 'createQueryBuilder', 'identifier' => 'id'));

        $instance->setPropertyAccessor($this->get('fos_elastica.property_accessor'));

        return $instance;
    }

    /**
     * Gets the 'hateoas.configuration.relations_repository' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Hateoas\Configuration\RelationsRepository A Hateoas\Configuration\RelationsRepository instance
     */
    protected function getHateoas_Configuration_RelationsRepositoryService()
    {
        $a = ${($_ = isset($this->services['jms_serializer.metadata.file_locator']) ? $this->services['jms_serializer.metadata.file_locator'] : $this->getJmsSerializer_Metadata_FileLocatorService()) && false ?: '_'};
        $b = $this->get('annotation_reader');

        $c = new \Hateoas\Configuration\Metadata\Driver\YamlDriver($a);

        $d = new \Hateoas\Configuration\Metadata\Driver\XmlDriver($a);

        $e = new \Hateoas\Configuration\Metadata\Driver\AnnotationDriver($b);

        $f = new \Hateoas\Configuration\Metadata\Driver\ExtensionDriver($e);

        $g = new \Metadata\Driver\DriverChain(array(0 => $c, 1 => $d, 2 => $f));

        $h = new \Metadata\Cache\FileCache((__DIR__.'/hateoas'));

        $i = new \Metadata\MetadataFactory($g, 'Metadata\\ClassHierarchyMetadata', true);
        $i->setCache($h);

        return $this->services['hateoas.configuration.relations_repository'] = new \Hateoas\Configuration\RelationsRepository($i, new \Hateoas\Configuration\Provider\RelationProvider($i, $this->get('hateoas.configuration.provider.resolver')));
    }

    /**
     * Gets the 'hateoas.embeds_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Hateoas\Factory\EmbeddedsFactory A Hateoas\Factory\EmbeddedsFactory instance
     */
    protected function getHateoas_EmbedsFactoryService()
    {
        return $this->services['hateoas.embeds_factory'] = new \Hateoas\Factory\EmbeddedsFactory(${($_ = isset($this->services['hateoas.configuration.relations_repository']) ? $this->services['hateoas.configuration.relations_repository'] : $this->getHateoas_Configuration_RelationsRepositoryService()) && false ?: '_'}, $this->get('hateoas.expression.evaluator'), $this->get('hateoas.serializer.exclusion_manager'));
    }

    /**
     * Gets the 'hateoas.link_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Hateoas\Factory\LinkFactory A Hateoas\Factory\LinkFactory instance
     */
    protected function getHateoas_LinkFactoryService()
    {
        return $this->services['hateoas.link_factory'] = new \Hateoas\Factory\LinkFactory($this->get('hateoas.expression.evaluator'), $this->get('hateoas.generator.registry'));
    }

    /**
     * Gets the 'hateoas.links_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Hateoas\Factory\LinksFactory A Hateoas\Factory\LinksFactory instance
     */
    protected function getHateoas_LinksFactoryService()
    {
        return $this->services['hateoas.links_factory'] = new \Hateoas\Factory\LinksFactory(${($_ = isset($this->services['hateoas.configuration.relations_repository']) ? $this->services['hateoas.configuration.relations_repository'] : $this->getHateoas_Configuration_RelationsRepositoryService()) && false ?: '_'}, ${($_ = isset($this->services['hateoas.link_factory']) ? $this->services['hateoas.link_factory'] : $this->getHateoas_LinkFactoryService()) && false ?: '_'}, $this->get('hateoas.serializer.exclusion_manager'));
    }

    /**
     * Gets the 'jms_serializer.metadata.file_locator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Metadata\Driver\FileLocator A Metadata\Driver\FileLocator instance
     */
    protected function getJmsSerializer_Metadata_FileLocatorService()
    {
        return $this->services['jms_serializer.metadata.file_locator'] = new \Metadata\Driver\FileLocator(array('Symfony\\Bundle\\FrameworkBundle' => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Resources/config/serializer'), 'Symfony\\Bundle\\SecurityBundle' => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/SecurityBundle/Resources/config/serializer'), 'Symfony\\Bundle\\TwigBundle' => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/TwigBundle/Resources/config/serializer'), 'Symfony\\Bundle\\MonologBundle' => ($this->targetDirs[3].'/vendor/symfony/monolog-bundle/Resources/config/serializer'), 'Symfony\\Bundle\\SwiftmailerBundle' => ($this->targetDirs[3].'/vendor/symfony/swiftmailer-bundle/Resources/config/serializer'), 'Symfony\\Bundle\\AsseticBundle' => ($this->targetDirs[3].'/vendor/symfony/assetic-bundle/Resources/config/serializer'), 'Sensio\\Bundle\\FrameworkExtraBundle' => ($this->targetDirs[3].'/vendor/sensio/framework-extra-bundle/Resources/config/serializer'), 'JMS\\SerializerBundle' => ($this->targetDirs[3].'/vendor/jms/serializer-bundle/JMS/SerializerBundle/Resources/config/serializer'), 'JMS\\TranslationBundle' => ($this->targetDirs[3].'/vendor/jms/translation-bundle/JMS/TranslationBundle/Resources/config/serializer'), 'Stof\\DoctrineExtensionsBundle' => ($this->targetDirs[3].'/vendor/stof/doctrine-extensions-bundle/Resources/config/serializer'), 'WhiteOctober\\PagerfantaBundle' => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/Resources/config/serializer'), 'Bazinga\\Bundle\\HateoasBundle' => ($this->targetDirs[3].'/vendor/willdurand/hateoas-bundle/Bazinga/Bundle/HateoasBundle/Resources/config/serializer'), 'Sylius\\Bundle\\LocaleBundle' => ($this->targetDirs[3].'/vendor/sylius/locale-bundle/Resources/config/serializer'), 'Sylius\\Bundle\\ProductBundle' => ($this->targetDirs[3].'/vendor/sylius/product-bundle/Resources/config/serializer'), 'Sylius\\Bundle\\UiBundle' => ($this->targetDirs[3].'/vendor/sylius/ui-bundle/Resources/config/serializer'), 'Sylius\\Bundle\\UserBundle' => ($this->targetDirs[3].'/vendor/sylius/user-bundle/Resources/config/serializer'), 'Sylius\\Bundle\\CustomerBundle' => ($this->targetDirs[3].'/vendor/sylius/customer-bundle/Resources/config/serializer'), 'Sylius\\Bundle\\MailerBundle' => ($this->targetDirs[3].'/vendor/sylius/mailer-bundle/Resources/config/serializer'), 'Sylius\\Bundle\\ReviewBundle' => ($this->targetDirs[3].'/vendor/sylius/review-bundle/Resources/config/serializer'), 'Sylius\\Bundle\\ResourceBundle' => ($this->targetDirs[3].'/vendor/sylius/resource-bundle/Resources/config/serializer'), 'Sylius\\Bundle\\AttributeBundle' => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle/Resources/config/serializer'), 'Sylius\\Bundle\\TaxonomyBundle' => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle/Resources/config/serializer'), 'winzou\\Bundle\\StateMachineBundle' => ($this->targetDirs[3].'/vendor/winzou/state-machine-bundle/Resources/config/serializer'), 'Sonata\\BlockBundle' => ($this->targetDirs[3].'/vendor/sonata-project/block-bundle/Resources/config/serializer'), 'Symfony\\Cmf\\Bundle\\CoreBundle' => ($this->targetDirs[3].'/vendor/symfony-cmf/core-bundle/src/Resources/config/serializer'), 'Symfony\\Cmf\\Bundle\\BlockBundle' => ($this->targetDirs[3].'/vendor/symfony-cmf/block-bundle/src/Resources/config/serializer'), 'Symfony\\Cmf\\Bundle\\MediaBundle' => ($this->targetDirs[3].'/vendor/symfony-cmf/media-bundle/Resources/config/serializer'), 'Symfony\\Cmf\\Bundle\\RoutingBundle' => ($this->targetDirs[3].'/vendor/symfony-cmf/routing-bundle/src/Resources/config/serializer'), 'Sylius\\Bundle\\GridBundle' => ($this->targetDirs[3].'/vendor/sylius/grid-bundle/Resources/config/serializer'), 'FOS\\RestBundle' => ($this->targetDirs[3].'/vendor/friendsofsymfony/rest-bundle/FOS/RestBundle/Resources/config/serializer'), 'FOS\\JsRoutingBundle' => ($this->targetDirs[3].'/vendor/friendsofsymfony/jsrouting-bundle/Resources/config/serializer'), 'FOS\\ElasticaBundle' => ($this->targetDirs[3].'/vendor/friendsofsymfony/elastica-bundle/Resources/config/serializer'), 'Doctrine\\Bundle\\PHPCRBundle' => ($this->targetDirs[3].'/vendor/doctrine/phpcr-bundle/Resources/config/serializer'), 'Doctrine\\Bundle\\DoctrineCacheBundle' => ($this->targetDirs[3].'/vendor/doctrine/doctrine-cache-bundle/Resources/config/serializer'), 'Doctrine\\Bundle\\DoctrineBundle' => ($this->targetDirs[3].'/vendor/doctrine/doctrine-bundle/Resources/config/serializer'), 'Doctrine\\Bundle\\MigrationsBundle' => ($this->targetDirs[3].'/vendor/doctrine/doctrine-migrations-bundle/Resources/config/serializer'), 'Infinite\\FormBundle' => ($this->targetDirs[3].'/vendor/infinite-networks/form-bundle/Resources/config/serializer'), 'Knp\\Bundle\\MenuBundle' => ($this->targetDirs[3].'/vendor/knplabs/knp-menu-bundle/Resources/config/serializer'), 'Mopa\\Bundle\\BootstrapBundle' => ($this->targetDirs[3].'/vendor/mopa/bootstrap-bundle/Mopa/Bundle/BootstrapBundle/Resources/config/serializer'), 'Liip\\ImagineBundle' => ($this->targetDirs[3].'/vendor/liip/imagine-bundle/Resources/config/serializer'), 'Ivory\\CKEditorBundle' => ($this->targetDirs[3].'/vendor/egeloen/ckeditor-bundle/Resources/config/serializer'), 'Knp\\DoctrineBehaviors\\Bundle' => ($this->targetDirs[3].'/vendor/knplabs/doctrine-behaviors/src/Bundle/Resources/config/serializer'), 'Zenstruck\\RedirectBundle' => ($this->targetDirs[3].'/vendor/zenstruck/redirect-bundle/src/Resources/config/serializer'), 'Bmatzner\\JQueryUIBundle' => ($this->targetDirs[3].'/vendor/bmatzner/jquery-ui-bundle/Bmatzner/JQueryUIBundle/Resources/config/serializer'), 'Bmatzner\\JQueryBundle' => ($this->targetDirs[3].'/vendor/bmatzner/jquery-bundle/Bmatzner/JQueryBundle/Resources/config/serializer'), 'Bmatzner\\FontAwesomeBundle' => ($this->targetDirs[3].'/vendor/bmatzner/fontawesome-bundle/Bmatzner/FontAwesomeBundle/Resources/config/serializer'), 'AppBundle' => ($this->targetDirs[3].'/src/AppBundle/Resources/config/serializer'), 'Symfony\\Bundle\\DebugBundle' => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/DebugBundle/Resources/config/serializer'), 'Symfony\\Bundle\\WebProfilerBundle' => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/WebProfilerBundle/Resources/config/serializer'), 'Sensio\\Bundle\\DistributionBundle' => ($this->targetDirs[3].'/vendor/sensio/distribution-bundle/Resources/config/serializer')));
    }

    /**
     * Gets the 'jms_serializer.metadata_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Metadata\MetadataFactory A Metadata\MetadataFactory instance
     */
    protected function getJmsSerializer_MetadataFactoryService()
    {
        $this->services['jms_serializer.metadata_factory'] = $instance = new \Metadata\MetadataFactory(new \Metadata\Driver\LazyLoadingDriver($this, 'jms_serializer.metadata_driver'), 'Metadata\\ClassHierarchyMetadata', true);

        $instance->setCache(new \Metadata\Cache\FileCache((__DIR__.'/jms_serializer')));

        return $instance;
    }

    /**
     * Gets the 'jms_serializer.unserialize_object_constructor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \JMS\Serializer\Construction\UnserializeObjectConstructor A JMS\Serializer\Construction\UnserializeObjectConstructor instance
     */
    protected function getJmsSerializer_UnserializeObjectConstructorService()
    {
        return $this->services['jms_serializer.unserialize_object_constructor'] = new \JMS\Serializer\Construction\UnserializeObjectConstructor();
    }

    /**
     * Gets the 'monolog.processor.psr_log_message' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Monolog\Processor\PsrLogMessageProcessor A Monolog\Processor\PsrLogMessageProcessor instance
     */
    protected function getMonolog_Processor_PsrLogMessageService()
    {
        return $this->services['monolog.processor.psr_log_message'] = new \Monolog\Processor\PsrLogMessageProcessor();
    }

    /**
     * Gets the 'router.request_context' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Routing\RequestContext A Symfony\Component\Routing\RequestContext instance
     */
    protected function getRouter_RequestContextService()
    {
        return $this->services['router.request_context'] = new \Symfony\Component\Routing\RequestContext('', 'GET', 'jdj.dev', 'http', 80, 443);
    }

    /**
     * Gets the 'security.access_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Http\Firewall\AccessListener A Symfony\Component\Security\Http\Firewall\AccessListener instance
     */
    protected function getSecurity_AccessListenerService()
    {
        return $this->services['security.access_listener'] = new \Symfony\Component\Security\Http\Firewall\AccessListener($this->get('security.token_storage'), ${($_ = isset($this->services['debug.security.access.decision_manager']) ? $this->services['debug.security.access.decision_manager'] : $this->getDebug_Security_Access_DecisionManagerService()) && false ?: '_'}, ${($_ = isset($this->services['security.access_map']) ? $this->services['security.access_map'] : $this->getSecurity_AccessMapService()) && false ?: '_'}, ${($_ = isset($this->services['security.authentication.manager']) ? $this->services['security.authentication.manager'] : $this->getSecurity_Authentication_ManagerService()) && false ?: '_'});
    }

    /**
     * Gets the 'security.access_map' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Http\AccessMap A Symfony\Component\Security\Http\AccessMap instance
     */
    protected function getSecurity_AccessMapService()
    {
        $this->services['security.access_map'] = $instance = new \Symfony\Component\Security\Http\AccessMap();

        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/_partial.*', NULL, array(), array(0 => '127.0.0.1', 1 => '::1')), array(0 => 'IS_AUTHENTICATED_ANONYMOUSLY'), NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/_partial.*'), array(0 => 'ROLE_NO_ACCESS'), NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/login.*'), array(0 => 'IS_AUTHENTICATED_ANONYMOUSLY'), NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/register'), array(0 => 'IS_AUTHENTICATED_ANONYMOUSLY'), NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/resetting'), array(0 => 'IS_AUTHENTICATED_ANONYMOUSLY'), NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/verify'), array(0 => 'IS_AUTHENTICATED_ANONYMOUSLY'), NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/mon-compte.*'), array(0 => 'ROLE_USER'), NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/admin/'), array(0 => 'ROLE_ADMIN'), NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('/new$'), array(0 => 'ROLE_USER'), NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('/edit$'), array(0 => 'ROLE_USER'), NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/api/products/\\d+/ratings/'), array(0 => 'ROLE_USER'), NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/api/product-lists/.+/products/\\d+'), array(0 => 'ROLE_USER'), NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/user-review/\\d+/like'), array(0 => 'ROLE_USER'), NULL);

        return $instance;
    }

    /**
     * Gets the 'security.authentication.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Core\Authentication\AuthenticationProviderManager A Symfony\Component\Security\Core\Authentication\AuthenticationProviderManager instance
     */
    protected function getSecurity_Authentication_ManagerService()
    {
        $a = ${($_ = isset($this->services['security.user_checker']) ? $this->services['security.user_checker'] : $this->getSecurity_UserCheckerService()) && false ?: '_'};

        $this->services['security.authentication.manager'] = $instance = new \Symfony\Component\Security\Core\Authentication\AuthenticationProviderManager(array(0 => new \Symfony\Component\Security\Core\Authentication\Provider\AnonymousAuthenticationProvider('58ecd215246dd3.81429637'), 1 => new \Symfony\Component\Security\Core\Authentication\Provider\DaoAuthenticationProvider($this->get('sylius.shop_user_provider.email_or_name_based'), $a, 'main', $this->get('security.encoder_factory'), true), 2 => new \Symfony\Component\Security\Core\Authentication\Provider\RememberMeAuthenticationProvider($a, 'ThisTokenIsNotSoSecretChangeIt', 'main'), 3 => new \Symfony\Component\Security\Core\Authentication\Provider\AnonymousAuthenticationProvider('58ecd215246dd3.81429637')), true);

        $instance->setEventDispatcher($this->get('debug.event_dispatcher'));

        return $instance;
    }

    /**
     * Gets the 'security.authentication.trust_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver A Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver instance
     */
    protected function getSecurity_Authentication_TrustResolverService()
    {
        return $this->services['security.authentication.trust_resolver'] = new \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver('Symfony\\Component\\Security\\Core\\Authentication\\Token\\AnonymousToken', 'Symfony\\Component\\Security\\Core\\Authentication\\Token\\RememberMeToken');
    }

    /**
     * Gets the 'security.channel_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Http\Firewall\ChannelListener A Symfony\Component\Security\Http\Firewall\ChannelListener instance
     */
    protected function getSecurity_ChannelListenerService()
    {
        return $this->services['security.channel_listener'] = new \Symfony\Component\Security\Http\Firewall\ChannelListener(${($_ = isset($this->services['security.access_map']) ? $this->services['security.access_map'] : $this->getSecurity_AccessMapService()) && false ?: '_'}, new \Symfony\Component\Security\Http\EntryPoint\RetryAuthenticationEntryPoint(80, 443), $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'security.context_listener.0' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Http\Firewall\ContextListener A Symfony\Component\Security\Http\Firewall\ContextListener instance
     */
    protected function getSecurity_ContextListener_0Service()
    {
        return $this->services['security.context_listener.0'] = new \Symfony\Component\Security\Http\Firewall\ContextListener($this->get('security.token_storage'), array(0 => $this->get('sylius.shop_user_provider.email_or_name_based')), 'user', $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('debug.event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE), ${($_ = isset($this->services['security.authentication.trust_resolver']) ? $this->services['security.authentication.trust_resolver'] : $this->getSecurity_Authentication_TrustResolverService()) && false ?: '_'});
    }

    /**
     * Gets the 'security.firewall.map' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallMap A Symfony\Bundle\SecurityBundle\Security\FirewallMap instance
     */
    protected function getSecurity_Firewall_MapService()
    {
        return $this->services['security.firewall.map'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallMap($this, array('security.firewall.map.context.api' => new \Symfony\Component\HttpFoundation\RequestMatcher('^/api/'), 'security.firewall.map.context.main' => new \Symfony\Component\HttpFoundation\RequestMatcher('/.*')));
    }

    /**
     * Gets the 'security.http_utils' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Http\HttpUtils A Symfony\Component\Security\Http\HttpUtils instance
     */
    protected function getSecurity_HttpUtilsService()
    {
        $a = $this->get('cmf_routing.router', ContainerInterface::NULL_ON_INVALID_REFERENCE);

        return $this->services['security.http_utils'] = new \Symfony\Component\Security\Http\HttpUtils($a, $a);
    }

    /**
     * Gets the 'security.logout_url_generator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Http\Logout\LogoutUrlGenerator A Symfony\Component\Security\Http\Logout\LogoutUrlGenerator instance
     */
    protected function getSecurity_LogoutUrlGeneratorService()
    {
        $this->services['security.logout_url_generator'] = $instance = new \Symfony\Component\Security\Http\Logout\LogoutUrlGenerator($this->get('request_stack', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('cmf_routing.router', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('security.token_storage', ContainerInterface::NULL_ON_INVALID_REFERENCE));

        $instance->registerListener('main', 'app_frontend_logout', 'logout', '_csrf_token', NULL);

        return $instance;
    }

    /**
     * Gets the 'security.role_hierarchy' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Core\Role\RoleHierarchy A Symfony\Component\Security\Core\Role\RoleHierarchy instance
     */
    protected function getSecurity_RoleHierarchyService()
    {
        return $this->services['security.role_hierarchy'] = new \Symfony\Component\Security\Core\Role\RoleHierarchy(array('ROLE_STAFF' => array(0 => 'ROLE_USER'), 'ROLE_WORKFLOW' => array(0 => 'ROLE_STAFF'), 'ROLE_REDACTOR' => array(0 => 'ROLE_WORKFLOW'), 'ROLE_TRANSLATOR' => array(0 => 'ROLE_WORKFLOW'), 'ROLE_QUALITY' => array(0 => 'ROLE_WORKFLOW'), 'ROLE_REVIEWER' => array(0 => 'ROLE_WORKFLOW'), 'ROLE_PUBLISHER' => array(0 => 'ROLE_WORKFLOW'), 'ROLE_ADMIN_WORKFLOW' => array(0 => 'ROLE_REDACTOR', 1 => 'ROLE_TRANSLATOR', 2 => 'ROLE_TRANSLATOR', 3 => 'ROLE_QUALITY', 4 => 'ROLE_REVIEWER', 5 => 'ROLE_PUBLISHER'), 'ROLE_PRESS_MANAGER' => array(0 => 'ROLE_STAFF'), 'ROLE_MODERATOR' => array(0 => 'ROLE_STAFF'), 'ROLE_ASSOCIATION' => array(0 => 'ROLE_STAFF'), 'ROLE_OFFICE' => array(0 => 'ROLE_ASSOCIATION'), 'ROLE_SECRETARY' => array(0 => 'ROLE_OFFICE'), 'ROLE_TREASURER' => array(0 => 'ROLE_OFFICE'), 'ROLE_PRESIDENT' => array(0 => 'ROLE_OFFICE'), 'ROLE_ADMIN' => array(0 => 'ROLE_ADMIN_WORKFLOW', 1 => 'ROLE_MODERATOR', 2 => 'ROLE_OFFICE')));
    }

    /**
     * Gets the 'security.user_checker' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Core\User\UserChecker A Symfony\Component\Security\Core\User\UserChecker instance
     */
    protected function getSecurity_UserCheckerService()
    {
        return $this->services['security.user_checker'] = new \Symfony\Component\Security\Core\User\UserChecker();
    }

    /**
     * Gets the 'session.storage.metadata_bag' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\MetadataBag A Symfony\Component\HttpFoundation\Session\Storage\MetadataBag instance
     */
    protected function getSession_Storage_MetadataBagService()
    {
        return $this->services['session.storage.metadata_bag'] = new \Symfony\Component\HttpFoundation\Session\Storage\MetadataBag('_sf2_meta', '0');
    }

    /**
     * Gets the 'sonata.block.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Sonata\BlockBundle\Block\BlockServiceManager A Sonata\BlockBundle\Block\BlockServiceManager instance
     */
    protected function getSonata_Block_ManagerService()
    {
        $this->services['sonata.block.manager'] = $instance = new \Sonata\BlockBundle\Block\BlockServiceManager($this, true, $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE));

        $instance->add('sonata.block.service.rss', 'sonata.block.service.rss', array());
        $instance->add('app.block.blockquote', 'app.block.blockquote', array());
        $instance->add('app.block.single_image', 'app.block.single_image', array());
        $instance->add('sonata.block.service.container', 'sonata.block.service.container', array());
        $instance->add('sonata.block.service.empty', 'sonata.block.service.empty', array());
        $instance->add('sonata.block.service.text', 'sonata.block.service.text', array(0 => 'cms'));
        $instance->add('sonata.block.service.menu', 'sonata.block.service.menu', array());
        $instance->add('sonata.block.service.template', 'sonata.block.service.template', array());
        $instance->add('cmf.block.simple', 'cmf.block.simple', array());
        $instance->add('cmf.block.string', 'cmf.block.string', array());
        $instance->add('cmf.block.container', 'cmf.block.container', array());
        $instance->add('cmf.block.reference', 'cmf.block.reference', array());
        $instance->add('cmf.block.action', 'cmf.block.action', array());
        $instance->add('cmf.block.slideshow', 'cmf.block.slideshow', array());

        return $instance;
    }

    /**
     * Gets the 'swiftmailer.mailer.default.transport.eventdispatcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Swift_Events_SimpleEventDispatcher A Swift_Events_SimpleEventDispatcher instance
     */
    protected function getSwiftmailer_Mailer_Default_Transport_EventdispatcherService()
    {
        return $this->services['swiftmailer.mailer.default.transport.eventdispatcher'] = new \Swift_Events_SimpleEventDispatcher();
    }

    /**
     * Gets the 'sylius.expression_language' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\DependencyInjection\ExpressionLanguage A Symfony\Component\DependencyInjection\ExpressionLanguage instance
     */
    protected function getSylius_ExpressionLanguageService()
    {
        return $this->services['sylius.expression_language'] = new \Symfony\Component\DependencyInjection\ExpressionLanguage();
    }

    /**
     * Gets the 'sylius.resource_controller.event_dispatcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\EventDispatcher A Sylius\Bundle\ResourceBundle\Controller\EventDispatcher instance
     */
    protected function getSylius_ResourceController_EventDispatcherService()
    {
        return $this->services['sylius.resource_controller.event_dispatcher'] = new \Sylius\Bundle\ResourceBundle\Controller\EventDispatcher($this->get('debug.event_dispatcher'));
    }

    /**
     * Gets the 'sylius.resource_controller.flash_helper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\FlashHelper A Sylius\Bundle\ResourceBundle\Controller\FlashHelper instance
     */
    protected function getSylius_ResourceController_FlashHelperService()
    {
        return $this->services['sylius.resource_controller.flash_helper'] = new \Sylius\Bundle\ResourceBundle\Controller\FlashHelper($this->get('session'), $this->get('translator'), 'fr_FR');
    }

    /**
     * Gets the 'sylius.resource_controller.form_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ResourceFormFactory A Sylius\Bundle\ResourceBundle\Controller\ResourceFormFactory instance
     */
    protected function getSylius_ResourceController_FormFactoryService()
    {
        return $this->services['sylius.resource_controller.form_factory'] = new \Sylius\Bundle\ResourceBundle\Controller\ResourceFormFactory($this->get('form.factory'));
    }

    /**
     * Gets the 'sylius.resource_controller.new_resource_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\NewResourceFactory A Sylius\Bundle\ResourceBundle\Controller\NewResourceFactory instance
     */
    protected function getSylius_ResourceController_NewResourceFactoryService()
    {
        return $this->services['sylius.resource_controller.new_resource_factory'] = new \Sylius\Bundle\ResourceBundle\Controller\NewResourceFactory();
    }

    /**
     * Gets the 'sylius.resource_controller.parameters_parser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ParametersParser A Sylius\Bundle\ResourceBundle\Controller\ParametersParser instance
     */
    protected function getSylius_ResourceController_ParametersParserService()
    {
        return $this->services['sylius.resource_controller.parameters_parser'] = new \Sylius\Bundle\ResourceBundle\Controller\ParametersParser($this, ${($_ = isset($this->services['sylius.expression_language']) ? $this->services['sylius.expression_language'] : $this->getSylius_ExpressionLanguageService()) && false ?: '_'});
    }

    /**
     * Gets the 'sylius.resource_controller.redirect_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\RedirectHandler A Sylius\Bundle\ResourceBundle\Controller\RedirectHandler instance
     */
    protected function getSylius_ResourceController_RedirectHandlerService()
    {
        return $this->services['sylius.resource_controller.redirect_handler'] = new \Sylius\Bundle\ResourceBundle\Controller\RedirectHandler($this->get('cmf_routing.router'));
    }

    /**
     * Gets the 'sylius.resource_controller.request_configuration_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\RequestConfigurationFactory A Sylius\Bundle\ResourceBundle\Controller\RequestConfigurationFactory instance
     */
    protected function getSylius_ResourceController_RequestConfigurationFactoryService()
    {
        return $this->services['sylius.resource_controller.request_configuration_factory'] = new \Sylius\Bundle\ResourceBundle\Controller\RequestConfigurationFactory(${($_ = isset($this->services['sylius.resource_controller.parameters_parser']) ? $this->services['sylius.resource_controller.parameters_parser'] : $this->getSylius_ResourceController_ParametersParserService()) && false ?: '_'}, 'Sylius\\Bundle\\ResourceBundle\\Controller\\RequestConfiguration', array('paginate' => NULL, 'limit' => NULL, 'allowed_paginate' => array(0 => 10, 1 => 20, 2 => 30), 'default_page_size' => 10, 'sortable' => false, 'sorting' => NULL, 'filterable' => false, 'criteria' => NULL));
    }

    /**
     * Gets the 'sylius.resource_controller.resources_collection_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \AppBundle\Controller\ResourcesCollectionProvider A AppBundle\Controller\ResourcesCollectionProvider instance
     */
    protected function getSylius_ResourceController_ResourcesCollectionProviderService()
    {
        return $this->services['sylius.resource_controller.resources_collection_provider'] = new \AppBundle\Controller\ResourcesCollectionProvider($this->get('sylius.resource_controller.resources_resolver.grid_aware'), new \Hateoas\Representation\Factory\PagerfantaFactory());
    }

    /**
     * Gets the 'sylius.resource_controller.single_resource_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\SingleResourceProvider A Sylius\Bundle\ResourceBundle\Controller\SingleResourceProvider instance
     */
    protected function getSylius_ResourceController_SingleResourceProviderService()
    {
        return $this->services['sylius.resource_controller.single_resource_provider'] = new \Sylius\Bundle\ResourceBundle\Controller\SingleResourceProvider();
    }

    /**
     * Gets the 'sylius.resource_controller.state_machine' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\StateMachine A Sylius\Bundle\ResourceBundle\Controller\StateMachine instance
     */
    protected function getSylius_ResourceController_StateMachineService()
    {
        return $this->services['sylius.resource_controller.state_machine'] = new \Sylius\Bundle\ResourceBundle\Controller\StateMachine($this->get('sm.factory'));
    }

    /**
     * Gets the 'sylius.resource_controller.view_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ViewHandler A Sylius\Bundle\ResourceBundle\Controller\ViewHandler instance
     */
    protected function getSylius_ResourceController_ViewHandlerService()
    {
        return $this->services['sylius.resource_controller.view_handler'] = new \Sylius\Bundle\ResourceBundle\Controller\ViewHandler($this->get('fos_rest.view_handler'));
    }

    /**
     * Gets the 'sylius.resource_registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Sylius\Component\Resource\Metadata\Registry A Sylius\Component\Resource\Metadata\Registry instance
     */
    protected function getSylius_ResourceRegistryService()
    {
        $this->services['sylius.resource_registry'] = $instance = new \Sylius\Component\Resource\Metadata\Registry();

        $instance->addFromAliasAndConfiguration('sylius.locale', array('driver' => 'doctrine/orm', 'classes' => array('model' => 'Sylius\\Component\\Locale\\Model\\Locale', 'interface' => 'Sylius\\Component\\Locale\\Model\\LocaleInterface', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory', 'form' => 'Sylius\\Bundle\\LocaleBundle\\Form\\Type\\LocaleType')));
        $instance->addFromAliasAndConfiguration('sylius.product', array('driver' => 'doctrine/orm', 'classes' => array('model' => 'AppBundle\\Entity\\Product', 'factory' => 'AppBundle\\Factory\\ProductFactory', 'repository' => 'AppBundle\\Repository\\ProductRepository', 'controller' => 'AppBundle\\Controller\\ProductController', 'form' => 'AppBundle\\Form\\Type\\ProductType', 'interface' => 'Sylius\\Component\\Product\\Model\\ProductInterface'), 'translation' => array('classes' => array('model' => 'AppBundle\\Entity\\ProductTranslation', 'interface' => 'Sylius\\Component\\Product\\Model\\ProductTranslationInterface', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory', 'form' => 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductTranslationType'))));
        $instance->addFromAliasAndConfiguration('sylius.product_translation', array('driver' => 'doctrine/orm', 'classes' => array('model' => 'AppBundle\\Entity\\ProductTranslation', 'interface' => 'Sylius\\Component\\Product\\Model\\ProductTranslationInterface', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory', 'form' => 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductTranslationType')));
        $instance->addFromAliasAndConfiguration('sylius.product_variant', array('driver' => 'doctrine/orm', 'classes' => array('model' => 'AppBundle\\Entity\\ProductVariant', 'factory' => 'Sylius\\Component\\Product\\Factory\\ProductVariantFactory', 'repository' => 'AppBundle\\Repository\\ProductVariantRepository', 'controller' => 'AppBundle\\Controller\\ProductVariantController', 'form' => 'AppBundle\\Form\\Type\\ProductVariantType', 'interface' => 'Sylius\\Component\\Product\\Model\\ProductVariantInterface')));
        $instance->addFromAliasAndConfiguration('sylius.product_option', array('driver' => 'doctrine/orm', 'classes' => array('model' => 'Sylius\\Component\\Product\\Model\\ProductOption', 'interface' => 'Sylius\\Component\\Product\\Model\\ProductOptionInterface', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\TranslatableFactory', 'form' => 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductOptionType'), 'translation' => array('classes' => array('model' => 'Sylius\\Component\\Product\\Model\\ProductOptionTranslation', 'interface' => 'Sylius\\Component\\Product\\Model\\ProductOptionTranslationInterface', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory', 'form' => 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductOptionTranslationType'))));
        $instance->addFromAliasAndConfiguration('sylius.product_option_translation', array('driver' => 'doctrine/orm', 'classes' => array('model' => 'Sylius\\Component\\Product\\Model\\ProductOptionTranslation', 'interface' => 'Sylius\\Component\\Product\\Model\\ProductOptionTranslationInterface', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory', 'form' => 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductOptionTranslationType')));
        $instance->addFromAliasAndConfiguration('sylius.product_option_value', array('driver' => 'doctrine/orm', 'classes' => array('model' => 'Sylius\\Component\\Product\\Model\\ProductOptionValue', 'interface' => 'Sylius\\Component\\Product\\Model\\ProductOptionValueInterface', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\TranslatableFactory', 'form' => 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductOptionValueType'), 'translation' => array('classes' => array('model' => 'Sylius\\Component\\Product\\Model\\ProductOptionValueTranslation', 'interface' => 'Sylius\\Component\\Product\\Model\\ProductOptionValueTranslationInterface', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory', 'form' => 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductOptionValueTranslationType'))));
        $instance->addFromAliasAndConfiguration('sylius.product_option_value_translation', array('driver' => 'doctrine/orm', 'classes' => array('model' => 'Sylius\\Component\\Product\\Model\\ProductOptionValueTranslation', 'interface' => 'Sylius\\Component\\Product\\Model\\ProductOptionValueTranslationInterface', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory', 'form' => 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductOptionValueTranslationType')));
        $instance->addFromAliasAndConfiguration('sylius.product_association', array('driver' => 'doctrine/orm', 'classes' => array('model' => 'Sylius\\Component\\Product\\Model\\ProductAssociation', 'interface' => 'Sylius\\Component\\Product\\Model\\ProductAssociationInterface', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory', 'form' => 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductAssociationType')));
        $instance->addFromAliasAndConfiguration('sylius.product_association_type', array('driver' => 'doctrine/orm', 'classes' => array('model' => 'Sylius\\Component\\Product\\Model\\ProductAssociationType', 'interface' => 'Sylius\\Component\\Product\\Model\\ProductAssociationTypeInterface', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory', 'form' => 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductAssociationTypeType')));
        $instance->addFromAliasAndConfiguration('sylius.shop_user', array('driver' => 'doctrine/orm', 'classes' => array('model' => 'AppBundle\\Entity\\User', 'repository' => 'AppBundle\\Repository\\UserRepository', 'controller' => 'AppBundle\\Controller\\UserController', 'interface' => 'Sylius\\Component\\User\\Model\\UserInterface', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory'), 'templates' => 'SyliusUserBundle:User', 'resetting' => array('token' => array('ttl' => 'P1D', 'length' => 16, 'field_name' => 'passwordResetToken'), 'pin' => array('length' => 4, 'field_name' => 'passwordResetToken')), 'verification' => array('token' => array('length' => 16, 'field_name' => 'emailVerificationToken'))));
        $instance->addFromAliasAndConfiguration('sylius.admin_oauth_user', array('driver' => 'doctrine/orm', 'classes' => array('model' => 'Sylius\\Component\\User\\Model\\UserOAuth', 'interface' => 'Sylius\\Component\\User\\Model\\UserOAuthInterface', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory'), 'templates' => 'SyliusUserBundle:User', 'resetting' => array('token' => array('ttl' => 'P1D', 'length' => 16, 'field_name' => 'passwordResetToken'), 'pin' => array('length' => 4, 'field_name' => 'passwordResetToken')), 'verification' => array('token' => array('length' => 16, 'field_name' => 'emailVerificationToken'))));
        $instance->addFromAliasAndConfiguration('sylius.customer', array('driver' => 'doctrine/orm', 'classes' => array('model' => 'AppBundle\\Entity\\Customer', 'repository' => 'AppBundle\\Repository\\CustomerRepository', 'form' => 'AppBundle\\Form\\Type\\Customer\\CustomerType', 'interface' => 'Sylius\\Component\\Customer\\Model\\CustomerInterface', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory')));
        $instance->addFromAliasAndConfiguration('sylius.customer_group', array('driver' => 'doctrine/orm', 'classes' => array('model' => 'Sylius\\Component\\Customer\\Model\\CustomerGroup', 'interface' => 'Sylius\\Component\\Customer\\Model\\CustomerGroupInterface', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory', 'form' => 'Sylius\\Bundle\\CustomerBundle\\Form\\Type\\CustomerGroupType')));
        $instance->addFromAliasAndConfiguration('sylius.product_reviewer', array('driver' => 'doctrine/orm', 'classes' => array('model' => 'AppBundle\\Entity\\Customer', 'interface' => 'Sylius\\Component\\Review\\Model\\ReviewerInterface', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory')));
        $instance->addFromAliasAndConfiguration('sylius.product_review', array('driver' => 'doctrine/orm', 'classes' => array('model' => 'AppBundle\\Entity\\ProductReview', 'repository' => 'AppBundle\\Repository\\ProductReviewRepository', 'controller' => 'AppBundle\\Controller\\ProductReviewController', 'form' => 'AppBundle\\Form\\Type\\ProductReviewType', 'interface' => 'Sylius\\Component\\Review\\Model\\ReviewInterface', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory')));
        $instance->addFromAliasAndConfiguration('app.article', array('classes' => array('model' => 'AppBundle\\Entity\\Article', 'factory' => 'AppBundle\\Factory\\ArticleFactory', 'repository' => 'AppBundle\\Repository\\ArticleRepository', 'controller' => 'AppBundle\\Controller\\ArticleController', 'form' => 'AppBundle\\Form\\Type\\ArticleType'), 'driver' => 'doctrine/orm'));
        $instance->addFromAliasAndConfiguration('app.article_image', array('classes' => array('model' => 'AppBundle\\Entity\\ArticleImage', 'form' => 'AppBundle\\Form\\Type\\ArticleImageType', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory'), 'driver' => 'doctrine/orm'));
        $instance->addFromAliasAndConfiguration('app.article_review', array('classes' => array('model' => 'AppBundle\\Entity\\ArticleReview', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory'), 'driver' => 'doctrine/orm'));
        $instance->addFromAliasAndConfiguration('app.article_content', array('driver' => 'doctrine/phpcr-odm', 'classes' => array('model' => 'AppBundle\\Document\\ArticleContent', 'factory' => 'AppBundle\\Factory\\ArticleContentFactory', 'repository' => 'Sylius\\Bundle\\ResourceBundle\\Doctrine\\ODM\\PHPCR\\DocumentRepository', 'form' => 'AppBundle\\Form\\Type\\ArticleContentType', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController')));
        $instance->addFromAliasAndConfiguration('app.avatar', array('classes' => array('model' => 'AppBundle\\Entity\\Avatar', 'form' => 'AppBundle\\Form\\Type\\AvatarType', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory'), 'driver' => 'doctrine/orm'));
        $instance->addFromAliasAndConfiguration('app.block', array('classes' => array('model' => 'AppBundle\\Entity\\Block', 'form' => 'AppBundle\\Form\\Type\\BlockType', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory'), 'driver' => 'doctrine/orm'));
        $instance->addFromAliasAndConfiguration('app.block_image', array('classes' => array('model' => 'AppBundle\\Entity\\BlockImage', 'form' => 'AppBundle\\Form\\Type\\BlockImageType', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory'), 'driver' => 'doctrine/orm'));
        $instance->addFromAliasAndConfiguration('app.blockquote_block', array('driver' => 'doctrine/phpcr-odm', 'classes' => array('model' => 'AppBundle\\Document\\BlockquoteBlock', 'factory' => 'AppBundle\\Factory\\BlockquoteFactory', 'repository' => 'Sylius\\Bundle\\ResourceBundle\\Doctrine\\ODM\\PHPCR\\DocumentRepository', 'form' => 'AppBundle\\Form\\Type\\BlockquoteBlockType', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController')));
        $instance->addFromAliasAndConfiguration('app.contact_request', array('classes' => array('model' => 'AppBundle\\Entity\\ContactRequest', 'factory' => 'AppBundle\\Factory\\ContactRequestFactory', 'repository' => 'AppBundle\\Repository\\ContactRequestRepository', 'form' => 'AppBundle\\Form\\Type\\ContactRequestType', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController'), 'driver' => 'doctrine/orm'));
        $instance->addFromAliasAndConfiguration('app.dealer', array('classes' => array('model' => 'AppBundle\\Entity\\Dealer', 'repository' => 'AppBundle\\Repository\\DealerRepository', 'form' => 'AppBundle\\Form\\Type\\DealerType', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory'), 'driver' => 'doctrine/orm'));
        $instance->addFromAliasAndConfiguration('app.dealer_image', array('classes' => array('model' => 'AppBundle\\Entity\\DealerImage', 'form' => 'AppBundle\\Form\\Type\\DealerImageType', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory'), 'driver' => 'doctrine/orm'));
        $instance->addFromAliasAndConfiguration('app.dealer_price', array('classes' => array('model' => 'AppBundle\\Entity\\DealerPrice', 'repository' => 'AppBundle\\Repository\\DealerPriceRepository', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory'), 'driver' => 'doctrine/orm'));
        $instance->addFromAliasAndConfiguration('app.left_image_block', array('driver' => 'doctrine/phpcr-odm', 'classes' => array('model' => 'AppBundle\\Document\\LeftImageBlock', 'factory' => 'AppBundle\\Factory\\SingleImageBlockFactory', 'repository' => 'Sylius\\Bundle\\ResourceBundle\\Doctrine\\ODM\\PHPCR\\DocumentRepository', 'form' => 'AppBundle\\Form\\Type\\SingleImageBlock\\LeftImageBlockType', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController')));
        $instance->addFromAliasAndConfiguration('app.not_found_page', array('classes' => array('model' => 'AppBundle\\Entity\\NotFound', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory'), 'driver' => 'doctrine/orm'));
        $instance->addFromAliasAndConfiguration('app.person', array('classes' => array('model' => 'AppBundle\\Entity\\Person', 'repository' => 'AppBundle\\Repository\\PersonRepository', 'controller' => 'AppBundle\\Controller\\PersonController', 'form' => 'AppBundle\\Form\\Type\\PersonType', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory'), 'driver' => 'doctrine/orm'));
        $instance->addFromAliasAndConfiguration('app.person_image', array('classes' => array('model' => 'AppBundle\\Entity\\PersonImage', 'form' => 'AppBundle\\Form\\Type\\PersonImageType', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory'), 'driver' => 'doctrine/orm'));
        $instance->addFromAliasAndConfiguration('app.product_barcode', array('classes' => array('model' => 'AppBundle\\Entity\\ProductBarcode', 'form' => 'AppBundle\\Form\\Type\\ProductBarcodeType', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory'), 'driver' => 'doctrine/orm'));
        $instance->addFromAliasAndConfiguration('app.product_list', array('classes' => array('model' => 'AppBundle\\Entity\\ProductList', 'factory' => 'AppBundle\\Factory\\ProductListFactory', 'repository' => 'AppBundle\\Repository\\ProductListRepository', 'controller' => 'AppBundle\\Controller\\ProductListController', 'form' => 'AppBundle\\Form\\Type\\ProductListType'), 'driver' => 'doctrine/orm'));
        $instance->addFromAliasAndConfiguration('app.product_list_item', array('classes' => array('model' => 'AppBundle\\Entity\\ProductListItem', 'repository' => 'AppBundle\\Repository\\ProductListItemRepository', 'controller' => 'AppBundle\\Controller\\ProductListItemController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory'), 'driver' => 'doctrine/orm'));
        $instance->addFromAliasAndConfiguration('app.pub_banner', array('classes' => array('model' => 'AppBundle\\Entity\\PubBanner', 'form' => 'AppBundle\\Form\\Type\\PubBannerType', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory'), 'driver' => 'doctrine/orm'));
        $instance->addFromAliasAndConfiguration('app.redirection', array('classes' => array('model' => 'AppBundle\\Entity\\Redirection', 'form' => 'AppBundle\\Form\\Type\\RedirectionType', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory'), 'driver' => 'doctrine/orm'));
        $instance->addFromAliasAndConfiguration('app.right_image_block', array('driver' => 'doctrine/phpcr-odm', 'classes' => array('model' => 'AppBundle\\Document\\RightImageBlock', 'factory' => 'AppBundle\\Factory\\SingleImageBlockFactory', 'repository' => 'Sylius\\Bundle\\ResourceBundle\\Doctrine\\ODM\\PHPCR\\DocumentRepository', 'form' => 'AppBundle\\Form\\Type\\SingleImageBlock\\RightImageBlockType', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController')));
        $instance->addFromAliasAndConfiguration('app.single_image_block', array('driver' => 'doctrine/phpcr-odm', 'classes' => array('model' => 'AppBundle\\Document\\SingleImageBlock', 'factory' => 'AppBundle\\Factory\\SingleImageBlockFactory', 'repository' => 'Sylius\\Bundle\\ResourceBundle\\Doctrine\\ODM\\PHPCR\\DocumentRepository', 'form' => 'AppBundle\\Form\\Type\\SingleImageBlockType', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController')));
        $instance->addFromAliasAndConfiguration('app.slide_show_block', array('classes' => array('model' => 'AppBundle\\Entity\\SlideShowBlock', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory'), 'driver' => 'doctrine/orm'));
        $instance->addFromAliasAndConfiguration('app.string_block', array('driver' => 'doctrine/phpcr-odm', 'classes' => array('model' => 'AppBundle\\Document\\StringBlock', 'factory' => 'AppBundle\\Factory\\StringBlockFactory', 'repository' => 'AppBundle\\Repository\\StringBlockRepository', 'form' => 'AppBundle\\Form\\Type\\StringBlockType', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController')));
        $instance->addFromAliasAndConfiguration('app.top_image_block', array('driver' => 'doctrine/phpcr-odm', 'classes' => array('model' => 'AppBundle\\Document\\TopImageBlock', 'factory' => 'AppBundle\\Factory\\SingleImageBlockFactory', 'repository' => 'Sylius\\Bundle\\ResourceBundle\\Doctrine\\ODM\\PHPCR\\DocumentRepository', 'form' => 'AppBundle\\Form\\Type\\SingleImageBlock\\TopImageBlockType', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController')));
        $instance->addFromAliasAndConfiguration('app.game_play', array('classes' => array('model' => 'AppBundle\\Entity\\GamePlay', 'factory' => 'AppBundle\\Factory\\GamePlayFactory', 'repository' => 'AppBundle\\Repository\\GamePlayRepository', 'form' => 'AppBundle\\Form\\Type\\GamePlayType', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController'), 'driver' => 'doctrine/orm'));
        $instance->addFromAliasAndConfiguration('app.game_play_image', array('classes' => array('model' => 'AppBundle\\Entity\\GamePlayImage', 'form' => 'AppBundle\\Form\\Type\\GamePlayImageType', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory'), 'driver' => 'doctrine/orm'));
        $instance->addFromAliasAndConfiguration('app.player', array('classes' => array('model' => 'AppBundle\\Entity\\Player', 'form' => 'AppBundle\\Form\\Type\\PlayerType', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory'), 'driver' => 'doctrine/orm'));
        $instance->addFromAliasAndConfiguration('app.price_list', array('classes' => array('model' => 'AppBundle\\Entity\\PriceList', 'form' => 'AppBundle\\Form\\Type\\PriceListType', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory'), 'driver' => 'doctrine/orm'));
        $instance->addFromAliasAndConfiguration('app.notification', array('classes' => array('model' => 'AppBundle\\Entity\\Notification', 'factory' => 'AppBundle\\Factory\\NotificationFactory', 'controller' => 'AppBundle\\Controller\\NotificationController'), 'driver' => 'doctrine/orm'));
        $instance->addFromAliasAndConfiguration('app.topic', array('classes' => array('model' => 'AppBundle\\Entity\\Topic', 'factory' => 'AppBundle\\Factory\\TopicFactory', 'controller' => 'AppBundle\\Controller\\TopicController', 'repository' => 'AppBundle\\Repository\\TopicRepository', 'form' => 'AppBundle\\Form\\Type\\TopicType'), 'driver' => 'doctrine/orm'));
        $instance->addFromAliasAndConfiguration('app.post', array('classes' => array('model' => 'AppBundle\\Entity\\Post', 'factory' => 'AppBundle\\Factory\\PostFactory', 'repository' => 'AppBundle\\Repository\\PostRepository', 'controller' => 'AppBundle\\Controller\\PostController', 'form' => 'AppBundle\\Form\\Type\\PostType'), 'driver' => 'doctrine/orm'));
        $instance->addFromAliasAndConfiguration('app.product_variant_image', array('classes' => array('model' => 'AppBundle\\Entity\\ProductVariantImage', 'form' => 'AppBundle\\Form\\Type\\ProductVariantImageType', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory'), 'driver' => 'doctrine/orm'));
        $instance->addFromAliasAndConfiguration('app.well_image_block', array('driver' => 'doctrine/phpcr-odm', 'classes' => array('model' => 'AppBundle\\Document\\WellImageBlock', 'factory' => 'AppBundle\\Factory\\SingleImageBlockFactory', 'repository' => 'Sylius\\Bundle\\ResourceBundle\\Doctrine\\ODM\\PHPCR\\DocumentRepository', 'form' => 'AppBundle\\Form\\Type\\SingleImageBlock\\WellImageBlockType', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController')));
        $instance->addFromAliasAndConfiguration('sylius.product_attribute', array('driver' => 'doctrine/orm', 'classes' => array('model' => 'Sylius\\Component\\Product\\Model\\ProductAttribute', 'interface' => 'Sylius\\Component\\Product\\Model\\ProductAttributeInterface', 'controller' => 'Sylius\\Bundle\\ProductBundle\\Controller\\ProductAttributeController', 'form' => 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductAttributeType', 'factory' => 'Sylius\\Component\\Resource\\Factory\\TranslatableFactory'), 'translation' => array('classes' => array('model' => 'Sylius\\Component\\Product\\Model\\ProductAttributeTranslation', 'interface' => 'Sylius\\Component\\Product\\Model\\ProductAttributeTranslationInterface', 'form' => 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductAttributeTranslationType', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory'))));
        $instance->addFromAliasAndConfiguration('sylius.product_attribute_translation', array('driver' => 'doctrine/orm', 'classes' => array('model' => 'Sylius\\Component\\Product\\Model\\ProductAttributeTranslation', 'interface' => 'Sylius\\Component\\Product\\Model\\ProductAttributeTranslationInterface', 'form' => 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductAttributeTranslationType', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory')));
        $instance->addFromAliasAndConfiguration('sylius.product_attribute_value', array('driver' => 'doctrine/orm', 'classes' => array('model' => 'Sylius\\Component\\Product\\Model\\ProductAttributeValue', 'interface' => 'Sylius\\Component\\Product\\Model\\ProductAttributeValueInterface', 'form' => 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductAttributeValueType', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory')));
        $instance->addFromAliasAndConfiguration('sylius.taxon', array('driver' => 'doctrine/orm', 'classes' => array('model' => 'AppBundle\\Entity\\Taxon', 'repository' => 'AppBundle\\Repository\\TaxonRepository', 'controller' => 'AppBundle\\Controller\\TaxonController', 'form' => 'AppBundle\\Form\\Type\\TaxonType', 'interface' => 'Sylius\\Component\\Taxonomy\\Model\\TaxonInterface', 'factory' => 'Sylius\\Component\\Resource\\Factory\\TranslatableFactory'), 'translation' => array('classes' => array('model' => 'AppBundle\\Entity\\TaxonTranslation', 'interface' => 'Sylius\\Component\\Taxonomy\\Model\\TaxonTranslationInterface', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory', 'form' => 'Sylius\\Bundle\\TaxonomyBundle\\Form\\Type\\TaxonTranslationType'))));
        $instance->addFromAliasAndConfiguration('sylius.taxon_translation', array('driver' => 'doctrine/orm', 'classes' => array('model' => 'AppBundle\\Entity\\TaxonTranslation', 'interface' => 'Sylius\\Component\\Taxonomy\\Model\\TaxonTranslationInterface', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory', 'form' => 'Sylius\\Bundle\\TaxonomyBundle\\Form\\Type\\TaxonTranslationType')));

        return $instance;
    }

    /**
     * Gets the 'templating.locator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Loader\TemplateLocator A Symfony\Bundle\FrameworkBundle\Templating\Loader\TemplateLocator instance
     */
    protected function getTemplating_LocatorService()
    {
        return $this->services['templating.locator'] = new \Symfony\Bundle\FrameworkBundle\Templating\Loader\TemplateLocator($this->get('file_locator'), __DIR__);
    }

    /**
     * Gets the 'web_profiler.csp.handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\Csp\ContentSecurityPolicyHandler A Symfony\Bundle\WebProfilerBundle\Csp\ContentSecurityPolicyHandler instance
     */
    protected function getWebProfiler_Csp_HandlerService()
    {
        return $this->services['web_profiler.csp.handler'] = new \Symfony\Bundle\WebProfilerBundle\Csp\ContentSecurityPolicyHandler(new \Symfony\Bundle\WebProfilerBundle\Csp\NonceGenerator());
    }

    /**
     * {@inheritdoc}
     */
    public function getParameter($name)
    {
        $name = strtolower($name);

        if (!(isset($this->parameters[$name]) || array_key_exists($name, $this->parameters) || isset($this->loadedDynamicParameters[$name]))) {
            throw new InvalidArgumentException(sprintf('The parameter "%s" must be defined.', $name));
        }
        if (isset($this->loadedDynamicParameters[$name])) {
            return $this->loadedDynamicParameters[$name] ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
        }

        return $this->parameters[$name];
    }

    /**
     * {@inheritdoc}
     */
    public function hasParameter($name)
    {
        $name = strtolower($name);

        return isset($this->parameters[$name]) || array_key_exists($name, $this->parameters) || isset($this->loadedDynamicParameters[$name]);
    }

    /**
     * {@inheritdoc}
     */
    public function setParameter($name, $value)
    {
        throw new LogicException('Impossible to call set() on a frozen ParameterBag.');
    }

    /**
     * {@inheritdoc}
     */
    public function getParameterBag()
    {
        if (null === $this->parameterBag) {
            $parameters = $this->parameters;
            foreach ($this->loadedDynamicParameters as $name => $loaded) {
                $parameters[$name] = $loaded ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
            }
            $this->parameterBag = new FrozenParameterBag($parameters);
        }

        return $this->parameterBag;
    }

    private $loadedDynamicParameters = array(
        'kernel.root_dir' => false,
        'kernel.logs_dir' => false,
        'kernel.bundles_metadata' => false,
        'google.analytics.private_key_file' => false,
        'assetic.read_from' => false,
        'assetic.write_to' => false,
        'doctrine_migrations.dir_name' => false,
    );
    private $dynamicParameters = array();

    /**
     * Computes a dynamic parameter.
     *
     * @param string The name of the dynamic parameter to load
     *
     * @return mixed The value of the dynamic parameter
     *
     * @throws InvalidArgumentException When the dynamic parameter does not exist
     */
    private function getDynamicParameter($name)
    {
        switch ($name) {
            case 'kernel.root_dir': $value = ($this->targetDirs[3].'/app'); break;
            case 'kernel.logs_dir': $value = ($this->targetDirs[2].'/logs'); break;
            case 'kernel.bundles_metadata': $value = array(
                'FrameworkBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle'),
                    'namespace' => 'Symfony\\Bundle\\FrameworkBundle',
                ),
                'SecurityBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/SecurityBundle'),
                    'namespace' => 'Symfony\\Bundle\\SecurityBundle',
                ),
                'TwigBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/TwigBundle'),
                    'namespace' => 'Symfony\\Bundle\\TwigBundle',
                ),
                'MonologBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/symfony/monolog-bundle'),
                    'namespace' => 'Symfony\\Bundle\\MonologBundle',
                ),
                'SwiftmailerBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/symfony/swiftmailer-bundle'),
                    'namespace' => 'Symfony\\Bundle\\SwiftmailerBundle',
                ),
                'AsseticBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/symfony/assetic-bundle'),
                    'namespace' => 'Symfony\\Bundle\\AsseticBundle',
                ),
                'SensioFrameworkExtraBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/sensio/framework-extra-bundle'),
                    'namespace' => 'Sensio\\Bundle\\FrameworkExtraBundle',
                ),
                'JMSSerializerBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/jms/serializer-bundle/JMS/SerializerBundle'),
                    'namespace' => 'JMS\\SerializerBundle',
                ),
                'JMSTranslationBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/jms/translation-bundle/JMS/TranslationBundle'),
                    'namespace' => 'JMS\\TranslationBundle',
                ),
                'StofDoctrineExtensionsBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/stof/doctrine-extensions-bundle'),
                    'namespace' => 'Stof\\DoctrineExtensionsBundle',
                ),
                'WhiteOctoberPagerfantaBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle'),
                    'namespace' => 'WhiteOctober\\PagerfantaBundle',
                ),
                'BazingaHateoasBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/willdurand/hateoas-bundle/Bazinga/Bundle/HateoasBundle'),
                    'namespace' => 'Bazinga\\Bundle\\HateoasBundle',
                ),
                'SyliusLocaleBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/sylius/locale-bundle'),
                    'namespace' => 'Sylius\\Bundle\\LocaleBundle',
                ),
                'SyliusProductBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/sylius/product-bundle'),
                    'namespace' => 'Sylius\\Bundle\\ProductBundle',
                ),
                'SyliusUiBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/sylius/ui-bundle'),
                    'namespace' => 'Sylius\\Bundle\\UiBundle',
                ),
                'SyliusUserBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/sylius/user-bundle'),
                    'namespace' => 'Sylius\\Bundle\\UserBundle',
                ),
                'SyliusCustomerBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/sylius/customer-bundle'),
                    'namespace' => 'Sylius\\Bundle\\CustomerBundle',
                ),
                'SyliusMailerBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/sylius/mailer-bundle'),
                    'namespace' => 'Sylius\\Bundle\\MailerBundle',
                ),
                'SyliusReviewBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/sylius/review-bundle'),
                    'namespace' => 'Sylius\\Bundle\\ReviewBundle',
                ),
                'SyliusResourceBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/sylius/resource-bundle'),
                    'namespace' => 'Sylius\\Bundle\\ResourceBundle',
                ),
                'SyliusAttributeBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/sylius/attribute-bundle'),
                    'namespace' => 'Sylius\\Bundle\\AttributeBundle',
                ),
                'SyliusTaxonomyBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/sylius/taxonomy-bundle'),
                    'namespace' => 'Sylius\\Bundle\\TaxonomyBundle',
                ),
                'winzouStateMachineBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/winzou/state-machine-bundle'),
                    'namespace' => 'winzou\\Bundle\\StateMachineBundle',
                ),
                'SonataBlockBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/sonata-project/block-bundle'),
                    'namespace' => 'Sonata\\BlockBundle',
                ),
                'CmfCoreBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/symfony-cmf/core-bundle/src'),
                    'namespace' => 'Symfony\\Cmf\\Bundle\\CoreBundle',
                ),
                'CmfBlockBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/symfony-cmf/block-bundle/src'),
                    'namespace' => 'Symfony\\Cmf\\Bundle\\BlockBundle',
                ),
                'CmfMediaBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/symfony-cmf/media-bundle'),
                    'namespace' => 'Symfony\\Cmf\\Bundle\\MediaBundle',
                ),
                'CmfRoutingBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/symfony-cmf/routing-bundle/src'),
                    'namespace' => 'Symfony\\Cmf\\Bundle\\RoutingBundle',
                ),
                'SyliusGridBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/sylius/grid-bundle'),
                    'namespace' => 'Sylius\\Bundle\\GridBundle',
                ),
                'FOSRestBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/friendsofsymfony/rest-bundle/FOS/RestBundle'),
                    'namespace' => 'FOS\\RestBundle',
                ),
                'FOSJsRoutingBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/friendsofsymfony/jsrouting-bundle'),
                    'namespace' => 'FOS\\JsRoutingBundle',
                ),
                'FOSElasticaBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/friendsofsymfony/elastica-bundle'),
                    'namespace' => 'FOS\\ElasticaBundle',
                ),
                'DoctrinePHPCRBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/doctrine/phpcr-bundle'),
                    'namespace' => 'Doctrine\\Bundle\\PHPCRBundle',
                ),
                'DoctrineCacheBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/doctrine/doctrine-cache-bundle'),
                    'namespace' => 'Doctrine\\Bundle\\DoctrineCacheBundle',
                ),
                'DoctrineBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/doctrine/doctrine-bundle'),
                    'namespace' => 'Doctrine\\Bundle\\DoctrineBundle',
                ),
                'DoctrineMigrationsBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/doctrine/doctrine-migrations-bundle'),
                    'namespace' => 'Doctrine\\Bundle\\MigrationsBundle',
                ),
                'InfiniteFormBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/infinite-networks/form-bundle'),
                    'namespace' => 'Infinite\\FormBundle',
                ),
                'KnpMenuBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/knplabs/knp-menu-bundle'),
                    'namespace' => 'Knp\\Bundle\\MenuBundle',
                ),
                'MopaBootstrapBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/mopa/bootstrap-bundle/Mopa/Bundle/BootstrapBundle'),
                    'namespace' => 'Mopa\\Bundle\\BootstrapBundle',
                ),
                'LiipImagineBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/liip/imagine-bundle'),
                    'namespace' => 'Liip\\ImagineBundle',
                ),
                'IvoryCKEditorBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/egeloen/ckeditor-bundle'),
                    'namespace' => 'Ivory\\CKEditorBundle',
                ),
                'DoctrineBehaviorsBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/knplabs/doctrine-behaviors/src/Bundle'),
                    'namespace' => 'Knp\\DoctrineBehaviors\\Bundle',
                ),
                'ZenstruckRedirectBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/zenstruck/redirect-bundle/src'),
                    'namespace' => 'Zenstruck\\RedirectBundle',
                ),
                'BmatznerJQueryUIBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/bmatzner/jquery-ui-bundle/Bmatzner/JQueryUIBundle'),
                    'namespace' => 'Bmatzner\\JQueryUIBundle',
                ),
                'BmatznerJQueryBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/bmatzner/jquery-bundle/Bmatzner/JQueryBundle'),
                    'namespace' => 'Bmatzner\\JQueryBundle',
                ),
                'BmatznerFontAwesomeBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/bmatzner/fontawesome-bundle/Bmatzner/FontAwesomeBundle'),
                    'namespace' => 'Bmatzner\\FontAwesomeBundle',
                ),
                'AppBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/src/AppBundle'),
                    'namespace' => 'AppBundle',
                ),
                'DebugBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/DebugBundle'),
                    'namespace' => 'Symfony\\Bundle\\DebugBundle',
                ),
                'WebProfilerBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/WebProfilerBundle'),
                    'namespace' => 'Symfony\\Bundle\\WebProfilerBundle',
                ),
                'SensioDistributionBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'/vendor/sensio/distribution-bundle'),
                    'namespace' => 'Sensio\\Bundle\\DistributionBundle',
                ),
            ); break;
            case 'google.analytics.private_key_file': $value = ($this->targetDirs[3].'/app/Resources/credentials/client_secret.json'); break;
            case 'assetic.read_from': $value = ($this->targetDirs[3].'/app/../web'); break;
            case 'assetic.write_to': $value = ($this->targetDirs[3].'/app/../web'); break;
            case 'doctrine_migrations.dir_name': $value = ($this->targetDirs[3].'/app/DoctrineMigrations'); break;
            default: throw new InvalidArgumentException(sprintf('The dynamic parameter "%s" must be defined.', $name));
        }
        $this->loadedDynamicParameters[$name] = true;

        return $this->dynamicParameters[$name] = $value;
    }

    /**
     * Gets the default parameters.
     *
     * @return array An array of the default parameters
     */
    protected function getDefaultParameters()
    {
        return array(
            'kernel.environment' => 'dev',
            'kernel.debug' => true,
            'kernel.name' => 'app',
            'kernel.cache_dir' => __DIR__,
            'kernel.bundles' => array(
                'FrameworkBundle' => 'Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle',
                'SecurityBundle' => 'Symfony\\Bundle\\SecurityBundle\\SecurityBundle',
                'TwigBundle' => 'Symfony\\Bundle\\TwigBundle\\TwigBundle',
                'MonologBundle' => 'Symfony\\Bundle\\MonologBundle\\MonologBundle',
                'SwiftmailerBundle' => 'Symfony\\Bundle\\SwiftmailerBundle\\SwiftmailerBundle',
                'AsseticBundle' => 'Symfony\\Bundle\\AsseticBundle\\AsseticBundle',
                'SensioFrameworkExtraBundle' => 'Sensio\\Bundle\\FrameworkExtraBundle\\SensioFrameworkExtraBundle',
                'JMSSerializerBundle' => 'JMS\\SerializerBundle\\JMSSerializerBundle',
                'JMSTranslationBundle' => 'JMS\\TranslationBundle\\JMSTranslationBundle',
                'StofDoctrineExtensionsBundle' => 'Stof\\DoctrineExtensionsBundle\\StofDoctrineExtensionsBundle',
                'WhiteOctoberPagerfantaBundle' => 'WhiteOctober\\PagerfantaBundle\\WhiteOctoberPagerfantaBundle',
                'BazingaHateoasBundle' => 'Bazinga\\Bundle\\HateoasBundle\\BazingaHateoasBundle',
                'SyliusLocaleBundle' => 'Sylius\\Bundle\\LocaleBundle\\SyliusLocaleBundle',
                'SyliusProductBundle' => 'Sylius\\Bundle\\ProductBundle\\SyliusProductBundle',
                'SyliusUiBundle' => 'Sylius\\Bundle\\UiBundle\\SyliusUiBundle',
                'SyliusUserBundle' => 'Sylius\\Bundle\\UserBundle\\SyliusUserBundle',
                'SyliusCustomerBundle' => 'Sylius\\Bundle\\CustomerBundle\\SyliusCustomerBundle',
                'SyliusMailerBundle' => 'Sylius\\Bundle\\MailerBundle\\SyliusMailerBundle',
                'SyliusReviewBundle' => 'Sylius\\Bundle\\ReviewBundle\\SyliusReviewBundle',
                'SyliusResourceBundle' => 'Sylius\\Bundle\\ResourceBundle\\SyliusResourceBundle',
                'SyliusAttributeBundle' => 'Sylius\\Bundle\\AttributeBundle\\SyliusAttributeBundle',
                'SyliusTaxonomyBundle' => 'Sylius\\Bundle\\TaxonomyBundle\\SyliusTaxonomyBundle',
                'winzouStateMachineBundle' => 'winzou\\Bundle\\StateMachineBundle\\winzouStateMachineBundle',
                'SonataBlockBundle' => 'Sonata\\BlockBundle\\SonataBlockBundle',
                'CmfCoreBundle' => 'Symfony\\Cmf\\Bundle\\CoreBundle\\CmfCoreBundle',
                'CmfBlockBundle' => 'Symfony\\Cmf\\Bundle\\BlockBundle\\CmfBlockBundle',
                'CmfMediaBundle' => 'Symfony\\Cmf\\Bundle\\MediaBundle\\CmfMediaBundle',
                'CmfRoutingBundle' => 'Symfony\\Cmf\\Bundle\\RoutingBundle\\CmfRoutingBundle',
                'SyliusGridBundle' => 'Sylius\\Bundle\\GridBundle\\SyliusGridBundle',
                'FOSRestBundle' => 'FOS\\RestBundle\\FOSRestBundle',
                'FOSJsRoutingBundle' => 'FOS\\JsRoutingBundle\\FOSJsRoutingBundle',
                'FOSElasticaBundle' => 'FOS\\ElasticaBundle\\FOSElasticaBundle',
                'DoctrinePHPCRBundle' => 'Doctrine\\Bundle\\PHPCRBundle\\DoctrinePHPCRBundle',
                'DoctrineCacheBundle' => 'Doctrine\\Bundle\\DoctrineCacheBundle\\DoctrineCacheBundle',
                'DoctrineBundle' => 'Doctrine\\Bundle\\DoctrineBundle\\DoctrineBundle',
                'DoctrineMigrationsBundle' => 'Doctrine\\Bundle\\MigrationsBundle\\DoctrineMigrationsBundle',
                'InfiniteFormBundle' => 'Infinite\\FormBundle\\InfiniteFormBundle',
                'KnpMenuBundle' => 'Knp\\Bundle\\MenuBundle\\KnpMenuBundle',
                'MopaBootstrapBundle' => 'Mopa\\Bundle\\BootstrapBundle\\MopaBootstrapBundle',
                'LiipImagineBundle' => 'Liip\\ImagineBundle\\LiipImagineBundle',
                'IvoryCKEditorBundle' => 'Ivory\\CKEditorBundle\\IvoryCKEditorBundle',
                'DoctrineBehaviorsBundle' => 'Knp\\DoctrineBehaviors\\Bundle\\DoctrineBehaviorsBundle',
                'ZenstruckRedirectBundle' => 'Zenstruck\\RedirectBundle\\ZenstruckRedirectBundle',
                'BmatznerJQueryUIBundle' => 'Bmatzner\\JQueryUIBundle\\BmatznerJQueryUIBundle',
                'BmatznerJQueryBundle' => 'Bmatzner\\JQueryBundle\\BmatznerJQueryBundle',
                'BmatznerFontAwesomeBundle' => 'Bmatzner\\FontAwesomeBundle\\BmatznerFontAwesomeBundle',
                'AppBundle' => 'AppBundle\\AppBundle',
                'DebugBundle' => 'Symfony\\Bundle\\DebugBundle\\DebugBundle',
                'WebProfilerBundle' => 'Symfony\\Bundle\\WebProfilerBundle\\WebProfilerBundle',
                'SensioDistributionBundle' => 'Sensio\\Bundle\\DistributionBundle\\SensioDistributionBundle',
            ),
            'kernel.charset' => 'UTF-8',
            'kernel.container_class' => 'appDevDebugProjectContainer',
            'database_driver' => 'pdo_mysql',
            'database_host' => 'jdj.dev',
            'database_port' => NULL,
            'database_name' => 'jdj',
            'database_user' => 'root',
            'database_password' => 'vagrant',
            'mailer_transport' => 'smtp',
            'mailer_host' => 'mailtrap.io',
            'mailer_user' => '22800faeb78cd66e3',
            'mailer_password' => '3b7c020fb94050',
            'mailer_port' => 2525,
            'mailer_auth' => 'cram-md5',
            'secret' => 'ThisTokenIsNotSoSecretChangeIt',
            'router.request_context.host' => 'jdj.dev',
            'router.request_context.scheme' => 'http',
            'fos_elastica.host' => 'jdj.dev',
            'fos_elastica.port' => 9200,
            'google.analytics.tracking_id' => 'UA-XXXXX-1',
            'google.analytics.profile_id' => 'XXXXXXXX',
            'knp.doctrine_behaviors.blameable_subscriber.user_entity' => 'Sylius\\Component\\User\\Model\\User',
            'locale' => 'fr_FR',
            'sylius.locale' => 'fr_FR',
            'sylius.cache' => array(
                'type' => 'file_system',
            ),
            'email_sender' => 'no-reply@jedisjeux.net',
            'email_name' => 'Contact Jedisjeux',
            'fragment.renderer.hinclude.global_template' => NULL,
            'fragment.path' => '/_fragment',
            'kernel.secret' => 'ThisTokenIsNotSoSecretChangeIt',
            'kernel.http_method_override' => true,
            'kernel.trusted_hosts' => array(

            ),
            'kernel.trusted_proxies' => array(

            ),
            'kernel.default_locale' => 'fr_FR',
            'templating.helper.code.file_link_format' => NULL,
            'debug.file_link_format' => NULL,
            'session.metadata.storage_key' => '_sf2_meta',
            'session.storage.options' => array(
                'cookie_httponly' => true,
                'gc_probability' => 1,
            ),
            'session.save_path' => (__DIR__.'/sessions'),
            'session.metadata.update_threshold' => '0',
            'form.type_extension.csrf.enabled' => true,
            'form.type_extension.csrf.field_name' => '_token',
            'templating.loader.cache.path' => NULL,
            'templating.engines' => array(
                0 => 'twig',
            ),
            'validator.mapping.cache.prefix' => '',
            'validator.mapping.cache.file' => (__DIR__.'/validation.php'),
            'validator.translation_domain' => 'validators',
            'translator.logging' => true,
            'profiler_listener.only_exceptions' => false,
            'profiler_listener.only_master_requests' => false,
            'profiler.storage.dsn' => ('file:'.__DIR__.'/profiler'),
            'debug.error_handler.throw_at' => -1,
            'debug.container.dump' => (__DIR__.'/appDevDebugProjectContainer.xml'),
            'router.options.generator_class' => 'Symfony\\Component\\Routing\\Generator\\UrlGenerator',
            'router.options.generator_base_class' => 'Symfony\\Component\\Routing\\Generator\\UrlGenerator',
            'router.options.generator_dumper_class' => 'Symfony\\Component\\Routing\\Generator\\Dumper\\PhpGeneratorDumper',
            'router.options.matcher_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher',
            'router.options.matcher_base_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher',
            'router.options.matcher_dumper_class' => 'Symfony\\Component\\Routing\\Matcher\\Dumper\\PhpMatcherDumper',
            'router.options.matcher.cache_class' => 'appDevDebugProjectContainerUrlMatcher',
            'router.options.generator.cache_class' => 'appDevDebugProjectContainerUrlGenerator',
            'router.request_context.base_url' => '',
            'router.resource' => (__DIR__.'/assetic/routing.yml'),
            'router.cache_class_prefix' => 'appDevDebugProjectContainer',
            'request_listener.http_port' => 80,
            'request_listener.https_port' => 443,
            'security.authentication.trust_resolver.anonymous_class' => 'Symfony\\Component\\Security\\Core\\Authentication\\Token\\AnonymousToken',
            'security.authentication.trust_resolver.rememberme_class' => 'Symfony\\Component\\Security\\Core\\Authentication\\Token\\RememberMeToken',
            'security.role_hierarchy.roles' => array(
                'ROLE_STAFF' => array(
                    0 => 'ROLE_USER',
                ),
                'ROLE_WORKFLOW' => array(
                    0 => 'ROLE_STAFF',
                ),
                'ROLE_REDACTOR' => array(
                    0 => 'ROLE_WORKFLOW',
                ),
                'ROLE_TRANSLATOR' => array(
                    0 => 'ROLE_WORKFLOW',
                ),
                'ROLE_QUALITY' => array(
                    0 => 'ROLE_WORKFLOW',
                ),
                'ROLE_REVIEWER' => array(
                    0 => 'ROLE_WORKFLOW',
                ),
                'ROLE_PUBLISHER' => array(
                    0 => 'ROLE_WORKFLOW',
                ),
                'ROLE_ADMIN_WORKFLOW' => array(
                    0 => 'ROLE_REDACTOR',
                    1 => 'ROLE_TRANSLATOR',
                    2 => 'ROLE_TRANSLATOR',
                    3 => 'ROLE_QUALITY',
                    4 => 'ROLE_REVIEWER',
                    5 => 'ROLE_PUBLISHER',
                ),
                'ROLE_PRESS_MANAGER' => array(
                    0 => 'ROLE_STAFF',
                ),
                'ROLE_MODERATOR' => array(
                    0 => 'ROLE_STAFF',
                ),
                'ROLE_ASSOCIATION' => array(
                    0 => 'ROLE_STAFF',
                ),
                'ROLE_OFFICE' => array(
                    0 => 'ROLE_ASSOCIATION',
                ),
                'ROLE_SECRETARY' => array(
                    0 => 'ROLE_OFFICE',
                ),
                'ROLE_TREASURER' => array(
                    0 => 'ROLE_OFFICE',
                ),
                'ROLE_PRESIDENT' => array(
                    0 => 'ROLE_OFFICE',
                ),
                'ROLE_ADMIN' => array(
                    0 => 'ROLE_ADMIN_WORKFLOW',
                    1 => 'ROLE_MODERATOR',
                    2 => 'ROLE_OFFICE',
                ),
            ),
            'security.access.denied_url' => NULL,
            'security.authentication.manager.erase_credentials' => true,
            'security.authentication.session_strategy.strategy' => 'migrate',
            'security.access.always_authenticate_before_granting' => false,
            'security.authentication.hide_user_not_found' => true,
            'twig.exception_listener.controller' => 'twig.controller.exception:showAction',
            'twig.form.resources' => array(
                0 => 'IvoryCKEditorBundle:Form:ckeditor_widget.html.twig',
                1 => 'form_div_layout.html.twig',
                2 => 'MopaBootstrapBundle:Form:fields.html.twig',
                3 => 'CmfCoreBundle:Form:checkbox_url_label_form_type.html.twig',
                4 => 'LiipImagineBundle:Form:form_div_layout.html.twig',
            ),
            'monolog.logger.class' => 'Symfony\\Bridge\\Monolog\\Logger',
            'monolog.gelf.publisher.class' => 'Gelf\\MessagePublisher',
            'monolog.gelfphp.publisher.class' => 'Gelf\\Publisher',
            'monolog.handler.stream.class' => 'Monolog\\Handler\\StreamHandler',
            'monolog.handler.console.class' => 'Symfony\\Bridge\\Monolog\\Handler\\ConsoleHandler',
            'monolog.handler.group.class' => 'Monolog\\Handler\\GroupHandler',
            'monolog.handler.buffer.class' => 'Monolog\\Handler\\BufferHandler',
            'monolog.handler.deduplication.class' => 'Monolog\\Handler\\DeduplicationHandler',
            'monolog.handler.rotating_file.class' => 'Monolog\\Handler\\RotatingFileHandler',
            'monolog.handler.syslog.class' => 'Monolog\\Handler\\SyslogHandler',
            'monolog.handler.syslogudp.class' => 'Monolog\\Handler\\SyslogUdpHandler',
            'monolog.handler.null.class' => 'Monolog\\Handler\\NullHandler',
            'monolog.handler.test.class' => 'Monolog\\Handler\\TestHandler',
            'monolog.handler.gelf.class' => 'Monolog\\Handler\\GelfHandler',
            'monolog.handler.rollbar.class' => 'Monolog\\Handler\\RollbarHandler',
            'monolog.handler.flowdock.class' => 'Monolog\\Handler\\FlowdockHandler',
            'monolog.handler.browser_console.class' => 'Monolog\\Handler\\BrowserConsoleHandler',
            'monolog.handler.firephp.class' => 'Symfony\\Bridge\\Monolog\\Handler\\FirePHPHandler',
            'monolog.handler.chromephp.class' => 'Symfony\\Bridge\\Monolog\\Handler\\ChromePhpHandler',
            'monolog.handler.debug.class' => 'Symfony\\Bridge\\Monolog\\Handler\\DebugHandler',
            'monolog.handler.swift_mailer.class' => 'Symfony\\Bridge\\Monolog\\Handler\\SwiftMailerHandler',
            'monolog.handler.native_mailer.class' => 'Monolog\\Handler\\NativeMailerHandler',
            'monolog.handler.socket.class' => 'Monolog\\Handler\\SocketHandler',
            'monolog.handler.pushover.class' => 'Monolog\\Handler\\PushoverHandler',
            'monolog.handler.raven.class' => 'Monolog\\Handler\\RavenHandler',
            'monolog.handler.newrelic.class' => 'Monolog\\Handler\\NewRelicHandler',
            'monolog.handler.hipchat.class' => 'Monolog\\Handler\\HipChatHandler',
            'monolog.handler.slack.class' => 'Monolog\\Handler\\SlackHandler',
            'monolog.handler.cube.class' => 'Monolog\\Handler\\CubeHandler',
            'monolog.handler.amqp.class' => 'Monolog\\Handler\\AmqpHandler',
            'monolog.handler.error_log.class' => 'Monolog\\Handler\\ErrorLogHandler',
            'monolog.handler.loggly.class' => 'Monolog\\Handler\\LogglyHandler',
            'monolog.handler.logentries.class' => 'Monolog\\Handler\\LogEntriesHandler',
            'monolog.handler.whatfailuregroup.class' => 'Monolog\\Handler\\WhatFailureGroupHandler',
            'monolog.activation_strategy.not_found.class' => 'Symfony\\Bundle\\MonologBundle\\NotFoundActivationStrategy',
            'monolog.handler.fingers_crossed.class' => 'Monolog\\Handler\\FingersCrossedHandler',
            'monolog.handler.fingers_crossed.error_level_activation_strategy.class' => 'Monolog\\Handler\\FingersCrossed\\ErrorLevelActivationStrategy',
            'monolog.handler.filter.class' => 'Monolog\\Handler\\FilterHandler',
            'monolog.handler.mongo.class' => 'Monolog\\Handler\\MongoDBHandler',
            'monolog.mongo.client.class' => 'MongoClient',
            'monolog.handler.elasticsearch.class' => 'Monolog\\Handler\\ElasticSearchHandler',
            'monolog.elastica.client.class' => 'Elastica\\Client',
            'monolog.use_microseconds' => true,
            'monolog.swift_mailer.handlers' => array(

            ),
            'monolog.handlers_to_channels' => array(
                'monolog.handler.console' => NULL,
                'monolog.handler.main' => NULL,
            ),
            'swiftmailer.class' => 'Swift_Mailer',
            'swiftmailer.transport.sendmail.class' => 'Swift_Transport_SendmailTransport',
            'swiftmailer.transport.mail.class' => 'Swift_Transport_MailTransport',
            'swiftmailer.transport.failover.class' => 'Swift_Transport_FailoverTransport',
            'swiftmailer.plugin.redirecting.class' => 'Swift_Plugins_RedirectingPlugin',
            'swiftmailer.plugin.impersonate.class' => 'Swift_Plugins_ImpersonatePlugin',
            'swiftmailer.plugin.messagelogger.class' => 'Swift_Plugins_MessageLogger',
            'swiftmailer.plugin.antiflood.class' => 'Swift_Plugins_AntiFloodPlugin',
            'swiftmailer.transport.smtp.class' => 'Swift_Transport_EsmtpTransport',
            'swiftmailer.plugin.blackhole.class' => 'Swift_Plugins_BlackholePlugin',
            'swiftmailer.spool.file.class' => 'Swift_FileSpool',
            'swiftmailer.spool.memory.class' => 'Swift_MemorySpool',
            'swiftmailer.email_sender.listener.class' => 'Symfony\\Bundle\\SwiftmailerBundle\\EventListener\\EmailSenderListener',
            'swiftmailer.data_collector.class' => 'Symfony\\Bundle\\SwiftmailerBundle\\DataCollector\\MessageDataCollector',
            'swiftmailer.mailer.default.transport.name' => 'smtp',
            'swiftmailer.mailer.default.transport.smtp.encryption' => NULL,
            'swiftmailer.mailer.default.transport.smtp.port' => 2525,
            'swiftmailer.mailer.default.transport.smtp.host' => 'mailtrap.io',
            'swiftmailer.mailer.default.transport.smtp.username' => '22800faeb78cd66e3',
            'swiftmailer.mailer.default.transport.smtp.password' => '3b7c020fb94050',
            'swiftmailer.mailer.default.transport.smtp.auth_mode' => 'cram-md5',
            'swiftmailer.mailer.default.transport.smtp.timeout' => 30,
            'swiftmailer.mailer.default.transport.smtp.source_ip' => NULL,
            'swiftmailer.mailer.default.transport.smtp.local_domain' => NULL,
            'swiftmailer.spool.default.memory.path' => (__DIR__.'/swiftmailer/spool/default'),
            'swiftmailer.mailer.default.spool.enabled' => true,
            'swiftmailer.mailer.default.plugin.impersonate' => NULL,
            'swiftmailer.mailer.default.single_address' => NULL,
            'swiftmailer.mailer.default.delivery.enabled' => true,
            'swiftmailer.spool.enabled' => true,
            'swiftmailer.delivery.enabled' => true,
            'swiftmailer.single_address' => NULL,
            'swiftmailer.mailers' => array(
                'default' => 'swiftmailer.mailer.default',
            ),
            'swiftmailer.default_mailer' => 'default',
            'assetic.asset_factory.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\AssetFactory',
            'assetic.asset_manager.class' => 'Assetic\\Factory\\LazyAssetManager',
            'assetic.asset_manager_cache_warmer.class' => 'Symfony\\Bundle\\AsseticBundle\\CacheWarmer\\AssetManagerCacheWarmer',
            'assetic.cached_formula_loader.class' => 'Assetic\\Factory\\Loader\\CachedFormulaLoader',
            'assetic.config_cache.class' => 'Assetic\\Cache\\ConfigCache',
            'assetic.config_loader.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\Loader\\ConfigurationLoader',
            'assetic.config_resource.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\Resource\\ConfigurationResource',
            'assetic.coalescing_directory_resource.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\Resource\\CoalescingDirectoryResource',
            'assetic.directory_resource.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\Resource\\DirectoryResource',
            'assetic.filter_manager.class' => 'Symfony\\Bundle\\AsseticBundle\\FilterManager',
            'assetic.worker.ensure_filter.class' => 'Assetic\\Factory\\Worker\\EnsureFilterWorker',
            'assetic.worker.cache_busting.class' => 'Assetic\\Factory\\Worker\\CacheBustingWorker',
            'assetic.value_supplier.class' => 'Symfony\\Bundle\\AsseticBundle\\DefaultValueSupplier',
            'assetic.node.paths' => array(

            ),
            'assetic.cache_dir' => (__DIR__.'/assetic'),
            'assetic.bundles' => array(
                0 => 'FrameworkBundle',
                1 => 'SecurityBundle',
                2 => 'TwigBundle',
                3 => 'MonologBundle',
                4 => 'SwiftmailerBundle',
                5 => 'AsseticBundle',
                6 => 'SensioFrameworkExtraBundle',
                7 => 'JMSSerializerBundle',
                8 => 'JMSTranslationBundle',
                9 => 'StofDoctrineExtensionsBundle',
                10 => 'WhiteOctoberPagerfantaBundle',
                11 => 'BazingaHateoasBundle',
                12 => 'SyliusLocaleBundle',
                13 => 'SyliusProductBundle',
                14 => 'SyliusUiBundle',
                15 => 'SyliusUserBundle',
                16 => 'SyliusCustomerBundle',
                17 => 'SyliusMailerBundle',
                18 => 'SyliusReviewBundle',
                19 => 'SyliusResourceBundle',
                20 => 'SyliusAttributeBundle',
                21 => 'SyliusTaxonomyBundle',
                22 => 'winzouStateMachineBundle',
                23 => 'SonataBlockBundle',
                24 => 'CmfCoreBundle',
                25 => 'CmfBlockBundle',
                26 => 'CmfMediaBundle',
                27 => 'CmfRoutingBundle',
                28 => 'SyliusGridBundle',
                29 => 'FOSRestBundle',
                30 => 'FOSJsRoutingBundle',
                31 => 'FOSElasticaBundle',
                32 => 'DoctrinePHPCRBundle',
                33 => 'DoctrineCacheBundle',
                34 => 'DoctrineBundle',
                35 => 'DoctrineMigrationsBundle',
                36 => 'InfiniteFormBundle',
                37 => 'KnpMenuBundle',
                38 => 'MopaBootstrapBundle',
                39 => 'LiipImagineBundle',
                40 => 'IvoryCKEditorBundle',
                41 => 'DoctrineBehaviorsBundle',
                42 => 'ZenstruckRedirectBundle',
                43 => 'BmatznerJQueryUIBundle',
                44 => 'BmatznerJQueryBundle',
                45 => 'BmatznerFontAwesomeBundle',
                46 => 'AppBundle',
                47 => 'DebugBundle',
                48 => 'WebProfilerBundle',
                49 => 'SensioDistributionBundle',
            ),
            'assetic.twig_extension.class' => 'Symfony\\Bundle\\AsseticBundle\\Twig\\AsseticExtension',
            'assetic.twig_formula_loader.class' => 'Assetic\\Extension\\Twig\\TwigFormulaLoader',
            'assetic.helper.dynamic.class' => 'Symfony\\Bundle\\AsseticBundle\\Templating\\DynamicAsseticHelper',
            'assetic.helper.static.class' => 'Symfony\\Bundle\\AsseticBundle\\Templating\\StaticAsseticHelper',
            'assetic.php_formula_loader.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\Loader\\AsseticHelperFormulaLoader',
            'assetic.debug' => true,
            'assetic.use_controller' => true,
            'assetic.enable_profiler' => false,
            'assetic.variables' => array(

            ),
            'assetic.java.bin' => '/usr/bin/java',
            'assetic.node.bin' => '/usr/local/bin/node',
            'assetic.ruby.bin' => '/usr/bin/ruby',
            'assetic.sass.bin' => '/usr/bin/sass',
            'assetic.reactjsx.bin' => '/usr/bin/jsx',
            'assetic.twig_extension.functions' => array(

            ),
            'assetic.controller.class' => 'Symfony\\Bundle\\AsseticBundle\\Controller\\AsseticController',
            'assetic.routing_loader.class' => 'Symfony\\Bundle\\AsseticBundle\\Routing\\AsseticLoader',
            'assetic.cache.class' => 'Assetic\\Cache\\FilesystemCache',
            'assetic.use_controller_worker.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\Worker\\UseControllerWorker',
            'assetic.request_listener.class' => 'Symfony\\Bundle\\AsseticBundle\\EventListener\\RequestListener',
            'sensio_framework_extra.view.guesser.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Templating\\TemplateGuesser',
            'sensio_framework_extra.controller.listener.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener',
            'sensio_framework_extra.routing.loader.annot_dir.class' => 'Symfony\\Component\\Routing\\Loader\\AnnotationDirectoryLoader',
            'sensio_framework_extra.routing.loader.annot_file.class' => 'Symfony\\Component\\Routing\\Loader\\AnnotationFileLoader',
            'sensio_framework_extra.routing.loader.annot_class.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Routing\\AnnotatedRouteControllerLoader',
            'sensio_framework_extra.converter.listener.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener',
            'sensio_framework_extra.converter.manager.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Request\\ParamConverter\\ParamConverterManager',
            'sensio_framework_extra.converter.doctrine.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Request\\ParamConverter\\DoctrineParamConverter',
            'sensio_framework_extra.converter.datetime.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Request\\ParamConverter\\DateTimeParamConverter',
            'sensio_framework_extra.view.listener.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener',
            'jms_serializer.metadata.file_locator.class' => 'Metadata\\Driver\\FileLocator',
            'jms_serializer.metadata.annotation_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\AnnotationDriver',
            'jms_serializer.metadata.chain_driver.class' => 'Metadata\\Driver\\DriverChain',
            'jms_serializer.metadata.yaml_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\YamlDriver',
            'jms_serializer.metadata.xml_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\XmlDriver',
            'jms_serializer.metadata.php_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\PhpDriver',
            'jms_serializer.metadata.doctrine_type_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\DoctrineTypeDriver',
            'jms_serializer.metadata.doctrine_phpcr_type_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\DoctrinePHPCRTypeDriver',
            'jms_serializer.metadata.lazy_loading_driver.class' => 'Metadata\\Driver\\LazyLoadingDriver',
            'jms_serializer.metadata.metadata_factory.class' => 'Metadata\\MetadataFactory',
            'jms_serializer.metadata.cache.file_cache.class' => 'Metadata\\Cache\\FileCache',
            'jms_serializer.event_dispatcher.class' => 'JMS\\Serializer\\EventDispatcher\\LazyEventDispatcher',
            'jms_serializer.camel_case_naming_strategy.class' => 'JMS\\Serializer\\Naming\\CamelCaseNamingStrategy',
            'jms_serializer.identical_property_naming_strategy.class' => 'JMS\\Serializer\\Naming\\IdenticalPropertyNamingStrategy',
            'jms_serializer.serialized_name_annotation_strategy.class' => 'JMS\\Serializer\\Naming\\SerializedNameAnnotationStrategy',
            'jms_serializer.cache_naming_strategy.class' => 'JMS\\Serializer\\Naming\\CacheNamingStrategy',
            'jms_serializer.doctrine_object_constructor.class' => 'JMS\\Serializer\\Construction\\DoctrineObjectConstructor',
            'jms_serializer.unserialize_object_constructor.class' => 'JMS\\Serializer\\Construction\\UnserializeObjectConstructor',
            'jms_serializer.version_exclusion_strategy.class' => 'JMS\\Serializer\\Exclusion\\VersionExclusionStrategy',
            'jms_serializer.serializer.class' => 'JMS\\Serializer\\Serializer',
            'jms_serializer.twig_extension.class' => 'JMS\\Serializer\\Twig\\SerializerExtension',
            'jms_serializer.templating.helper.class' => 'JMS\\SerializerBundle\\Templating\\SerializerHelper',
            'jms_serializer.json_serialization_visitor.class' => 'JMS\\Serializer\\JsonSerializationVisitor',
            'jms_serializer.json_serialization_visitor.options' => 0,
            'jms_serializer.json_deserialization_visitor.class' => 'JMS\\Serializer\\JsonDeserializationVisitor',
            'jms_serializer.xml_serialization_visitor.class' => 'JMS\\Serializer\\XmlSerializationVisitor',
            'jms_serializer.xml_deserialization_visitor.class' => 'JMS\\Serializer\\XmlDeserializationVisitor',
            'jms_serializer.xml_deserialization_visitor.doctype_whitelist' => array(

            ),
            'jms_serializer.xml_serialization_visitor.format_output' => true,
            'jms_serializer.yaml_serialization_visitor.class' => 'JMS\\Serializer\\YamlSerializationVisitor',
            'jms_serializer.handler_registry.class' => 'JMS\\Serializer\\Handler\\LazyHandlerRegistry',
            'jms_serializer.datetime_handler.class' => 'JMS\\Serializer\\Handler\\DateHandler',
            'jms_serializer.array_collection_handler.class' => 'JMS\\Serializer\\Handler\\ArrayCollectionHandler',
            'jms_serializer.php_collection_handler.class' => 'JMS\\Serializer\\Handler\\PhpCollectionHandler',
            'jms_serializer.form_error_handler.class' => 'JMS\\Serializer\\Handler\\FormErrorHandler',
            'jms_serializer.constraint_violation_handler.class' => 'JMS\\Serializer\\Handler\\ConstraintViolationHandler',
            'jms_serializer.doctrine_proxy_subscriber.class' => 'JMS\\Serializer\\EventDispatcher\\Subscriber\\DoctrineProxySubscriber',
            'jms_serializer.stopwatch_subscriber.class' => 'JMS\\SerializerBundle\\Serializer\\StopwatchEventSubscriber',
            'jms_serializer.configured_context_factory.class' => 'JMS\\SerializerBundle\\ContextFactory\\ConfiguredContextFactory',
            'jms_serializer.expression_evaluator.class' => 'JMS\\Serializer\\Expression\\ExpressionEvaluator',
            'jms_serializer.expression_language.class' => 'Symfony\\Component\\ExpressionLanguage\\ExpressionLanguage',
            'jms_serializer.expression_language.function_provider.class' => 'JMS\\SerializerBundle\\ExpressionLanguage\\BasicSerializerFunctionsProvider',
            'jms_serializer.accessor_strategy.default.class' => 'JMS\\Serializer\\Accessor\\DefaultAccessorStrategy',
            'jms_serializer.accessor_strategy.expression.class' => 'JMS\\Serializer\\Accessor\\ExpressionAccessorStrategy',
            'jms_translation.twig_extension.class' => 'JMS\\TranslationBundle\\Twig\\TranslationExtension',
            'jms_translation.extractor_manager.class' => 'JMS\\TranslationBundle\\Translation\\ExtractorManager',
            'jms_translation.extractor.file_extractor.class' => 'JMS\\TranslationBundle\\Translation\\Extractor\\FileExtractor',
            'jms_translation.extractor.file.default_php_extractor' => 'JMS\\TranslationBundle\\Translation\\Extractor\\File\\DefaultPhpFileExtractor',
            'jms_translation.extractor.file.translation_container_extractor' => 'JMS\\TranslationBundle\\Translation\\Extractor\\File\\TranslationContainerExtractor',
            'jms_translation.extractor.file.twig_extractor' => 'JMS\\TranslationBundle\\Translation\\Extractor\\File\\TwigFileExtractor',
            'jms_translation.extractor.file.form_extractor.class' => 'JMS\\TranslationBundle\\Translation\\Extractor\\File\\FormExtractor',
            'jms_translation.extractor.file.validation_extractor.class' => 'JMS\\TranslationBundle\\Translation\\Extractor\\File\\ValidationExtractor',
            'jms_translation.extractor.file.authentication_message_extractor.class' => 'JMS\\TranslationBundle\\Translation\\Extractor\\File\\AuthenticationMessagesExtractor',
            'jms_translation.loader.symfony.xliff_loader.class' => 'JMS\\TranslationBundle\\Translation\\Loader\\Symfony\\XliffLoader',
            'jms_translation.loader.xliff_loader.class' => 'JMS\\TranslationBundle\\Translation\\Loader\\XliffLoader',
            'jms_translation.loader.symfony_adapter.class' => 'JMS\\TranslationBundle\\Translation\\Loader\\SymfonyLoaderAdapter',
            'jms_translation.loader_manager.class' => 'JMS\\TranslationBundle\\Translation\\LoaderManager',
            'jms_translation.dumper.php_dumper.class' => 'JMS\\TranslationBundle\\Translation\\Dumper\\PhpDumper',
            'jms_translation.dumper.xliff_dumper.class' => 'JMS\\TranslationBundle\\Translation\\Dumper\\XliffDumper',
            'jms_translation.dumper.yaml_dumper.class' => 'JMS\\TranslationBundle\\Translation\\Dumper\\YamlDumper',
            'jms_translation.dumper.symfony_adapter.class' => 'JMS\\TranslationBundle\\Translation\\Dumper\\SymfonyDumperAdapter',
            'jms_translation.file_writer.class' => 'JMS\\TranslationBundle\\Translation\\FileWriter',
            'jms_translation.updater.class' => 'JMS\\TranslationBundle\\Translation\\Updater',
            'jms_translation.config_factory.class' => 'JMS\\TranslationBundle\\Translation\\ConfigFactory',
            'jms_translation.file_source_factory.class' => 'JMS\\TranslationBundle\\Translation\\FileSourceFactory',
            'jms_translation.source_language' => 'en',
            'jms_translation.locales' => array(

            ),
            'stof_doctrine_extensions.event_listener.locale.class' => 'Stof\\DoctrineExtensionsBundle\\EventListener\\LocaleListener',
            'stof_doctrine_extensions.event_listener.logger.class' => 'Stof\\DoctrineExtensionsBundle\\EventListener\\LoggerListener',
            'stof_doctrine_extensions.event_listener.blame.class' => 'Stof\\DoctrineExtensionsBundle\\EventListener\\BlameListener',
            'stof_doctrine_extensions.uploadable.manager.class' => 'Stof\\DoctrineExtensionsBundle\\Uploadable\\UploadableManager',
            'stof_doctrine_extensions.uploadable.mime_type_guesser.class' => 'Stof\\DoctrineExtensionsBundle\\Uploadable\\MimeTypeGuesserAdapter',
            'stof_doctrine_extensions.uploadable.default_file_info.class' => 'Stof\\DoctrineExtensionsBundle\\Uploadable\\UploadedFileInfo',
            'stof_doctrine_extensions.default_locale' => 'fr_FR',
            'stof_doctrine_extensions.default_file_path' => NULL,
            'stof_doctrine_extensions.translation_fallback' => false,
            'stof_doctrine_extensions.persist_default_translation' => false,
            'stof_doctrine_extensions.skip_translation_on_load' => false,
            'stof_doctrine_extensions.uploadable.validate_writable_directory' => true,
            'stof_doctrine_extensions.listener.translatable.class' => 'Gedmo\\Translatable\\TranslatableListener',
            'stof_doctrine_extensions.listener.timestampable.class' => 'Gedmo\\Timestampable\\TimestampableListener',
            'stof_doctrine_extensions.listener.blameable.class' => 'Gedmo\\Blameable\\BlameableListener',
            'stof_doctrine_extensions.listener.sluggable.class' => 'Gedmo\\Sluggable\\SluggableListener',
            'stof_doctrine_extensions.listener.tree.class' => 'Gedmo\\Tree\\TreeListener',
            'stof_doctrine_extensions.listener.loggable.class' => 'Gedmo\\Loggable\\LoggableListener',
            'stof_doctrine_extensions.listener.sortable.class' => 'Gedmo\\Sortable\\SortableListener',
            'stof_doctrine_extensions.listener.softdeleteable.class' => 'Gedmo\\SoftDeleteable\\SoftDeleteableListener',
            'stof_doctrine_extensions.listener.uploadable.class' => 'Gedmo\\Uploadable\\UploadableListener',
            'stof_doctrine_extensions.listener.reference_integrity.class' => 'Gedmo\\ReferenceIntegrity\\ReferenceIntegrityListener',
            'white_october_pagerfanta.default_view' => 'default',
            'white_october_pagerfanta.view_factory.class' => 'Pagerfanta\\View\\ViewFactory',
            'hateoas.link_factory.class' => 'Hateoas\\Factory\\LinkFactory',
            'hateoas.links_factory.class' => 'Hateoas\\Factory\\LinksFactory',
            'hateoas.embeds_factory.class' => 'Hateoas\\Factory\\EmbeddedsFactory',
            'hateoas.expression.evaluator.class' => 'Bazinga\\Bundle\\HateoasBundle\\Hateoas\\Expression\\LazyFunctionExpressionEvaluator',
            'bazinga_hateoas.expression_language.class' => 'Bazinga\\Bundle\\HateoasBundle\\ExpressionLanguage\\ExpressionLanguage',
            'hateoas.expression.link.class' => 'Hateoas\\Expression\\LinkExpressionFunction',
            'hateoas.serializer.xml.class' => 'Hateoas\\Serializer\\XmlSerializer',
            'hateoas.serializer.json_hal.class' => 'Hateoas\\Serializer\\JsonHalSerializer',
            'hateoas.serializer.exclusion_manager.class' => 'Hateoas\\Serializer\\ExclusionManager',
            'hateoas.event_subscriber.xml.class' => 'Hateoas\\Serializer\\EventSubscriber\\XmlEventSubscriber',
            'hateoas.event_subscriber.json.class' => 'Hateoas\\Serializer\\EventSubscriber\\JsonEventSubscriber',
            'hateoas.inline_deferrer.embeds.class' => 'Hateoas\\Serializer\\Metadata\\InlineDeferrer',
            'hateoas.inline_deferrer.links.class' => 'Hateoas\\Serializer\\Metadata\\InlineDeferrer',
            'hateoas.configuration.provider.resolver.chain.class' => 'Hateoas\\Configuration\\Provider\\Resolver\\ChainResolver',
            'hateoas.configuration.provider.resolver.method.class' => 'Hateoas\\Configuration\\Provider\\Resolver\\MethodResolver',
            'hateoas.configuration.provider.resolver.static_method.class' => 'Hateoas\\Configuration\\Provider\\Resolver\\StaticMethodResolver',
            'hateoas.configuration.provider.resolver.symfony_container.class' => 'Hateoas\\Configuration\\Provider\\Resolver\\SymfonyContainerResolver',
            'hateoas.configuration.relation_provider.class' => 'Hateoas\\Configuration\\Provider\\RelationProvider',
            'hateoas.configuration.relations_repository.class' => 'Hateoas\\Configuration\\RelationsRepository',
            'hateoas.configuration.metadata.yaml_driver.class' => 'Hateoas\\Configuration\\Metadata\\Driver\\YamlDriver',
            'hateoas.configuration.metadata.xml_driver.class' => 'Hateoas\\Configuration\\Metadata\\Driver\\XmlDriver',
            'hateoas.configuration.metadata.annotation_driver.class' => 'Hateoas\\Configuration\\Metadata\\Driver\\AnnotationDriver',
            'hateoas.configuration.metadata.extension_driver.class' => 'Hateoas\\Configuration\\Metadata\\Driver\\ExtensionDriver',
            'hateoas.generator.registry.class' => 'Hateoas\\UrlGenerator\\UrlGeneratorRegistry',
            'hateoas.generator.symfony.class' => 'Hateoas\\UrlGenerator\\SymfonyUrlGenerator',
            'hateoas.helper.link.class' => 'Hateoas\\Helper\\LinkHelper',
            'hateoas.twig.link.class' => 'Hateoas\\Twig\\Extension\\LinkExtension',
            'sylius_locale.driver.doctrine/orm' => true,
            'sylius_locale.driver' => 'doctrine/orm',
            'sylius.resources' => array(
                'sylius.locale' => array(
                    'driver' => 'doctrine/orm',
                    'classes' => array(
                        'model' => 'Sylius\\Component\\Locale\\Model\\Locale',
                        'interface' => 'Sylius\\Component\\Locale\\Model\\LocaleInterface',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                        'form' => 'Sylius\\Bundle\\LocaleBundle\\Form\\Type\\LocaleType',
                    ),
                ),
                'sylius.product' => array(
                    'driver' => 'doctrine/orm',
                    'classes' => array(
                        'model' => 'AppBundle\\Entity\\Product',
                        'factory' => 'AppBundle\\Factory\\ProductFactory',
                        'repository' => 'AppBundle\\Repository\\ProductRepository',
                        'controller' => 'AppBundle\\Controller\\ProductController',
                        'form' => 'AppBundle\\Form\\Type\\ProductType',
                        'interface' => 'Sylius\\Component\\Product\\Model\\ProductInterface',
                    ),
                    'translation' => array(
                        'classes' => array(
                            'model' => 'AppBundle\\Entity\\ProductTranslation',
                            'interface' => 'Sylius\\Component\\Product\\Model\\ProductTranslationInterface',
                            'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                            'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                            'form' => 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductTranslationType',
                        ),
                    ),
                ),
                'sylius.product_translation' => array(
                    'driver' => 'doctrine/orm',
                    'classes' => array(
                        'model' => 'AppBundle\\Entity\\ProductTranslation',
                        'interface' => 'Sylius\\Component\\Product\\Model\\ProductTranslationInterface',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                        'form' => 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductTranslationType',
                    ),
                ),
                'sylius.product_variant' => array(
                    'driver' => 'doctrine/orm',
                    'classes' => array(
                        'model' => 'AppBundle\\Entity\\ProductVariant',
                        'factory' => 'Sylius\\Component\\Product\\Factory\\ProductVariantFactory',
                        'repository' => 'AppBundle\\Repository\\ProductVariantRepository',
                        'controller' => 'AppBundle\\Controller\\ProductVariantController',
                        'form' => 'AppBundle\\Form\\Type\\ProductVariantType',
                        'interface' => 'Sylius\\Component\\Product\\Model\\ProductVariantInterface',
                    ),
                ),
                'sylius.product_option' => array(
                    'driver' => 'doctrine/orm',
                    'classes' => array(
                        'model' => 'Sylius\\Component\\Product\\Model\\ProductOption',
                        'interface' => 'Sylius\\Component\\Product\\Model\\ProductOptionInterface',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\TranslatableFactory',
                        'form' => 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductOptionType',
                    ),
                    'translation' => array(
                        'classes' => array(
                            'model' => 'Sylius\\Component\\Product\\Model\\ProductOptionTranslation',
                            'interface' => 'Sylius\\Component\\Product\\Model\\ProductOptionTranslationInterface',
                            'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                            'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                            'form' => 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductOptionTranslationType',
                        ),
                    ),
                ),
                'sylius.product_option_translation' => array(
                    'driver' => 'doctrine/orm',
                    'classes' => array(
                        'model' => 'Sylius\\Component\\Product\\Model\\ProductOptionTranslation',
                        'interface' => 'Sylius\\Component\\Product\\Model\\ProductOptionTranslationInterface',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                        'form' => 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductOptionTranslationType',
                    ),
                ),
                'sylius.product_option_value' => array(
                    'driver' => 'doctrine/orm',
                    'classes' => array(
                        'model' => 'Sylius\\Component\\Product\\Model\\ProductOptionValue',
                        'interface' => 'Sylius\\Component\\Product\\Model\\ProductOptionValueInterface',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\TranslatableFactory',
                        'form' => 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductOptionValueType',
                    ),
                    'translation' => array(
                        'classes' => array(
                            'model' => 'Sylius\\Component\\Product\\Model\\ProductOptionValueTranslation',
                            'interface' => 'Sylius\\Component\\Product\\Model\\ProductOptionValueTranslationInterface',
                            'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                            'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                            'form' => 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductOptionValueTranslationType',
                        ),
                    ),
                ),
                'sylius.product_option_value_translation' => array(
                    'driver' => 'doctrine/orm',
                    'classes' => array(
                        'model' => 'Sylius\\Component\\Product\\Model\\ProductOptionValueTranslation',
                        'interface' => 'Sylius\\Component\\Product\\Model\\ProductOptionValueTranslationInterface',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                        'form' => 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductOptionValueTranslationType',
                    ),
                ),
                'sylius.product_association' => array(
                    'driver' => 'doctrine/orm',
                    'classes' => array(
                        'model' => 'Sylius\\Component\\Product\\Model\\ProductAssociation',
                        'interface' => 'Sylius\\Component\\Product\\Model\\ProductAssociationInterface',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                        'form' => 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductAssociationType',
                    ),
                ),
                'sylius.product_association_type' => array(
                    'driver' => 'doctrine/orm',
                    'classes' => array(
                        'model' => 'Sylius\\Component\\Product\\Model\\ProductAssociationType',
                        'interface' => 'Sylius\\Component\\Product\\Model\\ProductAssociationTypeInterface',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                        'form' => 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductAssociationTypeType',
                    ),
                ),
                'sylius.shop_user' => array(
                    'driver' => 'doctrine/orm',
                    'classes' => array(
                        'model' => 'AppBundle\\Entity\\User',
                        'repository' => 'AppBundle\\Repository\\UserRepository',
                        'controller' => 'AppBundle\\Controller\\UserController',
                        'interface' => 'Sylius\\Component\\User\\Model\\UserInterface',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                    ),
                    'templates' => 'SyliusUserBundle:User',
                    'resetting' => array(
                        'token' => array(
                            'ttl' => 'P1D',
                            'length' => 16,
                            'field_name' => 'passwordResetToken',
                        ),
                        'pin' => array(
                            'length' => 4,
                            'field_name' => 'passwordResetToken',
                        ),
                    ),
                    'verification' => array(
                        'token' => array(
                            'length' => 16,
                            'field_name' => 'emailVerificationToken',
                        ),
                    ),
                ),
                'sylius.admin_oauth_user' => array(
                    'driver' => 'doctrine/orm',
                    'classes' => array(
                        'model' => 'Sylius\\Component\\User\\Model\\UserOAuth',
                        'interface' => 'Sylius\\Component\\User\\Model\\UserOAuthInterface',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                    ),
                    'templates' => 'SyliusUserBundle:User',
                    'resetting' => array(
                        'token' => array(
                            'ttl' => 'P1D',
                            'length' => 16,
                            'field_name' => 'passwordResetToken',
                        ),
                        'pin' => array(
                            'length' => 4,
                            'field_name' => 'passwordResetToken',
                        ),
                    ),
                    'verification' => array(
                        'token' => array(
                            'length' => 16,
                            'field_name' => 'emailVerificationToken',
                        ),
                    ),
                ),
                'sylius.customer' => array(
                    'driver' => 'doctrine/orm',
                    'classes' => array(
                        'model' => 'AppBundle\\Entity\\Customer',
                        'repository' => 'AppBundle\\Repository\\CustomerRepository',
                        'form' => 'AppBundle\\Form\\Type\\Customer\\CustomerType',
                        'interface' => 'Sylius\\Component\\Customer\\Model\\CustomerInterface',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                    ),
                ),
                'sylius.customer_group' => array(
                    'driver' => 'doctrine/orm',
                    'classes' => array(
                        'model' => 'Sylius\\Component\\Customer\\Model\\CustomerGroup',
                        'interface' => 'Sylius\\Component\\Customer\\Model\\CustomerGroupInterface',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                        'form' => 'Sylius\\Bundle\\CustomerBundle\\Form\\Type\\CustomerGroupType',
                    ),
                ),
                'sylius.product_reviewer' => array(
                    'driver' => 'doctrine/orm',
                    'classes' => array(
                        'model' => 'AppBundle\\Entity\\Customer',
                        'interface' => 'Sylius\\Component\\Review\\Model\\ReviewerInterface',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                    ),
                ),
                'sylius.product_review' => array(
                    'driver' => 'doctrine/orm',
                    'classes' => array(
                        'model' => 'AppBundle\\Entity\\ProductReview',
                        'repository' => 'AppBundle\\Repository\\ProductReviewRepository',
                        'controller' => 'AppBundle\\Controller\\ProductReviewController',
                        'form' => 'AppBundle\\Form\\Type\\ProductReviewType',
                        'interface' => 'Sylius\\Component\\Review\\Model\\ReviewInterface',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                    ),
                ),
                'app.article' => array(
                    'classes' => array(
                        'model' => 'AppBundle\\Entity\\Article',
                        'factory' => 'AppBundle\\Factory\\ArticleFactory',
                        'repository' => 'AppBundle\\Repository\\ArticleRepository',
                        'controller' => 'AppBundle\\Controller\\ArticleController',
                        'form' => 'AppBundle\\Form\\Type\\ArticleType',
                    ),
                    'driver' => 'doctrine/orm',
                ),
                'app.article_image' => array(
                    'classes' => array(
                        'model' => 'AppBundle\\Entity\\ArticleImage',
                        'form' => 'AppBundle\\Form\\Type\\ArticleImageType',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                    ),
                    'driver' => 'doctrine/orm',
                ),
                'app.article_review' => array(
                    'classes' => array(
                        'model' => 'AppBundle\\Entity\\ArticleReview',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                    ),
                    'driver' => 'doctrine/orm',
                ),
                'app.article_content' => array(
                    'driver' => 'doctrine/phpcr-odm',
                    'classes' => array(
                        'model' => 'AppBundle\\Document\\ArticleContent',
                        'factory' => 'AppBundle\\Factory\\ArticleContentFactory',
                        'repository' => 'Sylius\\Bundle\\ResourceBundle\\Doctrine\\ODM\\PHPCR\\DocumentRepository',
                        'form' => 'AppBundle\\Form\\Type\\ArticleContentType',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                    ),
                ),
                'app.avatar' => array(
                    'classes' => array(
                        'model' => 'AppBundle\\Entity\\Avatar',
                        'form' => 'AppBundle\\Form\\Type\\AvatarType',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                    ),
                    'driver' => 'doctrine/orm',
                ),
                'app.block' => array(
                    'classes' => array(
                        'model' => 'AppBundle\\Entity\\Block',
                        'form' => 'AppBundle\\Form\\Type\\BlockType',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                    ),
                    'driver' => 'doctrine/orm',
                ),
                'app.block_image' => array(
                    'classes' => array(
                        'model' => 'AppBundle\\Entity\\BlockImage',
                        'form' => 'AppBundle\\Form\\Type\\BlockImageType',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                    ),
                    'driver' => 'doctrine/orm',
                ),
                'app.blockquote_block' => array(
                    'driver' => 'doctrine/phpcr-odm',
                    'classes' => array(
                        'model' => 'AppBundle\\Document\\BlockquoteBlock',
                        'factory' => 'AppBundle\\Factory\\BlockquoteFactory',
                        'repository' => 'Sylius\\Bundle\\ResourceBundle\\Doctrine\\ODM\\PHPCR\\DocumentRepository',
                        'form' => 'AppBundle\\Form\\Type\\BlockquoteBlockType',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                    ),
                ),
                'app.contact_request' => array(
                    'classes' => array(
                        'model' => 'AppBundle\\Entity\\ContactRequest',
                        'factory' => 'AppBundle\\Factory\\ContactRequestFactory',
                        'repository' => 'AppBundle\\Repository\\ContactRequestRepository',
                        'form' => 'AppBundle\\Form\\Type\\ContactRequestType',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                    ),
                    'driver' => 'doctrine/orm',
                ),
                'app.dealer' => array(
                    'classes' => array(
                        'model' => 'AppBundle\\Entity\\Dealer',
                        'repository' => 'AppBundle\\Repository\\DealerRepository',
                        'form' => 'AppBundle\\Form\\Type\\DealerType',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                    ),
                    'driver' => 'doctrine/orm',
                ),
                'app.dealer_image' => array(
                    'classes' => array(
                        'model' => 'AppBundle\\Entity\\DealerImage',
                        'form' => 'AppBundle\\Form\\Type\\DealerImageType',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                    ),
                    'driver' => 'doctrine/orm',
                ),
                'app.dealer_price' => array(
                    'classes' => array(
                        'model' => 'AppBundle\\Entity\\DealerPrice',
                        'repository' => 'AppBundle\\Repository\\DealerPriceRepository',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                    ),
                    'driver' => 'doctrine/orm',
                ),
                'app.left_image_block' => array(
                    'driver' => 'doctrine/phpcr-odm',
                    'classes' => array(
                        'model' => 'AppBundle\\Document\\LeftImageBlock',
                        'factory' => 'AppBundle\\Factory\\SingleImageBlockFactory',
                        'repository' => 'Sylius\\Bundle\\ResourceBundle\\Doctrine\\ODM\\PHPCR\\DocumentRepository',
                        'form' => 'AppBundle\\Form\\Type\\SingleImageBlock\\LeftImageBlockType',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                    ),
                ),
                'app.not_found_page' => array(
                    'classes' => array(
                        'model' => 'AppBundle\\Entity\\NotFound',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                    ),
                    'driver' => 'doctrine/orm',
                ),
                'app.person' => array(
                    'classes' => array(
                        'model' => 'AppBundle\\Entity\\Person',
                        'repository' => 'AppBundle\\Repository\\PersonRepository',
                        'controller' => 'AppBundle\\Controller\\PersonController',
                        'form' => 'AppBundle\\Form\\Type\\PersonType',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                    ),
                    'driver' => 'doctrine/orm',
                ),
                'app.person_image' => array(
                    'classes' => array(
                        'model' => 'AppBundle\\Entity\\PersonImage',
                        'form' => 'AppBundle\\Form\\Type\\PersonImageType',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                    ),
                    'driver' => 'doctrine/orm',
                ),
                'app.product_barcode' => array(
                    'classes' => array(
                        'model' => 'AppBundle\\Entity\\ProductBarcode',
                        'form' => 'AppBundle\\Form\\Type\\ProductBarcodeType',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                    ),
                    'driver' => 'doctrine/orm',
                ),
                'app.product_list' => array(
                    'classes' => array(
                        'model' => 'AppBundle\\Entity\\ProductList',
                        'factory' => 'AppBundle\\Factory\\ProductListFactory',
                        'repository' => 'AppBundle\\Repository\\ProductListRepository',
                        'controller' => 'AppBundle\\Controller\\ProductListController',
                        'form' => 'AppBundle\\Form\\Type\\ProductListType',
                    ),
                    'driver' => 'doctrine/orm',
                ),
                'app.product_list_item' => array(
                    'classes' => array(
                        'model' => 'AppBundle\\Entity\\ProductListItem',
                        'repository' => 'AppBundle\\Repository\\ProductListItemRepository',
                        'controller' => 'AppBundle\\Controller\\ProductListItemController',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                    ),
                    'driver' => 'doctrine/orm',
                ),
                'app.pub_banner' => array(
                    'classes' => array(
                        'model' => 'AppBundle\\Entity\\PubBanner',
                        'form' => 'AppBundle\\Form\\Type\\PubBannerType',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                    ),
                    'driver' => 'doctrine/orm',
                ),
                'app.redirection' => array(
                    'classes' => array(
                        'model' => 'AppBundle\\Entity\\Redirection',
                        'form' => 'AppBundle\\Form\\Type\\RedirectionType',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                    ),
                    'driver' => 'doctrine/orm',
                ),
                'app.right_image_block' => array(
                    'driver' => 'doctrine/phpcr-odm',
                    'classes' => array(
                        'model' => 'AppBundle\\Document\\RightImageBlock',
                        'factory' => 'AppBundle\\Factory\\SingleImageBlockFactory',
                        'repository' => 'Sylius\\Bundle\\ResourceBundle\\Doctrine\\ODM\\PHPCR\\DocumentRepository',
                        'form' => 'AppBundle\\Form\\Type\\SingleImageBlock\\RightImageBlockType',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                    ),
                ),
                'app.single_image_block' => array(
                    'driver' => 'doctrine/phpcr-odm',
                    'classes' => array(
                        'model' => 'AppBundle\\Document\\SingleImageBlock',
                        'factory' => 'AppBundle\\Factory\\SingleImageBlockFactory',
                        'repository' => 'Sylius\\Bundle\\ResourceBundle\\Doctrine\\ODM\\PHPCR\\DocumentRepository',
                        'form' => 'AppBundle\\Form\\Type\\SingleImageBlockType',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                    ),
                ),
                'app.slide_show_block' => array(
                    'classes' => array(
                        'model' => 'AppBundle\\Entity\\SlideShowBlock',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                    ),
                    'driver' => 'doctrine/orm',
                ),
                'app.string_block' => array(
                    'driver' => 'doctrine/phpcr-odm',
                    'classes' => array(
                        'model' => 'AppBundle\\Document\\StringBlock',
                        'factory' => 'AppBundle\\Factory\\StringBlockFactory',
                        'repository' => 'AppBundle\\Repository\\StringBlockRepository',
                        'form' => 'AppBundle\\Form\\Type\\StringBlockType',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                    ),
                ),
                'app.top_image_block' => array(
                    'driver' => 'doctrine/phpcr-odm',
                    'classes' => array(
                        'model' => 'AppBundle\\Document\\TopImageBlock',
                        'factory' => 'AppBundle\\Factory\\SingleImageBlockFactory',
                        'repository' => 'Sylius\\Bundle\\ResourceBundle\\Doctrine\\ODM\\PHPCR\\DocumentRepository',
                        'form' => 'AppBundle\\Form\\Type\\SingleImageBlock\\TopImageBlockType',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                    ),
                ),
                'app.game_play' => array(
                    'classes' => array(
                        'model' => 'AppBundle\\Entity\\GamePlay',
                        'factory' => 'AppBundle\\Factory\\GamePlayFactory',
                        'repository' => 'AppBundle\\Repository\\GamePlayRepository',
                        'form' => 'AppBundle\\Form\\Type\\GamePlayType',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                    ),
                    'driver' => 'doctrine/orm',
                ),
                'app.game_play_image' => array(
                    'classes' => array(
                        'model' => 'AppBundle\\Entity\\GamePlayImage',
                        'form' => 'AppBundle\\Form\\Type\\GamePlayImageType',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                    ),
                    'driver' => 'doctrine/orm',
                ),
                'app.player' => array(
                    'classes' => array(
                        'model' => 'AppBundle\\Entity\\Player',
                        'form' => 'AppBundle\\Form\\Type\\PlayerType',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                    ),
                    'driver' => 'doctrine/orm',
                ),
                'app.price_list' => array(
                    'classes' => array(
                        'model' => 'AppBundle\\Entity\\PriceList',
                        'form' => 'AppBundle\\Form\\Type\\PriceListType',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                    ),
                    'driver' => 'doctrine/orm',
                ),
                'app.notification' => array(
                    'classes' => array(
                        'model' => 'AppBundle\\Entity\\Notification',
                        'factory' => 'AppBundle\\Factory\\NotificationFactory',
                        'controller' => 'AppBundle\\Controller\\NotificationController',
                    ),
                    'driver' => 'doctrine/orm',
                ),
                'app.topic' => array(
                    'classes' => array(
                        'model' => 'AppBundle\\Entity\\Topic',
                        'factory' => 'AppBundle\\Factory\\TopicFactory',
                        'controller' => 'AppBundle\\Controller\\TopicController',
                        'repository' => 'AppBundle\\Repository\\TopicRepository',
                        'form' => 'AppBundle\\Form\\Type\\TopicType',
                    ),
                    'driver' => 'doctrine/orm',
                ),
                'app.post' => array(
                    'classes' => array(
                        'model' => 'AppBundle\\Entity\\Post',
                        'factory' => 'AppBundle\\Factory\\PostFactory',
                        'repository' => 'AppBundle\\Repository\\PostRepository',
                        'controller' => 'AppBundle\\Controller\\PostController',
                        'form' => 'AppBundle\\Form\\Type\\PostType',
                    ),
                    'driver' => 'doctrine/orm',
                ),
                'app.product_variant_image' => array(
                    'classes' => array(
                        'model' => 'AppBundle\\Entity\\ProductVariantImage',
                        'form' => 'AppBundle\\Form\\Type\\ProductVariantImageType',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                    ),
                    'driver' => 'doctrine/orm',
                ),
                'app.well_image_block' => array(
                    'driver' => 'doctrine/phpcr-odm',
                    'classes' => array(
                        'model' => 'AppBundle\\Document\\WellImageBlock',
                        'factory' => 'AppBundle\\Factory\\SingleImageBlockFactory',
                        'repository' => 'Sylius\\Bundle\\ResourceBundle\\Doctrine\\ODM\\PHPCR\\DocumentRepository',
                        'form' => 'AppBundle\\Form\\Type\\SingleImageBlock\\WellImageBlockType',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                    ),
                ),
                'sylius.product_attribute' => array(
                    'driver' => 'doctrine/orm',
                    'classes' => array(
                        'model' => 'Sylius\\Component\\Product\\Model\\ProductAttribute',
                        'interface' => 'Sylius\\Component\\Product\\Model\\ProductAttributeInterface',
                        'controller' => 'Sylius\\Bundle\\ProductBundle\\Controller\\ProductAttributeController',
                        'form' => 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductAttributeType',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\TranslatableFactory',
                    ),
                    'translation' => array(
                        'classes' => array(
                            'model' => 'Sylius\\Component\\Product\\Model\\ProductAttributeTranslation',
                            'interface' => 'Sylius\\Component\\Product\\Model\\ProductAttributeTranslationInterface',
                            'form' => 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductAttributeTranslationType',
                            'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                            'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                        ),
                    ),
                ),
                'sylius.product_attribute_translation' => array(
                    'driver' => 'doctrine/orm',
                    'classes' => array(
                        'model' => 'Sylius\\Component\\Product\\Model\\ProductAttributeTranslation',
                        'interface' => 'Sylius\\Component\\Product\\Model\\ProductAttributeTranslationInterface',
                        'form' => 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductAttributeTranslationType',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                    ),
                ),
                'sylius.product_attribute_value' => array(
                    'driver' => 'doctrine/orm',
                    'classes' => array(
                        'model' => 'Sylius\\Component\\Product\\Model\\ProductAttributeValue',
                        'interface' => 'Sylius\\Component\\Product\\Model\\ProductAttributeValueInterface',
                        'form' => 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductAttributeValueType',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                    ),
                ),
                'sylius.taxon' => array(
                    'driver' => 'doctrine/orm',
                    'classes' => array(
                        'model' => 'AppBundle\\Entity\\Taxon',
                        'repository' => 'AppBundle\\Repository\\TaxonRepository',
                        'controller' => 'AppBundle\\Controller\\TaxonController',
                        'form' => 'AppBundle\\Form\\Type\\TaxonType',
                        'interface' => 'Sylius\\Component\\Taxonomy\\Model\\TaxonInterface',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\TranslatableFactory',
                    ),
                    'translation' => array(
                        'classes' => array(
                            'model' => 'AppBundle\\Entity\\TaxonTranslation',
                            'interface' => 'Sylius\\Component\\Taxonomy\\Model\\TaxonTranslationInterface',
                            'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                            'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                            'form' => 'Sylius\\Bundle\\TaxonomyBundle\\Form\\Type\\TaxonTranslationType',
                        ),
                    ),
                ),
                'sylius.taxon_translation' => array(
                    'driver' => 'doctrine/orm',
                    'classes' => array(
                        'model' => 'AppBundle\\Entity\\TaxonTranslation',
                        'interface' => 'Sylius\\Component\\Taxonomy\\Model\\TaxonTranslationInterface',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                        'form' => 'Sylius\\Bundle\\TaxonomyBundle\\Form\\Type\\TaxonTranslationType',
                    ),
                ),
            ),
            'sylius.model.locale.class' => 'Sylius\\Component\\Locale\\Model\\Locale',
            'sylius.controller.locale.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'sylius.factory.locale.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'sylius_locale.locale' => 'fr_FR',
            'sylius.repository.product_attribute.class' => 'Sylius\\Bundle\\AttributeBundle\\Doctrine\\ORM\\AttributeRepository',
            'sylius.repository.product_option.class' => 'Sylius\\Bundle\\ProductBundle\\Doctrine\\ORM\\ProductOptionRepository',
            'sylius_product.driver.doctrine/orm' => true,
            'sylius_product.driver' => 'doctrine/orm',
            'sylius.model.product.class' => 'AppBundle\\Entity\\Product',
            'sylius.controller.product.class' => 'AppBundle\\Controller\\ProductController',
            'sylius.factory.product.class' => 'AppBundle\\Factory\\ProductFactory',
            'sylius.repository.product.class' => 'AppBundle\\Repository\\ProductRepository',
            'sylius.model.product_translation.class' => 'AppBundle\\Entity\\ProductTranslation',
            'sylius.controller.product_translation.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'sylius.factory.product_translation.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'sylius.model.product_variant.class' => 'AppBundle\\Entity\\ProductVariant',
            'sylius.controller.product_variant.class' => 'AppBundle\\Controller\\ProductVariantController',
            'sylius.factory.product_variant.class' => 'Sylius\\Component\\Product\\Factory\\ProductVariantFactory',
            'sylius.repository.product_variant.class' => 'AppBundle\\Repository\\ProductVariantRepository',
            'sylius.model.product_option.class' => 'Sylius\\Component\\Product\\Model\\ProductOption',
            'sylius.controller.product_option.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'sylius.factory.product_option.class' => 'Sylius\\Component\\Resource\\Factory\\TranslatableFactory',
            'sylius.model.product_option_translation.class' => 'Sylius\\Component\\Product\\Model\\ProductOptionTranslation',
            'sylius.controller.product_option_translation.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'sylius.factory.product_option_translation.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'sylius.model.product_option_value.class' => 'Sylius\\Component\\Product\\Model\\ProductOptionValue',
            'sylius.controller.product_option_value.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'sylius.factory.product_option_value.class' => 'Sylius\\Component\\Resource\\Factory\\TranslatableFactory',
            'sylius.model.product_option_value_translation.class' => 'Sylius\\Component\\Product\\Model\\ProductOptionValueTranslation',
            'sylius.controller.product_option_value_translation.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'sylius.factory.product_option_value_translation.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'sylius.model.product_association.class' => 'Sylius\\Component\\Product\\Model\\ProductAssociation',
            'sylius.controller.product_association.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'sylius.factory.product_association.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'sylius.model.product_association_type.class' => 'Sylius\\Component\\Product\\Model\\ProductAssociationType',
            'sylius.controller.product_association_type.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'sylius.factory.product_association_type.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'sylius.repository.user.class' => 'Sylius\\Bundle\\UserBundle\\Doctrine\\ORM\\UserRepository',
            'sylius.user.users' => array(
                'shop' => array(
                    'user' => array(
                        'classes' => array(
                            'model' => 'AppBundle\\Entity\\User',
                            'repository' => 'AppBundle\\Repository\\UserRepository',
                            'controller' => 'AppBundle\\Controller\\UserController',
                            'interface' => 'Sylius\\Component\\User\\Model\\UserInterface',
                            'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                        ),
                        'templates' => 'SyliusUserBundle:User',
                        'resetting' => array(
                            'token' => array(
                                'ttl' => 'P1D',
                                'length' => 16,
                                'field_name' => 'passwordResetToken',
                            ),
                            'pin' => array(
                                'length' => 4,
                                'field_name' => 'passwordResetToken',
                            ),
                        ),
                        'verification' => array(
                            'token' => array(
                                'length' => 16,
                                'field_name' => 'emailVerificationToken',
                            ),
                        ),
                    ),
                ),
                'admin_oauth' => array(
                    'user' => array(
                        'classes' => array(
                            'model' => 'Sylius\\Component\\User\\Model\\UserOAuth',
                            'interface' => 'Sylius\\Component\\User\\Model\\UserOAuthInterface',
                            'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                            'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                        ),
                        'templates' => 'SyliusUserBundle:User',
                        'resetting' => array(
                            'token' => array(
                                'ttl' => 'P1D',
                                'length' => 16,
                                'field_name' => 'passwordResetToken',
                            ),
                            'pin' => array(
                                'length' => 4,
                                'field_name' => 'passwordResetToken',
                            ),
                        ),
                        'verification' => array(
                            'token' => array(
                                'length' => 16,
                                'field_name' => 'emailVerificationToken',
                            ),
                        ),
                    ),
                ),
            ),
            'sylius_user.driver.doctrine/orm' => true,
            'sylius_user.driver' => 'doctrine/orm',
            'sylius.model.shop_user.class' => 'AppBundle\\Entity\\User',
            'sylius.controller.shop_user.class' => 'AppBundle\\Controller\\UserController',
            'sylius.factory.shop_user.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'sylius.repository.shop_user.class' => 'AppBundle\\Repository\\UserRepository',
            'sylius.model.admin_oauth_user.class' => 'Sylius\\Component\\User\\Model\\UserOAuth',
            'sylius.controller.admin_oauth_user.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'sylius.factory.admin_oauth_user.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'sylius_customer.driver.doctrine/orm' => true,
            'sylius_customer.driver' => 'doctrine/orm',
            'sylius.model.customer.class' => 'AppBundle\\Entity\\Customer',
            'sylius.controller.customer.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'sylius.factory.customer.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'sylius.repository.customer.class' => 'AppBundle\\Repository\\CustomerRepository',
            'sylius.model.customer_group.class' => 'Sylius\\Component\\Customer\\Model\\CustomerGroup',
            'sylius.controller.customer_group.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'sylius.factory.customer_group.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'sylius.mailer.sender_name' => 'Contact Jedisjeux',
            'sylius.mailer.sender_address' => 'no-reply@jedisjeux.net',
            'sylius.mailer.emails' => array(
                'reset_password_token' => array(
                    'subject' => 'sylius.emails.user.password_reset.subject',
                    'template' => 'emails/passwordReset.html.twig',
                    'enabled' => true,
                ),
                'user_registration' => array(
                    'subject' => 'Bienvenue sur Cyclocom',
                    'template' => 'emails/userRegistration.html.twig',
                    'enabled' => true,
                ),
                'website_release' => array(
                    'subject' => 'Nouveau Jedisjeux en ligne',
                    'template' => 'emails/websiteRelease.html.twig',
                    'enabled' => true,
                ),
                'contact_request' => array(
                    'subject' => 'Nouveau message de contact Jedisjeux',
                    'template' => 'emails/contactRequest.html.twig',
                    'enabled' => true,
                ),
                'verification_token' => array(
                    'subject' => 'emails.verification_token.subject',
                    'template' => 'emails/verification.html.twig',
                    'enabled' => true,
                ),
            ),
            'sylius.mailer.templates' => array(

            ),
            'sylius.review.subjects' => array(
                'product' => array(
                    'subject' => 'AppBundle\\Entity\\Product',
                    'reviewer' => array(
                        'classes' => array(
                            'model' => 'AppBundle\\Entity\\Customer',
                            'interface' => 'Sylius\\Component\\Review\\Model\\ReviewerInterface',
                            'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                        ),
                    ),
                    'review' => array(
                        'classes' => array(
                            'model' => 'AppBundle\\Entity\\ProductReview',
                            'repository' => 'AppBundle\\Repository\\ProductReviewRepository',
                            'controller' => 'AppBundle\\Controller\\ProductReviewController',
                            'form' => 'AppBundle\\Form\\Type\\ProductReviewType',
                            'interface' => 'Sylius\\Component\\Review\\Model\\ReviewInterface',
                            'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                        ),
                    ),
                ),
            ),
            'sylius_review.driver.doctrine/orm' => true,
            'sylius_review.driver' => 'doctrine/orm',
            'sylius.model.product_reviewer.class' => 'AppBundle\\Entity\\Customer',
            'sylius.factory.product_reviewer.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'sylius.model.product_review.class' => 'AppBundle\\Entity\\ProductReview',
            'sylius.controller.product_review.class' => 'AppBundle\\Controller\\ProductReviewController',
            'sylius.factory.product_review.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'sylius.repository.product_review.class' => 'AppBundle\\Repository\\ProductReviewRepository',
            'sylius.state_machine.class' => 'Sylius\\Component\\Resource\\StateMachine\\StateMachine',
            'sylius.resource.settings' => array(
                'paginate' => NULL,
                'limit' => NULL,
                'allowed_paginate' => array(
                    0 => 10,
                    1 => 20,
                    2 => 30,
                ),
                'default_page_size' => 10,
                'sortable' => false,
                'sorting' => NULL,
                'filterable' => false,
                'criteria' => NULL,
            ),
            'sylius.orm.repository.class' => 'Sylius\\Bundle\\ResourceBundle\\Doctrine\\ORM\\EntityRepository',
            'sylius.translation.translatable_listener.doctrine.orm.class' => 'Sylius\\Bundle\\ResourceBundle\\EventListener\\ORMTranslatableListener',
            'sylius.phpcr_odm.repository.class' => 'Sylius\\Bundle\\ResourceBundle\\Doctrine\\ODM\\PHPCR\\DocumentRepository',
            'app.model.article.class' => 'AppBundle\\Entity\\Article',
            'app.controller.article.class' => 'AppBundle\\Controller\\ArticleController',
            'app.factory.article.class' => 'AppBundle\\Factory\\ArticleFactory',
            'app.repository.article.class' => 'AppBundle\\Repository\\ArticleRepository',
            'app.model.article_image.class' => 'AppBundle\\Entity\\ArticleImage',
            'app.controller.article_image.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'app.factory.article_image.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'app.model.article_review.class' => 'AppBundle\\Entity\\ArticleReview',
            'app.controller.article_review.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'app.factory.article_review.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'app.model.article_content.class' => 'AppBundle\\Document\\ArticleContent',
            'app.controller.article_content.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'app.factory.article_content.class' => 'AppBundle\\Factory\\ArticleContentFactory',
            'app.repository.article_content.class' => 'Sylius\\Bundle\\ResourceBundle\\Doctrine\\ODM\\PHPCR\\DocumentRepository',
            'app.model.avatar.class' => 'AppBundle\\Entity\\Avatar',
            'app.controller.avatar.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'app.factory.avatar.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'app.model.block.class' => 'AppBundle\\Entity\\Block',
            'app.controller.block.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'app.factory.block.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'app.model.block_image.class' => 'AppBundle\\Entity\\BlockImage',
            'app.controller.block_image.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'app.factory.block_image.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'app.model.blockquote_block.class' => 'AppBundle\\Document\\BlockquoteBlock',
            'app.controller.blockquote_block.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'app.factory.blockquote_block.class' => 'AppBundle\\Factory\\BlockquoteFactory',
            'app.repository.blockquote_block.class' => 'Sylius\\Bundle\\ResourceBundle\\Doctrine\\ODM\\PHPCR\\DocumentRepository',
            'app.model.contact_request.class' => 'AppBundle\\Entity\\ContactRequest',
            'app.controller.contact_request.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'app.factory.contact_request.class' => 'AppBundle\\Factory\\ContactRequestFactory',
            'app.repository.contact_request.class' => 'AppBundle\\Repository\\ContactRequestRepository',
            'app.model.dealer.class' => 'AppBundle\\Entity\\Dealer',
            'app.controller.dealer.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'app.factory.dealer.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'app.repository.dealer.class' => 'AppBundle\\Repository\\DealerRepository',
            'app.model.dealer_image.class' => 'AppBundle\\Entity\\DealerImage',
            'app.controller.dealer_image.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'app.factory.dealer_image.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'app.model.dealer_price.class' => 'AppBundle\\Entity\\DealerPrice',
            'app.controller.dealer_price.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'app.factory.dealer_price.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'app.repository.dealer_price.class' => 'AppBundle\\Repository\\DealerPriceRepository',
            'app.model.left_image_block.class' => 'AppBundle\\Document\\LeftImageBlock',
            'app.controller.left_image_block.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'app.factory.left_image_block.class' => 'AppBundle\\Factory\\SingleImageBlockFactory',
            'app.repository.left_image_block.class' => 'Sylius\\Bundle\\ResourceBundle\\Doctrine\\ODM\\PHPCR\\DocumentRepository',
            'app.model.not_found_page.class' => 'AppBundle\\Entity\\NotFound',
            'app.controller.not_found_page.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'app.factory.not_found_page.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'app.model.person.class' => 'AppBundle\\Entity\\Person',
            'app.controller.person.class' => 'AppBundle\\Controller\\PersonController',
            'app.factory.person.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'app.repository.person.class' => 'AppBundle\\Repository\\PersonRepository',
            'app.model.person_image.class' => 'AppBundle\\Entity\\PersonImage',
            'app.controller.person_image.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'app.factory.person_image.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'app.model.product_barcode.class' => 'AppBundle\\Entity\\ProductBarcode',
            'app.controller.product_barcode.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'app.factory.product_barcode.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'app.model.product_list.class' => 'AppBundle\\Entity\\ProductList',
            'app.controller.product_list.class' => 'AppBundle\\Controller\\ProductListController',
            'app.factory.product_list.class' => 'AppBundle\\Factory\\ProductListFactory',
            'app.repository.product_list.class' => 'AppBundle\\Repository\\ProductListRepository',
            'app.model.product_list_item.class' => 'AppBundle\\Entity\\ProductListItem',
            'app.controller.product_list_item.class' => 'AppBundle\\Controller\\ProductListItemController',
            'app.factory.product_list_item.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'app.repository.product_list_item.class' => 'AppBundle\\Repository\\ProductListItemRepository',
            'app.model.pub_banner.class' => 'AppBundle\\Entity\\PubBanner',
            'app.controller.pub_banner.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'app.factory.pub_banner.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'app.model.redirection.class' => 'AppBundle\\Entity\\Redirection',
            'app.controller.redirection.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'app.factory.redirection.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'app.model.right_image_block.class' => 'AppBundle\\Document\\RightImageBlock',
            'app.controller.right_image_block.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'app.factory.right_image_block.class' => 'AppBundle\\Factory\\SingleImageBlockFactory',
            'app.repository.right_image_block.class' => 'Sylius\\Bundle\\ResourceBundle\\Doctrine\\ODM\\PHPCR\\DocumentRepository',
            'app.model.single_image_block.class' => 'AppBundle\\Document\\SingleImageBlock',
            'app.controller.single_image_block.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'app.factory.single_image_block.class' => 'AppBundle\\Factory\\SingleImageBlockFactory',
            'app.repository.single_image_block.class' => 'Sylius\\Bundle\\ResourceBundle\\Doctrine\\ODM\\PHPCR\\DocumentRepository',
            'app.model.slide_show_block.class' => 'AppBundle\\Entity\\SlideShowBlock',
            'app.controller.slide_show_block.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'app.factory.slide_show_block.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'app.model.string_block.class' => 'AppBundle\\Document\\StringBlock',
            'app.controller.string_block.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'app.factory.string_block.class' => 'AppBundle\\Factory\\StringBlockFactory',
            'app.repository.string_block.class' => 'AppBundle\\Repository\\StringBlockRepository',
            'app.model.top_image_block.class' => 'AppBundle\\Document\\TopImageBlock',
            'app.controller.top_image_block.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'app.factory.top_image_block.class' => 'AppBundle\\Factory\\SingleImageBlockFactory',
            'app.repository.top_image_block.class' => 'Sylius\\Bundle\\ResourceBundle\\Doctrine\\ODM\\PHPCR\\DocumentRepository',
            'app.model.game_play.class' => 'AppBundle\\Entity\\GamePlay',
            'app.controller.game_play.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'app.factory.game_play.class' => 'AppBundle\\Factory\\GamePlayFactory',
            'app.repository.game_play.class' => 'AppBundle\\Repository\\GamePlayRepository',
            'app.model.game_play_image.class' => 'AppBundle\\Entity\\GamePlayImage',
            'app.controller.game_play_image.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'app.factory.game_play_image.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'app.model.player.class' => 'AppBundle\\Entity\\Player',
            'app.controller.player.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'app.factory.player.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'app.model.price_list.class' => 'AppBundle\\Entity\\PriceList',
            'app.controller.price_list.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'app.factory.price_list.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'app.model.notification.class' => 'AppBundle\\Entity\\Notification',
            'app.controller.notification.class' => 'AppBundle\\Controller\\NotificationController',
            'app.factory.notification.class' => 'AppBundle\\Factory\\NotificationFactory',
            'app.model.topic.class' => 'AppBundle\\Entity\\Topic',
            'app.controller.topic.class' => 'AppBundle\\Controller\\TopicController',
            'app.factory.topic.class' => 'AppBundle\\Factory\\TopicFactory',
            'app.repository.topic.class' => 'AppBundle\\Repository\\TopicRepository',
            'app.model.post.class' => 'AppBundle\\Entity\\Post',
            'app.controller.post.class' => 'AppBundle\\Controller\\PostController',
            'app.factory.post.class' => 'AppBundle\\Factory\\PostFactory',
            'app.repository.post.class' => 'AppBundle\\Repository\\PostRepository',
            'app.model.product_variant_image.class' => 'AppBundle\\Entity\\ProductVariantImage',
            'app.controller.product_variant_image.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'app.factory.product_variant_image.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'app.model.well_image_block.class' => 'AppBundle\\Document\\WellImageBlock',
            'app.controller.well_image_block.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'app.factory.well_image_block.class' => 'AppBundle\\Factory\\SingleImageBlockFactory',
            'app.repository.well_image_block.class' => 'Sylius\\Bundle\\ResourceBundle\\Doctrine\\ODM\\PHPCR\\DocumentRepository',
            'sylius.model.attribute.interface' => 'Sylius\\Component\\Attribute\\AttributeType\\AttributeTypeInterface',
            'sylius.attribute.subjects' => array(
                'product' => array(
                    'subject' => 'AppBundle\\Entity\\Product',
                    'attribute' => array(
                        'classes' => array(
                            'model' => 'Sylius\\Component\\Product\\Model\\ProductAttribute',
                            'interface' => 'Sylius\\Component\\Product\\Model\\ProductAttributeInterface',
                            'controller' => 'Sylius\\Bundle\\ProductBundle\\Controller\\ProductAttributeController',
                            'form' => 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductAttributeType',
                            'factory' => 'Sylius\\Component\\Resource\\Factory\\TranslatableFactory',
                        ),
                        'translation' => array(
                            'classes' => array(
                                'model' => 'Sylius\\Component\\Product\\Model\\ProductAttributeTranslation',
                                'interface' => 'Sylius\\Component\\Product\\Model\\ProductAttributeTranslationInterface',
                                'form' => 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductAttributeTranslationType',
                                'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                                'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                            ),
                        ),
                    ),
                    'attribute_value' => array(
                        'classes' => array(
                            'model' => 'Sylius\\Component\\Product\\Model\\ProductAttributeValue',
                            'interface' => 'Sylius\\Component\\Product\\Model\\ProductAttributeValueInterface',
                            'form' => 'Sylius\\Bundle\\ProductBundle\\Form\\Type\\ProductAttributeValueType',
                            'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                            'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                        ),
                    ),
                ),
            ),
            'sylius_attribute.driver.doctrine/orm' => true,
            'sylius_attribute.driver' => 'doctrine/orm',
            'sylius.model.product_attribute.class' => 'Sylius\\Component\\Product\\Model\\ProductAttribute',
            'sylius.controller.product_attribute.class' => 'Sylius\\Bundle\\ProductBundle\\Controller\\ProductAttributeController',
            'sylius.factory.product_attribute.class' => 'Sylius\\Component\\Resource\\Factory\\TranslatableFactory',
            'sylius.model.product_attribute_translation.class' => 'Sylius\\Component\\Product\\Model\\ProductAttributeTranslation',
            'sylius.controller.product_attribute_translation.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'sylius.factory.product_attribute_translation.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'sylius.model.product_attribute_value.class' => 'Sylius\\Component\\Product\\Model\\ProductAttributeValue',
            'sylius.controller.product_attribute_value.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'sylius.factory.product_attribute_value.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'sylius.repository.taxon.class' => 'AppBundle\\Repository\\TaxonRepository',
            'sylius_taxonomy.driver.doctrine/orm' => true,
            'sylius_taxonomy.driver' => 'doctrine/orm',
            'sylius.model.taxon.class' => 'AppBundle\\Entity\\Taxon',
            'sylius.controller.taxon.class' => 'AppBundle\\Controller\\TaxonController',
            'sylius.factory.taxon.class' => 'Sylius\\Component\\Resource\\Factory\\TranslatableFactory',
            'sylius.model.taxon_translation.class' => 'AppBundle\\Entity\\TaxonTranslation',
            'sylius.controller.taxon_translation.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'sylius.factory.taxon_translation.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'sm.configs' => array(
                'app_article' => array(
                    'class' => 'AppBundle\\Entity\\Article',
                    'property_path' => 'status',
                    'graph' => 'app_article',
                    'state_machine_class' => 'Sylius\\Component\\Resource\\StateMachine\\StateMachine',
                    'states' => array(
                        0 => 'new',
                        1 => 'pending_review',
                        2 => 'pending_publication',
                        3 => 'published',
                    ),
                    'transitions' => array(
                        'ask_for_review' => array(
                            'from' => array(
                                0 => 'new',
                            ),
                            'to' => 'pending_review',
                        ),
                        'ask_for_publication' => array(
                            'from' => array(
                                0 => 'pending_review',
                            ),
                            'to' => 'pending_publication',
                        ),
                        'publish' => array(
                            'from' => array(
                                0 => 'pending_publication',
                            ),
                            'to' => 'published',
                        ),
                    ),
                    'callbacks' => array(
                        'after' => array(
                            'notify_reviewers' => array(
                                'on' => 'ask_for_review',
                                'do' => array(
                                    0 => '@app.notification_manager.article',
                                    1 => 'notifyReviewers',
                                ),
                                'args' => array(
                                    0 => 'object',
                                ),
                                'disabled' => false,
                                'priority' => 0,
                            ),
                            'notify_publishers' => array(
                                'on' => 'ask_for_publication',
                                'do' => array(
                                    0 => '@app.notification_manager.article',
                                    1 => 'notifyPublishers',
                                ),
                                'args' => array(
                                    0 => 'object',
                                ),
                                'disabled' => false,
                                'priority' => 0,
                            ),
                            'start' => array(
                                'on' => 'publish',
                                'do' => array(
                                    0 => '@app.publication_manager.article',
                                    1 => 'start',
                                ),
                                'args' => array(
                                    0 => 'object',
                                ),
                                'disabled' => false,
                                'priority' => 0,
                            ),
                        ),
                        'guard' => array(

                        ),
                        'before' => array(

                        ),
                    ),
                ),
                'sylius_product' => array(
                    'class' => 'AppBundle\\Entity\\Product',
                    'property_path' => 'status',
                    'graph' => 'sylius_product',
                    'state_machine_class' => 'Sylius\\Component\\Resource\\StateMachine\\StateMachine',
                    'states' => array(
                        0 => 'new',
                        1 => 'pending_translation',
                        2 => 'pending_translation_changes',
                        3 => 'pending_review',
                        4 => 'pending_publication',
                        5 => 'published',
                    ),
                    'transitions' => array(
                        'ask_for_translation' => array(
                            'from' => array(
                                0 => 'new',
                            ),
                            'to' => 'pending_translation',
                        ),
                        'ask_for_review' => array(
                            'from' => array(
                                0 => 'new',
                                1 => 'pending_translation',
                                2 => 'pending_translation_changes',
                            ),
                            'to' => 'pending_review',
                        ),
                        'ask_for_translation_changes' => array(
                            'from' => array(
                                0 => 'pending_review',
                            ),
                            'to' => 'pending_translation_changes',
                        ),
                        'ask_for_publication' => array(
                            'from' => array(
                                0 => 'pending_review',
                            ),
                            'to' => 'pending_publication',
                        ),
                        'publish' => array(
                            'from' => array(
                                0 => 'pending_publication',
                            ),
                            'to' => 'published',
                        ),
                    ),
                    'callbacks' => array(
                        'after' => array(
                            'notify_translators' => array(
                                'on' => 'ask_for_translation',
                                'do' => array(
                                    0 => '@app.notification_manager.product',
                                    1 => 'notifyTranslators',
                                ),
                                'args' => array(
                                    0 => 'object',
                                ),
                                'disabled' => false,
                                'priority' => 0,
                            ),
                            'notify_reviewers' => array(
                                'on' => 'ask_for_review',
                                'do' => array(
                                    0 => '@app.notification_manager.product',
                                    1 => 'notifyReviewers',
                                ),
                                'args' => array(
                                    0 => 'object',
                                ),
                                'disabled' => false,
                                'priority' => 0,
                            ),
                            'notify_publishers' => array(
                                'on' => 'ask_for_publication',
                                'do' => array(
                                    0 => '@app.notification_manager.product',
                                    1 => 'notifyPublishers',
                                ),
                                'args' => array(
                                    0 => 'object',
                                ),
                                'disabled' => false,
                                'priority' => 0,
                            ),
                        ),
                        'guard' => array(

                        ),
                        'before' => array(

                        ),
                    ),
                ),
            ),
            'sm.factory.class' => 'SM\\Factory\\Factory',
            'sm.callback_factory.class' => 'winzou\\Bundle\\StateMachineBundle\\Callback\\ContainerAwareCallbackFactory',
            'sm.callback.class' => 'winzou\\Bundle\\StateMachineBundle\\Callback\\ContainerAwareCallback',
            'sm.twig_extension.class' => 'SM\\Extension\\Twig\\SMExtension',
            'sm.callback.cascade_transition.class' => 'SM\\Callback\\CascadeTransitionCallback',
            'sonata.block.service.container.class' => 'Sonata\\BlockBundle\\Block\\Service\\ContainerBlockService',
            'sonata.block.service.empty.class' => 'Sonata\\BlockBundle\\Block\\Service\\EmptyBlockService',
            'sonata.block.service.text.class' => 'Sonata\\BlockBundle\\Block\\Service\\TextBlockService',
            'sonata.block.service.rss.class' => 'Sonata\\BlockBundle\\Block\\Service\\RssBlockService',
            'sonata.block.service.menu.class' => 'Sonata\\BlockBundle\\Block\\Service\\MenuBlockService',
            'sonata.block.service.template.class' => 'Sonata\\BlockBundle\\Block\\Service\\TemplateBlockService',
            'sonata.block.exception.strategy.manager.class' => 'Sonata\\BlockBundle\\Exception\\Strategy\\StrategyManager',
            'sonata.block.container.types' => array(
                0 => 'sonata.block.service.container',
                1 => 'sonata.page.block.container',
                2 => 'sonata.dashboard.block.container',
                3 => 'cmf.block.container',
                4 => 'cmf.block.slideshow',
            ),
            'sonata_block.blocks' => array(
                'sonata.block.service.text' => array(
                    'contexts' => array(
                        0 => 'cms',
                    ),
                    'templates' => array(

                    ),
                    'cache' => 'sonata.cache.noop',
                    'settings' => array(

                    ),
                ),
            ),
            'sonata_block.blocks_by_class' => array(
                'Symfony\\Cmf\\Bundle\\BlockBundle\\Doctrine\\Phpcr\\RssBlock' => array(
                    'settings' => array(
                        'title' => 'Insert the rss title',
                        'url' => false,
                        'maxItems' => 10,
                        'template' => 'CmfBlockBundle:Block:block_rss.html.twig',
                        'itemClass' => 'Symfony\\Cmf\\Bundle\\BlockBundle\\Model\\FeedItem',
                    ),
                    'cache' => 'sonata.cache.noop',
                ),
            ),
            'sonata_block.cache_blocks' => array(
                'by_type' => array(
                    'sonata.block.service.text' => 'sonata.cache.noop',
                ),
                'by_class' => array(
                    'Symfony\\Cmf\\Bundle\\BlockBundle\\Doctrine\\Phpcr\\RssBlock' => 'sonata.cache.noop',
                ),
            ),
            'cmf_core.persistence.phpcr.manager_name' => NULL,
            'cmf_core.publish_workflow.view_non_published_role' => 'ROLE_CAN_VIEW_NON_PUBLISHED',
            'cmf_core.phpcr.multilang.locales' => array(

            ),
            'cmf_block.twig.cmf_embed_blocks.prefix' => '%embed-block|',
            'cmf_block.twig.cmf_embed_blocks.postfix' => '|end%',
            'cmf_block.backend_type_phpcr' => true,
            'cmf_block.persistence.phpcr.block_basepath' => '/cms/content',
            'cmf_block.persistence.phpcr.manager_name' => NULL,
            'cmf_media.default_browser' => NULL,
            'cmf_media.browser_file_helper.class' => 'Symfony\\Cmf\\Bundle\\MediaBundle\\File\\BrowserFileHelper',
            'cmf_media.backend_type_phpcr' => true,
            'cmf_media.persistence.phpcr.media.class' => 'Symfony\\Cmf\\Bundle\\MediaBundle\\Doctrine\\Phpcr\\Media',
            'cmf_media.persistence.phpcr.file.class' => 'Symfony\\Cmf\\Bundle\\MediaBundle\\Doctrine\\Phpcr\\File',
            'cmf_media.persistence.phpcr.directory.class' => 'Symfony\\Cmf\\Bundle\\MediaBundle\\Doctrine\\Phpcr\\Directory',
            'cmf_media.persistence.phpcr.image.class' => 'Symfony\\Cmf\\Bundle\\MediaBundle\\Doctrine\\Phpcr\\Image',
            'cmf_media.persistence.phpcr.media_basepath' => '/cms/media',
            'cmf_media.persistence.phpcr.manager_name' => NULL,
            'cmf_media.persistence.phpcr.manager.class' => 'Symfony\\Cmf\\Bundle\\MediaBundle\\Doctrine\\Phpcr\\MediaManager',
            'cmf_media.file_controller.class' => 'Symfony\\Cmf\\Bundle\\MediaBundle\\Controller\\FileController',
            'cmf_media.image_controller.class' => 'Symfony\\Cmf\\Bundle\\MediaBundle\\Controller\\ImageController',
            'cmf_media.templating.helper.class' => 'Symfony\\Cmf\\Bundle\\MediaBundle\\Templating\\Helper\\CmfMediaHelper',
            'cmf_media.twig.extension.class' => 'Symfony\\Cmf\\Bundle\\MediaBundle\\Twig\\Extension\\CmfMediaExtension',
            'cmf_media.persistence.phpcr.upload_file_helper.class' => 'Symfony\\Cmf\\Bundle\\MediaBundle\\File\\UploadFileHelperDoctrine',
            'cmf_media.upload_editor_helper.default.class' => 'Symfony\\Cmf\\Bundle\\MediaBundle\\Editor\\Helper\\UploadDefaultHelper',
            'cmf_media.upload_editor_helper.ckeditor.class' => 'Symfony\\Cmf\\Bundle\\MediaBundle\\Editor\\Helper\\UploadCkeditorHelper',
            'cmf_media.form.file.class' => 'Symfony\\Cmf\\Bundle\\MediaBundle\\Form\\Type\\FileType',
            'cmf_media.form.image.class' => 'Symfony\\Cmf\\Bundle\\MediaBundle\\Form\\Type\\ImageType',
            'cmf_media.persistence.phpcr.subscriber.stream_rewind.class' => 'Symfony\\Cmf\\Bundle\\MediaBundle\\Doctrine\\DoctrineStreamRewindSubscriber',
            'cmf_media.persistence.phpcr.subscriber.image_dimensions.class' => 'Symfony\\Cmf\\Bundle\\MediaBundle\\Doctrine\\DoctrineImageDimensionsSubscriber',
            'cmf_media.liip_imagine.doctrine_phpcr.binary.loader.class' => 'Symfony\\Cmf\\Bundle\\MediaBundle\\Adapter\\LiipImagine\\CmfMediaDoctrineLoader',
            'cmf_media.persistence.phpcr.subscriber.imagine_cache.class' => 'Symfony\\Cmf\\Bundle\\MediaBundle\\Doctrine\\ImagineCacheInvalidatorSubscriber',
            'cmf_media.serializer.handler.class' => 'Symfony\\Cmf\\Bundle\\MediaBundle\\Serializer\\Handler',
            'cmf_media.upload_file_role' => 'ROLE_CAN_UPLOAD_FILE',
            'cmf_media.use_imagine' => true,
            'cmf_media.imagine.filter.upload_thumbnail' => 'image_upload_thumbnail',
            'cmf_media.imagine.filter.elfinder_thumbnail' => 'elfinder_thumbnail',
            'cmf_media.imagine.all_filters' => array(
                'upload_thumbnail' => 'image_upload_thumbnail',
                0 => 'cmf_full',
                1 => 'cmf_thumbnail',
                2 => 'cmf_thumbnail_S',
                3 => 'cmf_block_medium',
                4 => 'cmf_magazine_item',
                5 => 'cmf_magazine_item_wide',
                6 => 'cmf_block',
            ),
            'cmf_routing.uri_filter_regexp' => '',
            'cmf_routing.default_controller' => 'cmf_content.controller:indexAction',
            'cmf_routing.generic_controller' => 'cmf_content.controller:indexAction',
            'cmf_routing.controllers_by_type' => array(

            ),
            'cmf_routing.controllers_by_class' => array(

            ),
            'cmf_routing.templates_by_class' => array(

            ),
            'cmf_routing.route_collection_limit' => 0,
            'cmf_routing.dynamic.limit_candidates' => 20,
            'cmf_routing.dynamic.locales' => array(

            ),
            'cmf_routing.dynamic.auto_locale_pattern' => false,
            'cmf_routing.backend_type_phpcr' => true,
            'cmf_routing.dynamic.persistence.phpcr.route_basepaths' => array(
                0 => '/cms/routes',
            ),
            'cmf_routing.dynamic.persistence.phpcr.manager_name' => NULL,
            'cmf_routing.dynamic.persistence.phpcr.initialized_basepaths' => array(
                0 => '/cms/routes',
            ),
            'cmf_routing.replace_symfony_router' => true,
            'sylius.grid.templates.action' => array(
                'show' => 'backend/grid/action/show.html.twig',
                'create' => 'backend/grid/action/create.html.twig',
                'update' => 'backend/grid/action/update.html.twig',
                'delete' => 'backend/grid/action/delete.html.twig',
                'create_product' => 'backend/product/grid/action/createProduct.html.twig',
                'manage_articles' => 'backend/product/grid/action/manageArticles.html.twig',
                'manage_variants' => 'backend/product/grid/action/manageVariants.html.twig',
                'list_posts' => 'backend/topic/grid/action/posts.html.twig',
                'list_taxons' => 'backend/taxon/grid/action/taxons.html.twig',
                'update_product_variant_positions' => 'backend/product_variant/grid/action/updatePositions.html.twig',
            ),
            'sylius.grid.templates.filter' => array(
                'string' => 'backend/grid/filter/string.html.twig',
                'boolean' => 'backend/grid/filter/boolean.html.twig',
            ),
            'sylius.grids_definitions' => array(
                'app_backend_article' => array(
                    'driver' => array(
                        'name' => 'doctrine/orm',
                        'options' => array(
                            'class' => 'AppBundle\\Entity\\Article',
                        ),
                    ),
                    'sorting' => array(
                        'createdAt' => 'desc',
                    ),
                    'fields' => array(
                        'image' => array(
                            'type' => 'twig',
                            'label' => 'sylius.ui.image',
                            'path' => '.',
                            'options' => array(
                                'template' => 'backend/article/grid/field/image.html.twig',
                            ),
                            'enabled' => true,
                        ),
                        'title' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.title',
                            'sortable' => 'title',
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                        'status' => array(
                            'type' => 'twig',
                            'label' => 'sylius.ui.status',
                            'options' => array(
                                'template' => 'backend/grid/field/state.html.twig',
                                'vars' => array(
                                    'labels' => 'backend/article/label/state',
                                ),
                            ),
                            'enabled' => true,
                        ),
                        'createdAt' => array(
                            'type' => 'twig',
                            'label' => 'app.ui.created_at',
                            'sortable' => 'createdAt',
                            'options' => array(
                                'template' => 'backend/grid/field/date/medium.html.twig',
                            ),
                            'enabled' => true,
                        ),
                    ),
                    'filters' => array(
                        'search' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.search',
                            'options' => array(
                                'fields' => array(
                                    0 => 'title',
                                ),
                            ),
                            'enabled' => true,
                        ),
                    ),
                    'actions' => array(
                        'main' => array(
                            'create' => array(
                                'type' => 'create',
                                'options' => array(

                                ),
                            ),
                        ),
                        'item' => array(
                            'update' => array(
                                'type' => 'update',
                                'options' => array(

                                ),
                            ),
                            'delete' => array(
                                'type' => 'delete',
                                'options' => array(

                                ),
                            ),
                        ),
                    ),
                ),
                'app_backend_contact_request' => array(
                    'driver' => array(
                        'name' => 'doctrine/orm',
                        'options' => array(
                            'class' => 'AppBundle\\Entity\\ContactRequest',
                        ),
                    ),
                    'sorting' => array(
                        'createdAt' => 'desc',
                    ),
                    'fields' => array(
                        'createdAt' => array(
                            'type' => 'twig',
                            'label' => 'sylius.ui.created_at',
                            'sortable' => 'createdAt',
                            'options' => array(
                                'template' => 'backend/grid/field/date/medium.html.twig',
                            ),
                            'enabled' => true,
                        ),
                        'fullName' => array(
                            'type' => 'twig',
                            'label' => 'sylius.ui.name',
                            'path' => 'fullName',
                            'options' => array(
                                'template' => 'backend/grid/field/string.html.twig',
                            ),
                            'enabled' => true,
                        ),
                        'email' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.email',
                            'sortable' => 'email',
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                    ),
                    'filters' => array(
                        'search' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.search',
                            'options' => array(
                                'fields' => array(
                                    0 => 'firstName',
                                    1 => 'lastName',
                                ),
                            ),
                            'enabled' => true,
                        ),
                    ),
                    'actions' => array(
                        'item' => array(
                            'show' => array(
                                'type' => 'show',
                                'options' => array(

                                ),
                            ),
                            'delete' => array(
                                'type' => 'delete',
                                'options' => array(

                                ),
                            ),
                        ),
                    ),
                ),
                'sylius_backend_customer' => array(
                    'driver' => array(
                        'name' => 'doctrine/orm',
                        'options' => array(
                            'class' => 'AppBundle\\Entity\\Customer',
                        ),
                    ),
                    'sorting' => array(
                        'createdAt' => 'desc',
                    ),
                    'fields' => array(
                        'avatar' => array(
                            'type' => 'twig',
                            'label' => 'app.ui.avatar',
                            'path' => '.',
                            'options' => array(
                                'template' => 'backend/customer/grid/field/avatar.html.twig',
                            ),
                            'enabled' => true,
                        ),
                        'email' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.email',
                            'sortable' => 'email',
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                        'createdAt' => array(
                            'type' => 'twig',
                            'label' => 'sylius.ui.registration_date',
                            'sortable' => 'createdAt',
                            'options' => array(
                                'template' => 'backend/grid/field/date/medium.html.twig',
                            ),
                            'enabled' => true,
                        ),
                    ),
                    'filters' => array(
                        'search' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.search',
                            'options' => array(
                                'fields' => array(
                                    0 => 'email',
                                ),
                            ),
                            'enabled' => true,
                        ),
                    ),
                    'actions' => array(
                        'item' => array(
                            'update' => array(
                                'type' => 'update',
                                'options' => array(

                                ),
                            ),
                        ),
                    ),
                ),
                'sylius_backend_customer_group' => array(
                    'driver' => array(
                        'name' => 'doctrine/orm',
                        'options' => array(
                            'class' => 'Sylius\\Component\\Customer\\Model\\CustomerGroup',
                        ),
                    ),
                    'sorting' => array(
                        'name' => 'asc',
                    ),
                    'fields' => array(
                        'name' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.name',
                            'sortable' => 'name',
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                    ),
                    'filters' => array(
                        'search' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.search',
                            'options' => array(
                                'fields' => array(
                                    0 => 'name',
                                ),
                            ),
                            'enabled' => true,
                        ),
                    ),
                    'actions' => array(
                        'main' => array(
                            'create' => array(
                                'type' => 'create',
                                'options' => array(

                                ),
                            ),
                        ),
                        'item' => array(
                            'update' => array(
                                'type' => 'update',
                                'options' => array(

                                ),
                            ),
                            'delete' => array(
                                'type' => 'delete',
                                'options' => array(

                                ),
                            ),
                        ),
                    ),
                ),
                'app_backend_dealer' => array(
                    'driver' => array(
                        'name' => 'doctrine/orm',
                        'options' => array(
                            'class' => 'AppBundle\\Entity\\Dealer',
                        ),
                    ),
                    'sorting' => array(
                        'name' => 'asc',
                    ),
                    'fields' => array(
                        'image' => array(
                            'type' => 'twig',
                            'label' => 'sylius.ui.image',
                            'path' => '.',
                            'options' => array(
                                'template' => 'backend/dealer/grid/field/image.html.twig',
                            ),
                            'enabled' => true,
                        ),
                        'name' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.name',
                            'sortable' => 'name',
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                        'priceList' => array(
                            'type' => 'twig',
                            'label' => 'app.ui.price_list',
                            'path' => '.',
                            'options' => array(
                                'template' => 'backend/dealer/grid/field/priceList.html.twig',
                            ),
                            'enabled' => true,
                        ),
                        'pubBanners' => array(
                            'type' => 'twig',
                            'label' => 'app.ui.pub_banners',
                            'path' => '.',
                            'options' => array(
                                'template' => 'backend/dealer/grid/field/pubBanners.html.twig',
                            ),
                            'enabled' => true,
                        ),
                    ),
                    'filters' => array(
                        'search' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.search',
                            'options' => array(
                                'fields' => array(
                                    0 => 'name',
                                ),
                            ),
                            'enabled' => true,
                        ),
                    ),
                    'actions' => array(
                        'main' => array(
                            'create' => array(
                                'type' => 'create',
                                'options' => array(

                                ),
                            ),
                        ),
                        'item' => array(
                            'update' => array(
                                'type' => 'update',
                                'options' => array(

                                ),
                            ),
                            'delete' => array(
                                'type' => 'delete',
                                'options' => array(

                                ),
                            ),
                        ),
                    ),
                ),
                'app_backend_dealer_price' => array(
                    'driver' => array(
                        'name' => 'doctrine/orm',
                        'options' => array(
                            'class' => 'AppBundle\\Entity\\DealerPrice',
                        ),
                    ),
                    'sorting' => array(
                        'createdAt' => 'desc',
                    ),
                    'fields' => array(
                        'createdAt' => array(
                            'type' => 'twig',
                            'label' => 'sylius.ui.created_at',
                            'sortable' => 'createdAt',
                            'options' => array(
                                'template' => 'backend/grid/field/date/medium.html.twig',
                            ),
                            'enabled' => true,
                        ),
                        'dealer.name' => array(
                            'type' => 'string',
                            'label' => 'app.ui.dealer',
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                        'name' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.name',
                            'sortable' => 'name',
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                        'barcode' => array(
                            'type' => 'string',
                            'label' => 'app.ui.barcode',
                            'sortable' => 'barcode',
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                        'status' => array(
                            'type' => 'twig',
                            'label' => 'sylius.ui.status',
                            'options' => array(
                                'template' => 'backend/grid/field/state.html.twig',
                                'vars' => array(
                                    'labels' => 'backend/dealer_price/label/state',
                                ),
                            ),
                            'enabled' => true,
                        ),
                        'price' => array(
                            'type' => 'twig',
                            'label' => 'sylius.ui.price',
                            'sortable' => 'price',
                            'options' => array(
                                'template' => 'backend/grid/field/money.html.twig',
                            ),
                            'enabled' => true,
                        ),
                    ),
                    'filters' => array(
                        'search' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.search',
                            'options' => array(
                                'fields' => array(
                                    0 => 'name',
                                    1 => 'barcode',
                                ),
                            ),
                            'enabled' => true,
                        ),
                    ),
                    'actions' => array(
                        'item' => array(
                            'update' => array(
                                'type' => 'update',
                                'options' => array(

                                ),
                            ),
                            'delete' => array(
                                'type' => 'delete',
                                'options' => array(

                                ),
                            ),
                        ),
                    ),
                ),
                'app_backend_game_play' => array(
                    'driver' => array(
                        'name' => 'doctrine/orm',
                        'options' => array(
                            'class' => 'AppBundle\\Entity\\GamePlay',
                            'repository' => array(
                                'method' => 'createListQueryBuilder',
                                'arguments' => array(
                                    0 => 'fr_FR',
                                ),
                            ),
                        ),
                    ),
                    'sorting' => array(
                        'createdAt' => 'desc',
                    ),
                    'fields' => array(
                        'avatar' => array(
                            'type' => 'twig',
                            'label' => 'app.ui.avatar',
                            'path' => 'author',
                            'options' => array(
                                'template' => 'backend/customer/grid/field/avatar.html.twig',
                            ),
                            'enabled' => true,
                        ),
                        'name' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.username',
                            'path' => 'author',
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                        'product' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.product',
                            'path' => 'product',
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                        'createdAt' => array(
                            'type' => 'twig',
                            'label' => 'sylius.ui.created_at',
                            'sortable' => NULL,
                            'options' => array(
                                'template' => 'backend/grid/field/date/medium.html.twig',
                            ),
                            'enabled' => true,
                        ),
                    ),
                    'filters' => array(
                        'search' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.search',
                            'options' => array(
                                'fields' => array(
                                    0 => 'author.email',
                                    1 => 'productTranslation.name',
                                ),
                            ),
                            'enabled' => true,
                        ),
                    ),
                    'actions' => array(
                        'item' => array(
                            'update' => array(
                                'type' => 'update',
                                'options' => array(

                                ),
                            ),
                            'delete' => array(
                                'type' => 'delete',
                                'options' => array(

                                ),
                            ),
                        ),
                    ),
                ),
                'app_backend_not_found_page' => array(
                    'driver' => array(
                        'name' => 'doctrine/orm',
                        'options' => array(
                            'class' => 'AppBundle\\Entity\\NotFound',
                        ),
                    ),
                    'sorting' => array(
                        'timestamp' => 'desc',
                    ),
                    'fields' => array(
                        'timestamp' => array(
                            'type' => 'twig',
                            'label' => 'sylius.ui.created_at',
                            'sortable' => NULL,
                            'options' => array(
                                'template' => 'backend/grid/field/date/medium.html.twig',
                            ),
                            'enabled' => true,
                        ),
                        'path' => array(
                            'type' => 'string',
                            'label' => 'app.ui.path',
                            'sortable' => NULL,
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                        'referer' => array(
                            'type' => 'twig',
                            'label' => 'app.ui.referer',
                            'sortable' => NULL,
                            'options' => array(
                                'template' => 'backend/not_found_page/grid/field/referer.html.twig',
                            ),
                            'enabled' => true,
                        ),
                    ),
                    'filters' => array(
                        'search' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.search',
                            'options' => array(
                                'fields' => array(
                                    0 => 'path',
                                    1 => 'referer',
                                ),
                            ),
                            'enabled' => true,
                        ),
                    ),
                    'actions' => array(

                    ),
                ),
                'app_backend_person' => array(
                    'driver' => array(
                        'name' => 'doctrine/orm',
                        'options' => array(
                            'class' => 'AppBundle\\Entity\\Person',
                        ),
                    ),
                    'sorting' => array(
                        'createdAt' => 'desc',
                    ),
                    'fields' => array(
                        'image' => array(
                            'type' => 'twig',
                            'label' => 'sylius.ui.image',
                            'path' => '.',
                            'options' => array(
                                'template' => 'backend/person/grid/field/image.html.twig',
                            ),
                            'enabled' => true,
                        ),
                        'slug' => array(
                            'type' => 'twig',
                            'label' => 'sylius.ui.name',
                            'path' => '.',
                            'sortable' => 'slug',
                            'options' => array(
                                'template' => 'backend/grid/field/string.html.twig',
                            ),
                            'enabled' => true,
                        ),
                        'createdAt' => array(
                            'type' => 'twig',
                            'label' => 'sylius.ui.created_at',
                            'sortable' => 'createdAt',
                            'options' => array(
                                'template' => 'backend/grid/field/date/medium.html.twig',
                            ),
                            'enabled' => true,
                        ),
                    ),
                    'filters' => array(
                        'search' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.search',
                            'options' => array(
                                'fields' => array(
                                    0 => 'firstName',
                                    1 => 'lastName',
                                ),
                            ),
                            'enabled' => true,
                        ),
                    ),
                    'actions' => array(
                        'main' => array(
                            'create' => array(
                                'type' => 'create',
                                'options' => array(

                                ),
                            ),
                        ),
                        'item' => array(
                            'update' => array(
                                'type' => 'update',
                                'options' => array(

                                ),
                            ),
                            'delete' => array(
                                'type' => 'delete',
                                'options' => array(

                                ),
                            ),
                        ),
                    ),
                ),
                'app_backend_post' => array(
                    'driver' => array(
                        'name' => 'doctrine/orm',
                        'options' => array(
                            'class' => 'AppBundle\\Entity\\Post',
                            'repository' => array(
                                'method' => 'createListQueryBuilder',
                                'arguments' => array(
                                    0 => '$topicId',
                                ),
                            ),
                        ),
                    ),
                    'sorting' => array(
                        'createdAt' => 'desc',
                    ),
                    'fields' => array(
                        'avatar' => array(
                            'type' => 'twig',
                            'label' => 'app.ui.avatar',
                            'path' => 'author',
                            'options' => array(
                                'template' => 'backend/customer/grid/field/avatar.html.twig',
                            ),
                            'enabled' => true,
                        ),
                        'author.user.username' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.username',
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                        'topic.title' => array(
                            'type' => 'string',
                            'label' => 'app.ui.topic',
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                        'createdAt' => array(
                            'type' => 'twig',
                            'label' => 'sylius.ui.created_at',
                            'sortable' => 'createdAt',
                            'options' => array(
                                'template' => 'backend/grid/field/date/medium.html.twig',
                            ),
                            'enabled' => true,
                        ),
                    ),
                    'actions' => array(
                        'item' => array(
                            'update' => array(
                                'type' => 'update',
                                'options' => array(

                                ),
                            ),
                            'delete' => array(
                                'type' => 'delete',
                                'options' => array(

                                ),
                            ),
                        ),
                    ),
                    'filters' => array(

                    ),
                ),
                'sylius_backend_product' => array(
                    'driver' => array(
                        'name' => 'doctrine/orm',
                        'options' => array(
                            'class' => 'AppBundle\\Entity\\Product',
                            'repository' => array(
                                'method' => 'createQueryBuilderWithLocaleCode',
                                'arguments' => array(
                                    0 => 'fr_FR',
                                ),
                            ),
                        ),
                    ),
                    'sorting' => array(
                        'createdAt' => 'desc',
                    ),
                    'fields' => array(
                        'image' => array(
                            'type' => 'twig',
                            'label' => 'sylius.ui.image',
                            'path' => '.',
                            'options' => array(
                                'template' => 'backend/product/grid/field/image.html.twig',
                            ),
                            'enabled' => true,
                        ),
                        'name' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.name',
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                        'createdAt' => array(
                            'type' => 'twig',
                            'label' => 'sylius.ui.created_at',
                            'sortable' => 'createdAt',
                            'options' => array(
                                'template' => 'backend/grid/field/date/medium.html.twig',
                            ),
                            'enabled' => true,
                        ),
                        'status' => array(
                            'type' => 'twig',
                            'label' => 'sylius.ui.status',
                            'options' => array(
                                'template' => 'backend/grid/field/state.html.twig',
                                'vars' => array(
                                    'labels' => 'backend/product/label/state',
                                ),
                            ),
                            'enabled' => true,
                        ),
                    ),
                    'filters' => array(
                        'search' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.search',
                            'options' => array(
                                'fields' => array(
                                    0 => 'code',
                                    1 => 'translation.name',
                                ),
                            ),
                            'enabled' => true,
                        ),
                    ),
                    'actions' => array(
                        'main' => array(
                            'create' => array(
                                'type' => 'create_product',
                                'options' => array(

                                ),
                            ),
                        ),
                        'item' => array(
                            'manage_articles' => array(
                                'type' => 'manage_articles',
                                'options' => array(

                                ),
                            ),
                            'manage_variants' => array(
                                'type' => 'manage_variants',
                                'options' => array(

                                ),
                            ),
                            'update' => array(
                                'type' => 'update',
                                'options' => array(

                                ),
                            ),
                            'delete' => array(
                                'type' => 'delete',
                                'options' => array(

                                ),
                            ),
                        ),
                    ),
                ),
                'sylius_backend_product_association_type' => array(
                    'driver' => array(
                        'name' => 'doctrine/orm',
                        'options' => array(
                            'class' => 'Sylius\\Component\\Product\\Model\\ProductAssociationType',
                        ),
                    ),
                    'sorting' => array(
                        'code' => 'asc',
                    ),
                    'fields' => array(
                        'code' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.code',
                            'sortable' => NULL,
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                        'name' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.name',
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                    ),
                    'filters' => array(
                        'code' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.code',
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                        'name' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.name',
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                    ),
                    'actions' => array(
                        'main' => array(
                            'create' => array(
                                'type' => 'create',
                                'options' => array(

                                ),
                            ),
                        ),
                        'item' => array(
                            'update' => array(
                                'type' => 'update',
                                'options' => array(

                                ),
                            ),
                            'delete' => array(
                                'type' => 'delete',
                                'options' => array(

                                ),
                            ),
                        ),
                    ),
                ),
                'app_backend_product_list' => array(
                    'driver' => array(
                        'name' => 'doctrine/orm',
                        'options' => array(
                            'class' => 'AppBundle\\Entity\\ProductList',
                            'repository' => array(
                                'method' => 'createListQueryBuilder',
                            ),
                        ),
                    ),
                    'sorting' => array(
                        'createdAt' => 'desc',
                    ),
                    'fields' => array(
                        'avatar' => array(
                            'type' => 'twig',
                            'path' => 'owner',
                            'label' => 'app.ui.avatar',
                            'options' => array(
                                'template' => 'backend/customer/grid/field/avatar.html.twig',
                            ),
                            'enabled' => true,
                        ),
                        'owner' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.customer',
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                        'name' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.name',
                            'sortable' => NULL,
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                        'createdAt' => array(
                            'type' => 'twig',
                            'label' => 'sylius.ui.created_at',
                            'sortable' => NULL,
                            'options' => array(
                                'template' => 'backend/grid/field/date/medium.html.twig',
                            ),
                            'enabled' => true,
                        ),
                    ),
                    'filters' => array(
                        'search' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.search',
                            'options' => array(
                                'fields' => array(
                                    0 => 'name',
                                    1 => 'owner.email',
                                    2 => 'user.username',
                                ),
                            ),
                            'enabled' => true,
                        ),
                    ),
                    'actions' => array(
                        'item' => array(
                            'update' => array(
                                'type' => 'update',
                                'options' => array(

                                ),
                            ),
                            'delete' => array(
                                'type' => 'delete',
                                'options' => array(

                                ),
                            ),
                        ),
                    ),
                ),
                'sylius_backend_product_review' => array(
                    'driver' => array(
                        'name' => 'doctrine/orm',
                        'options' => array(
                            'class' => 'AppBundle\\Entity\\ProductReview',
                        ),
                    ),
                    'sorting' => array(
                        'date' => 'desc',
                    ),
                    'fields' => array(
                        'date' => array(
                            'type' => 'datetime',
                            'label' => 'sylius.ui.date',
                            'path' => 'createdAt',
                            'sortable' => 'createdAt',
                            'options' => array(
                                'format' => 'd-m-Y H:i:s',
                            ),
                            'enabled' => true,
                        ),
                        'title' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.title',
                            'sortable' => NULL,
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                        'rating' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.rating',
                            'sortable' => NULL,
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                        'reviewSubject' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.product',
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                        'author' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.customer',
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                    ),
                    'filters' => array(
                        'title' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.title',
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                    ),
                    'actions' => array(
                        'item' => array(
                            'update' => array(
                                'type' => 'update',
                                'options' => array(

                                ),
                            ),
                            'delete' => array(
                                'type' => 'delete',
                                'options' => array(

                                ),
                            ),
                        ),
                    ),
                ),
                'sylius_backend_product_variant' => array(
                    'driver' => array(
                        'name' => 'doctrine/orm',
                        'options' => array(
                            'class' => 'AppBundle\\Entity\\ProductVariant',
                            'repository' => array(
                                'method' => 'createQueryBuilderByProductId',
                                'arguments' => array(
                                    0 => '$productId',
                                ),
                            ),
                        ),
                    ),
                    'sorting' => array(
                        'position' => 'asc',
                    ),
                    'fields' => array(
                        'name' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.name',
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                        'code' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.code',
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                        'position' => array(
                            'type' => 'twig',
                            'label' => 'sylius.ui.position',
                            'path' => '.',
                            'sortable' => NULL,
                            'options' => array(
                                'template' => 'backend/product_variant/grid/field/position.html.twig',
                            ),
                            'enabled' => true,
                        ),
                    ),
                    'filters' => array(
                        'code' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.code',
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                        'name' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.name',
                            'options' => array(
                                'fields' => array(
                                    0 => 'name',
                                ),
                            ),
                            'enabled' => true,
                        ),
                    ),
                    'actions' => array(
                        'main' => array(
                            'update_positions' => array(
                                'type' => 'update_product_variant_positions',
                                'options' => array(

                                ),
                            ),
                            'create' => array(
                                'type' => 'create',
                                'options' => array(

                                ),
                            ),
                        ),
                        'item' => array(
                            'update' => array(
                                'type' => 'update',
                                'options' => array(

                                ),
                            ),
                            'delete' => array(
                                'type' => 'delete',
                                'options' => array(

                                ),
                            ),
                        ),
                    ),
                ),
                'app_backend_redirection' => array(
                    'driver' => array(
                        'name' => 'doctrine/orm',
                        'options' => array(
                            'class' => 'AppBundle\\Entity\\Redirection',
                        ),
                    ),
                    'sorting' => array(
                        'source' => 'asc',
                    ),
                    'fields' => array(
                        'source' => array(
                            'type' => 'string',
                            'label' => 'app.ui.source',
                            'sortable' => NULL,
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                        'destination' => array(
                            'type' => 'string',
                            'label' => 'app.ui.destination',
                            'sortable' => NULL,
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                        'count' => array(
                            'type' => 'string',
                            'label' => 'app.ui.redirection_count',
                            'sortable' => NULL,
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                        'lastAccessed' => array(
                            'type' => 'twig',
                            'label' => 'app.ui.last_used_at',
                            'sortable' => NULL,
                            'options' => array(
                                'template' => 'backend/grid/field/date/medium.html.twig',
                            ),
                            'enabled' => true,
                        ),
                    ),
                    'filters' => array(
                        'search' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.search',
                            'options' => array(
                                'fields' => array(
                                    0 => 'source',
                                    1 => 'destination',
                                ),
                            ),
                            'enabled' => true,
                        ),
                    ),
                    'actions' => array(
                        'main' => array(
                            'create' => array(
                                'type' => 'create',
                                'options' => array(

                                ),
                            ),
                        ),
                        'item' => array(
                            'update' => array(
                                'type' => 'update',
                                'options' => array(

                                ),
                            ),
                            'delete' => array(
                                'type' => 'delete',
                                'options' => array(

                                ),
                            ),
                        ),
                    ),
                ),
                'sylius_backend_root_taxon' => array(
                    'driver' => array(
                        'name' => 'doctrine/orm',
                        'options' => array(
                            'class' => 'AppBundle\\Entity\\Taxon',
                            'repository' => array(
                                'method' => 'createRootListQueryBuilder',
                                'arguments' => array(
                                    0 => array(
                                        0 => 'fr_FR',
                                    ),
                                ),
                            ),
                        ),
                    ),
                    'sorting' => array(
                        'code' => 'desc',
                    ),
                    'fields' => array(
                        'code' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.code',
                            'sortable' => NULL,
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                        'name' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.name',
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                    ),
                    'filters' => array(
                        'search' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.search',
                            'options' => array(
                                'fields' => array(
                                    0 => 'code',
                                    1 => 'translation.name',
                                ),
                            ),
                            'enabled' => true,
                        ),
                    ),
                    'actions' => array(
                        'main' => array(
                            'create' => array(
                                'type' => 'create',
                                'options' => array(

                                ),
                            ),
                        ),
                        'item' => array(
                            'taxons' => array(
                                'type' => 'list_taxons',
                                'options' => array(

                                ),
                            ),
                            'update' => array(
                                'type' => 'update',
                                'options' => array(

                                ),
                            ),
                            'delete' => array(
                                'type' => 'delete',
                                'options' => array(

                                ),
                            ),
                        ),
                    ),
                ),
                'sylius_backend_taxon_from_root' => array(
                    'driver' => array(
                        'name' => 'doctrine/orm',
                        'options' => array(
                            'class' => 'AppBundle\\Entity\\Taxon',
                            'repository' => array(
                                'method' => 'createChildrenListQueryBuilder',
                                'arguments' => array(
                                    0 => array(
                                        0 => 'fr_FR',
                                    ),
                                    1 => 'expr:service(\'sylius.repository.taxon\').findOneByCode($rootCode)',
                                ),
                            ),
                        ),
                    ),
                    'fields' => array(
                        'code' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.code',
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                        'parent' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.parent',
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                        'name' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.name',
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                        'public' => array(
                            'type' => 'twig',
                            'label' => 'app.ui.public',
                            'path' => '.',
                            'options' => array(
                                'template' => 'backend/taxon/grid/field/public.html.twig',
                            ),
                            'enabled' => true,
                        ),
                    ),
                    'filters' => array(
                        'search' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.search',
                            'options' => array(
                                'fields' => array(
                                    0 => 'code',
                                    1 => 'translation.name',
                                ),
                            ),
                            'enabled' => true,
                        ),
                    ),
                    'actions' => array(
                        'main' => array(
                            'create' => array(
                                'type' => 'create',
                                'options' => array(

                                ),
                            ),
                        ),
                        'item' => array(
                            'update' => array(
                                'type' => 'update',
                                'options' => array(

                                ),
                            ),
                            'delete' => array(
                                'type' => 'delete',
                                'options' => array(

                                ),
                            ),
                        ),
                    ),
                    'sorting' => array(

                    ),
                ),
                'app_backend_topic' => array(
                    'driver' => array(
                        'name' => 'doctrine/orm',
                        'options' => array(
                            'class' => 'AppBundle\\Entity\\Topic',
                        ),
                    ),
                    'sorting' => array(
                        'createdAt' => 'desc',
                    ),
                    'fields' => array(
                        'avatar' => array(
                            'type' => 'twig',
                            'label' => 'app.ui.avatar',
                            'path' => 'author',
                            'options' => array(
                                'template' => 'backend/customer/grid/field/avatar.html.twig',
                            ),
                            'enabled' => true,
                        ),
                        'author.user.username' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.username',
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                        'title' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.title',
                            'sortable' => 'title',
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                        'createdAt' => array(
                            'type' => 'twig',
                            'label' => 'sylius.ui.created_at',
                            'sortable' => 'createdAt',
                            'options' => array(
                                'template' => 'backend/grid/field/date/medium.html.twig',
                            ),
                            'enabled' => true,
                        ),
                    ),
                    'filters' => array(
                        'search' => array(
                            'type' => 'string',
                            'label' => 'sylius.ui.search',
                            'options' => array(
                                'fields' => array(
                                    0 => 'title',
                                ),
                            ),
                            'enabled' => true,
                        ),
                    ),
                    'actions' => array(
                        'item' => array(
                            'posts' => array(
                                'type' => 'list_posts',
                                'options' => array(

                                ),
                            ),
                            'update' => array(
                                'type' => 'update',
                                'options' => array(

                                ),
                            ),
                            'delete' => array(
                                'type' => 'delete',
                                'options' => array(

                                ),
                            ),
                        ),
                    ),
                ),
                'app_frontend_game_play' => array(
                    'driver' => array(
                        'name' => 'doctrine/orm',
                        'options' => array(
                            'class' => 'AppBundle\\Entity\\GamePlay',
                            'repository' => array(
                                'method' => 'createCommentedListQueryBuilder',
                                'arguments' => array(
                                    'locale' => 'fr_FR',
                                    'criteria' => 'expr:service(\'request_stack\').getCurrentRequest().get(\'criteria\', [])',
                                ),
                            ),
                        ),
                    ),
                    'sorting' => array(
                        'createdAt' => 'desc',
                    ),
                    'fields' => array(
                        'createdAt' => array(
                            'type' => 'twig',
                            'label' => 'sylius.ui.created_at',
                            'sortable' => NULL,
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                        'topic.postCount' => array(
                            'type' => 'twig',
                            'sortable' => NULL,
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                    ),
                    'filters' => array(

                    ),
                    'actions' => array(

                    ),
                ),
                'app_frontend_game_play_from_author' => array(
                    'driver' => array(
                        'name' => 'doctrine/orm',
                        'options' => array(
                            'class' => 'AppBundle\\Entity\\GamePlay',
                            'repository' => array(
                                'method' => 'createListQueryBuilder',
                                'arguments' => array(
                                    0 => 'fr_FR',
                                    1 => 'expr:service(\'app.context.customer\').getCustomer().getId()',
                                ),
                            ),
                        ),
                    ),
                    'sorting' => array(
                        'createdAt' => 'desc',
                    ),
                    'fields' => array(
                        'createdAt' => array(
                            'type' => 'twig',
                            'label' => 'sylius.ui.created_at',
                            'sortable' => NULL,
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                    ),
                    'filters' => array(

                    ),
                    'actions' => array(

                    ),
                ),
                'app_frontend_person' => array(
                    'driver' => array(
                        'name' => 'doctrine/orm',
                        'options' => array(
                            'class' => 'AppBundle\\Entity\\Person',
                            'repository' => array(
                                'method' => 'createListQueryBuilder',
                            ),
                        ),
                    ),
                    'sorting' => array(
                        'createdAt' => 'desc',
                    ),
                    'fields' => array(
                        'createdAt' => array(
                            'type' => 'twig',
                            'label' => 'sylius.ui.created_at',
                            'sortable' => NULL,
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                    ),
                    'filters' => array(

                    ),
                    'actions' => array(

                    ),
                ),
                'app_frontend_person_from_taxon' => array(
                    'driver' => array(
                        'name' => 'doctrine/orm',
                        'options' => array(
                            'class' => 'AppBundle\\Entity\\Person',
                            'repository' => array(
                                'method' => 'createListQueryBuilder',
                                'arguments' => array(
                                    0 => 'expr:service(\'sylius.repository.taxon\').findOneByPermalink($permalink)',
                                ),
                            ),
                        ),
                    ),
                    'sorting' => array(
                        'createdAt' => 'desc',
                    ),
                    'fields' => array(
                        'createdAt' => array(
                            'type' => 'twig',
                            'label' => 'sylius.ui.created_at',
                            'sortable' => NULL,
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                    ),
                    'filters' => array(

                    ),
                    'actions' => array(

                    ),
                ),
                'sylius_frontend_product' => array(
                    'driver' => array(
                        'name' => 'doctrine/orm',
                        'options' => array(
                            'class' => 'AppBundle\\Entity\\Product',
                            'repository' => array(
                                'method' => 'createListQueryBuilder',
                                'arguments' => array(
                                    'locale' => 'fr_FR',
                                    'onlyPublished' => true,
                                    'criteria' => 'expr:service(\'request_stack\').getCurrentRequest().get(\'criteria\', [])',
                                ),
                            ),
                        ),
                    ),
                    'sorting' => array(
                        'createdAt' => 'desc',
                    ),
                    'fields' => array(
                        'createdAt' => array(
                            'type' => 'string',
                            'sortable' => NULL,
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                        'averageRating' => array(
                            'type' => 'string',
                            'sortable' => NULL,
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                        'variant.releasedAt' => array(
                            'path' => 'variant.releasedAt',
                            'type' => 'string',
                            'sortable' => NULL,
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                    ),
                    'filters' => array(

                    ),
                    'actions' => array(

                    ),
                ),
                'app_frontend_product_list_item' => array(
                    'driver' => array(
                        'name' => 'doctrine/orm',
                        'options' => array(
                            'class' => 'AppBundle\\Entity\\ProductListItem',
                            'repository' => array(
                                'method' => 'createQueryBuilderByProductList',
                                'arguments' => array(
                                    0 => '$productListSlug',
                                    1 => 'fr_FR',
                                ),
                            ),
                        ),
                    ),
                    'sorting' => array(
                        'createdAt' => 'desc',
                    ),
                    'fields' => array(
                        'createdAt' => array(
                            'type' => 'twig',
                            'label' => 'sylius.ui.created_at',
                            'sortable' => NULL,
                            'enabled' => true,
                            'options' => array(

                            ),
                        ),
                    ),
                    'filters' => array(

                    ),
                    'actions' => array(

                    ),
                ),
            ),
            'fos_rest.serializer.exclusion_strategy.version' => '',
            'fos_rest.serializer.exclusion_strategy.groups' => array(

            ),
            'fos_rest.view_handler.jsonp.callback_param' => '',
            'fos_rest.view.exception_wrapper_handler' => 'FOS\\RestBundle\\View\\ExceptionWrapperHandler',
            'fos_rest.view_handler.default.class' => 'FOS\\RestBundle\\View\\ViewHandler',
            'fos_rest.view_handler.jsonp.class' => 'FOS\\RestBundle\\View\\JsonpHandler',
            'fos_rest.serializer.exception_wrapper_serialize_handler.class' => 'FOS\\RestBundle\\Serializer\\ExceptionWrapperSerializeHandler',
            'fos_rest.routing.loader.controller.class' => 'FOS\\RestBundle\\Routing\\Loader\\RestRouteLoader',
            'fos_rest.routing.loader.yaml_collection.class' => 'FOS\\RestBundle\\Routing\\Loader\\RestYamlCollectionLoader',
            'fos_rest.routing.loader.xml_collection.class' => 'FOS\\RestBundle\\Routing\\Loader\\RestXmlCollectionLoader',
            'fos_rest.routing.loader.processor.class' => 'FOS\\RestBundle\\Routing\\Loader\\RestRouteProcessor',
            'fos_rest.routing.loader.reader.controller.class' => 'FOS\\RestBundle\\Routing\\Loader\\Reader\\RestControllerReader',
            'fos_rest.routing.loader.reader.action.class' => 'FOS\\RestBundle\\Routing\\Loader\\Reader\\RestActionReader',
            'fos_rest.format_negotiator.class' => 'FOS\\RestBundle\\Negotiation\\FormatNegotiator',
            'fos_rest.inflector.class' => 'FOS\\RestBundle\\Inflector\\DoctrineInflector',
            'fos_rest.request_matcher.class' => 'Symfony\\Component\\HttpFoundation\\RequestMatcher',
            'fos_rest.violation_formatter.class' => 'FOS\\RestBundle\\Util\\ViolationFormatter',
            'fos_rest.request.param_fetcher.class' => 'FOS\\RestBundle\\Request\\ParamFetcher',
            'fos_rest.request.param_fetcher.reader.class' => 'FOS\\RestBundle\\Request\\ParamReader',
            'fos_rest.cache_dir' => (__DIR__.'/fos_rest'),
            'fos_rest.routing.loader.default_format' => NULL,
            'fos_rest.routing.loader.include_format' => true,
            'fos_rest.serializer.serialize_null' => false,
            'fos_rest.exception.codes' => array(

            ),
            'fos_rest.exception.messages' => array(

            ),
            'fos_rest.converter.request_body.validation_errors_argument' => 'validationErrors',
            'fos_rest.mime_types' => array(

            ),
            'fos_rest.formats' => array(
                'json' => false,
                'xml' => false,
                'html' => true,
            ),
            'fos_rest.force_redirects' => array(
                'html' => 302,
            ),
            'fos_rest.failed_validation' => 400,
            'fos_rest.empty_content' => 204,
            'fos_rest.serialize_null' => false,
            'fos_rest.default_engine' => 'twig',
            'fos_rest.normalizer.camel_keys.class' => 'FOS\\RestBundle\\Normalizer\\CamelKeysNormalizer',
            'fos_rest.decoder.json.class' => 'FOS\\RestBundle\\Decoder\\JsonDecoder',
            'fos_rest.decoder.jsontoform.class' => 'FOS\\RestBundle\\Decoder\\JsonToFormDecoder',
            'fos_rest.decoder.xml.class' => 'FOS\\RestBundle\\Decoder\\XmlDecoder',
            'fos_rest.decoder_provider.class' => 'FOS\\RestBundle\\Decoder\\ContainerDecoderProvider',
            'fos_rest.body_listener.class' => 'FOS\\RestBundle\\EventListener\\BodyListener',
            'fos_rest.throw_exception_on_unsupported_content_type' => false,
            'fos_rest.body_default_format' => NULL,
            'fos_rest.decoders' => array(
                'json' => 'fos_rest.decoder.json',
                'xml' => 'fos_rest.decoder.xml',
            ),
            'fos_js_routing.extractor.class' => 'FOS\\JsRoutingBundle\\Extractor\\ExposedRoutesExtractor',
            'fos_js_routing.controller.class' => 'FOS\\JsRoutingBundle\\Controller\\Controller',
            'fos_js_routing.cache_control' => array(
                'enabled' => false,
            ),
            'fos_elastica.client.class' => 'FOS\\ElasticaBundle\\Elastica\\Client',
            'fos_elastica.logger.class' => 'FOS\\ElasticaBundle\\Logger\\ElasticaLogger',
            'fos_elastica.data_collector.class' => 'FOS\\ElasticaBundle\\DataCollector\\ElasticaDataCollector',
            'fos_elastica.mapping_builder.class' => 'FOS\\ElasticaBundle\\Index\\MappingBuilder',
            'fos_elastica.property_accessor.class' => 'Symfony\\Component\\PropertyAccess\\PropertyAccessor',
            'fos_elastica.property_accessor.magiccall' => false,
            'fos_elastica.property_accessor.throwexceptiononinvalidindex' => false,
            'fos_elastica.alias_processor.class' => 'FOS\\ElasticaBundle\\Index\\AliasProcessor',
            'fos_elastica.finder.class' => 'FOS\\ElasticaBundle\\Finder\\TransformedFinder',
            'fos_elastica.index.class' => 'FOS\\ElasticaBundle\\Elastica\\Index',
            'fos_elastica.indexable.class' => 'FOS\\ElasticaBundle\\Provider\\Indexable',
            'fos_elastica.index_manager.class' => 'FOS\\ElasticaBundle\\Index\\IndexManager',
            'fos_elastica.resetter.class' => 'FOS\\ElasticaBundle\\Index\\Resetter',
            'fos_elastica.type.class' => 'Elastica\\Type',
            'fos_elastica.object_persister.class' => 'FOS\\ElasticaBundle\\Persister\\ObjectPersister',
            'fos_elastica.object_serializer_persister.class' => 'FOS\\ElasticaBundle\\Persister\\ObjectSerializerPersister',
            'fos_elastica.provider_registry.class' => 'FOS\\ElasticaBundle\\Provider\\ProviderRegistry',
            'fos_elastica.elastica_to_model_transformer.collection.class' => 'FOS\\ElasticaBundle\\Transformer\\ElasticaToModelTransformerCollection',
            'fos_elastica.model_to_elastica_transformer.class' => 'FOS\\ElasticaBundle\\Transformer\\ModelToElasticaAutoTransformer',
            'fos_elastica.model_to_elastica_identifier_transformer.class' => 'FOS\\ElasticaBundle\\Transformer\\ModelToElasticaIdentifierTransformer',
            'fos_elastica.slice_fetcher.orm.class' => 'FOS\\ElasticaBundle\\Doctrine\\ORM\\SliceFetcher',
            'fos_elastica.provider.prototype.orm.class' => 'FOS\\ElasticaBundle\\Doctrine\\ORM\\Provider',
            'fos_elastica.listener.prototype.orm.class' => 'FOS\\ElasticaBundle\\Doctrine\\Listener',
            'fos_elastica.elastica_to_model_transformer.prototype.orm.class' => 'FOS\\ElasticaBundle\\Doctrine\\ORM\\ElasticaToModelTransformer',
            'fos_elastica.manager.orm.class' => 'FOS\\ElasticaBundle\\Doctrine\\RepositoryManager',
            'doctrine_phpcr.credentials.class' => 'PHPCR\\SimpleCredentials',
            'doctrine_phpcr.class' => 'Doctrine\\Bundle\\PHPCRBundle\\ManagerRegistry',
            'doctrine_phpcr.proxy.class' => 'Doctrine\\Common\\Proxy\\Proxy',
            'doctrine_phpcr.sessions' => array(
                'default' => 'doctrine_phpcr.default_session',
            ),
            'doctrine_phpcr.odm.document_managers' => array(
                'default' => 'doctrine_phpcr.odm.default_document_manager',
            ),
            'doctrine_phpcr.default_session' => 'default',
            'doctrine_phpcr.odm.default_document_manager' => 'default',
            'doctrine_phpcr.console_dumper.class' => 'PHPCR\\Util\\Console\\Helper\\PhpcrConsoleDumperHelper',
            'doctrine_phpcr.initializer_manager.class' => 'Doctrine\\Bundle\\PHPCRBundle\\Initializer\\InitializerManager',
            'doctrine_phpcr.form.type.phpcr_reference.class' => 'Doctrine\\Bundle\\PHPCRBundle\\Form\\Type\\PHPCRReferenceType',
            'doctrine_phpcr.logger.chain.class' => 'Jackalope\\Transport\\Logging\\LoggerChain',
            'doctrine_phpcr.logger.class' => 'Jackalope\\Transport\\Logging\\Psr3Logger',
            'doctrine_phpcr.logger.profiling.class' => 'Jackalope\\Transport\\Logging\\DebugStack',
            'doctrine_phpcr.logger.stop_watch.class' => 'Doctrine\\Bundle\\PHPCRBundle\\DataCollector\\StopWatchLogger',
            'doctrine_phpcr.data_collector.class' => 'Doctrine\\Bundle\\PHPCRBundle\\DataCollector\\PHPCRDataCollector',
            'doctrine_phpcr.session.event_manager.class' => 'Symfony\\Bridge\\Doctrine\\ContainerAwareEventManager',
            'doctrine_phpcr.dump_max_line_length' => 120,
            'doctrine_phpcr.jackalope_doctrine_dbal.schema_listener.class' => 'Doctrine\\Bundle\\PHPCRBundle\\EventListener\\JackalopeDoctrineDbalSchemaListener',
            'doctrine_phpcr.jackalope_doctrine_dbal.repository_schema.class' => 'Jackalope\\Transport\\DoctrineDBAL\\RepositorySchema',
            'doctrine_phpcr.odm.configuration.class' => 'Doctrine\\ODM\\PHPCR\\Configuration',
            'doctrine_phpcr.odm.document_manager.class' => 'Doctrine\\ODM\\PHPCR\\DocumentManager',
            'doctrine_phpcr.odm.translation.strategy.attribute.class' => 'Doctrine\\ODM\\PHPCR\\Translation\\TranslationStrategy\\AttributeTranslationStrategy',
            'doctrine_phpcr.odm.translation.strategy.child.class' => 'Doctrine\\ODM\\PHPCR\\Translation\\TranslationStrategy\\ChildTranslationStrategy',
            'doctrine_phpcr.odm.cache.array.class' => 'Doctrine\\Common\\Cache\\ArrayCache',
            'doctrine_phpcr.odm.cache.apc.class' => 'Doctrine\\Common\\Cache\\ApcCache',
            'doctrine_phpcr.odm.cache.memcache.class' => 'Doctrine\\Common\\Cache\\MemcacheCache',
            'doctrine_phpcr.odm.cache.memcache_host' => 'localhost',
            'doctrine_phpcr.odm.cache.memcache_port' => 11211,
            'doctrine_phpcr.odm.cache.memcache_instance.class' => 'Memcache',
            'doctrine_phpcr.odm.cache.memcached.class' => 'Doctrine\\Common\\Cache\\MemcachedCache',
            'doctrine_phpcr.odm.cache.memcached_host' => 'localhost',
            'doctrine_phpcr.odm.cache.memcached_port' => 11211,
            'doctrine_phpcr.odm.cache.memcached_instance.class' => 'Memcached',
            'doctrine_phpcr.odm.cache.xcache.class' => 'Doctrine\\Common\\Cache\\XcacheCache',
            'form.type_guesser.doctrine_phpcr.class' => 'Doctrine\\Bundle\\PHPCRBundle\\Form\\PhpcrOdmTypeGuesser',
            'doctrine_phpcr.odm.form.path.type.class' => 'Doctrine\\Bundle\\PHPCRBundle\\Form\\Type\\PathType',
            'doctrine_phpcr.odm.metadata.driver_chain.class' => 'Doctrine\\Common\\Persistence\\Mapping\\Driver\\MappingDriverChain',
            'doctrine_phpcr.odm.metadata.annotation.class' => 'Doctrine\\ODM\\PHPCR\\Mapping\\Driver\\AnnotationDriver',
            'doctrine_phpcr.odm.metadata.xml.class' => 'Doctrine\\Bundle\\PHPCRBundle\\Mapping\\Driver\\XmlDriver',
            'doctrine_phpcr.odm.metadata.yml.class' => 'Doctrine\\Bundle\\PHPCRBundle\\Mapping\\Driver\\YamlDriver',
            'doctrine_phpcr.odm.metadata.php.class' => 'Doctrine\\Common\\Persistence\\Mapping\\Driver\\StaticPHPDriver',
            'doctrine_phpcr.odm.proxy_cache_warmer.class' => 'Symfony\\Bridge\\Doctrine\\CacheWarmer\\ProxyCacheWarmer',
            'doctrine_phpcr.odm.unique_node_type_cache_warmer.class' => 'Doctrine\\Bundle\\PHPCRBundle\\CacheWarmer\\UniqueNodeTypeCacheWarmer',
            'doctrine_phpcr.odm.validator.valid_phpcr_odm.class' => 'Doctrine\\Bundle\\PHPCRBundle\\Validator\\Constraints\\ValidPhpcrOdmValidator',
            'doctrine_phpcr.odm.auto_generate_proxy_classes' => true,
            'doctrine_phpcr.odm.proxy_dir' => (__DIR__.'/doctrine/PHPCRProxies'),
            'doctrine_phpcr.odm.proxy_namespace' => 'PHPCRProxies',
            'doctrine_phpcr.odm.namespaces.translation.alias' => 'phpcr_locale',
            'doctrine_phpcr.form.type_guess' => array(

            ),
            'doctrine_cache.apc.class' => 'Doctrine\\Common\\Cache\\ApcCache',
            'doctrine_cache.apcu.class' => 'Doctrine\\Common\\Cache\\ApcuCache',
            'doctrine_cache.array.class' => 'Doctrine\\Common\\Cache\\ArrayCache',
            'doctrine_cache.chain.class' => 'Doctrine\\Common\\Cache\\ChainCache',
            'doctrine_cache.couchbase.class' => 'Doctrine\\Common\\Cache\\CouchbaseCache',
            'doctrine_cache.couchbase.connection.class' => 'Couchbase',
            'doctrine_cache.couchbase.hostnames' => 'localhost:8091',
            'doctrine_cache.file_system.class' => 'Doctrine\\Common\\Cache\\FilesystemCache',
            'doctrine_cache.php_file.class' => 'Doctrine\\Common\\Cache\\PhpFileCache',
            'doctrine_cache.memcache.class' => 'Doctrine\\Common\\Cache\\MemcacheCache',
            'doctrine_cache.memcache.connection.class' => 'Memcache',
            'doctrine_cache.memcache.host' => 'localhost',
            'doctrine_cache.memcache.port' => 11211,
            'doctrine_cache.memcached.class' => 'Doctrine\\Common\\Cache\\MemcachedCache',
            'doctrine_cache.memcached.connection.class' => 'Memcached',
            'doctrine_cache.memcached.host' => 'localhost',
            'doctrine_cache.memcached.port' => 11211,
            'doctrine_cache.mongodb.class' => 'Doctrine\\Common\\Cache\\MongoDBCache',
            'doctrine_cache.mongodb.collection.class' => 'MongoCollection',
            'doctrine_cache.mongodb.connection.class' => 'MongoClient',
            'doctrine_cache.mongodb.server' => 'localhost:27017',
            'doctrine_cache.predis.client.class' => 'Predis\\Client',
            'doctrine_cache.predis.scheme' => 'tcp',
            'doctrine_cache.predis.host' => 'localhost',
            'doctrine_cache.predis.port' => 6379,
            'doctrine_cache.redis.class' => 'Doctrine\\Common\\Cache\\RedisCache',
            'doctrine_cache.redis.connection.class' => 'Redis',
            'doctrine_cache.redis.host' => 'localhost',
            'doctrine_cache.redis.port' => 6379,
            'doctrine_cache.riak.class' => 'Doctrine\\Common\\Cache\\RiakCache',
            'doctrine_cache.riak.bucket.class' => 'Riak\\Bucket',
            'doctrine_cache.riak.connection.class' => 'Riak\\Connection',
            'doctrine_cache.riak.bucket_property_list.class' => 'Riak\\BucketPropertyList',
            'doctrine_cache.riak.host' => 'localhost',
            'doctrine_cache.riak.port' => 8087,
            'doctrine_cache.sqlite3.class' => 'Doctrine\\Common\\Cache\\SQLite3Cache',
            'doctrine_cache.sqlite3.connection.class' => 'SQLite3',
            'doctrine_cache.void.class' => 'Doctrine\\Common\\Cache\\VoidCache',
            'doctrine_cache.wincache.class' => 'Doctrine\\Common\\Cache\\WinCacheCache',
            'doctrine_cache.xcache.class' => 'Doctrine\\Common\\Cache\\XcacheCache',
            'doctrine_cache.zenddata.class' => 'Doctrine\\Common\\Cache\\ZendDataCache',
            'doctrine_cache.security.acl.cache.class' => 'Doctrine\\Bundle\\DoctrineCacheBundle\\Acl\\Model\\AclCache',
            'doctrine.dbal.logger.chain.class' => 'Doctrine\\DBAL\\Logging\\LoggerChain',
            'doctrine.dbal.logger.profiling.class' => 'Doctrine\\DBAL\\Logging\\DebugStack',
            'doctrine.dbal.logger.class' => 'Symfony\\Bridge\\Doctrine\\Logger\\DbalLogger',
            'doctrine.dbal.configuration.class' => 'Doctrine\\DBAL\\Configuration',
            'doctrine.data_collector.class' => 'Doctrine\\Bundle\\DoctrineBundle\\DataCollector\\DoctrineDataCollector',
            'doctrine.dbal.connection.event_manager.class' => 'Symfony\\Bridge\\Doctrine\\ContainerAwareEventManager',
            'doctrine.dbal.connection_factory.class' => 'Doctrine\\Bundle\\DoctrineBundle\\ConnectionFactory',
            'doctrine.dbal.events.mysql_session_init.class' => 'Doctrine\\DBAL\\Event\\Listeners\\MysqlSessionInit',
            'doctrine.dbal.events.oracle_session_init.class' => 'Doctrine\\DBAL\\Event\\Listeners\\OracleSessionInit',
            'doctrine.class' => 'Doctrine\\Bundle\\DoctrineBundle\\Registry',
            'doctrine.entity_managers' => array(
                'default' => 'doctrine.orm.default_entity_manager',
            ),
            'doctrine.default_entity_manager' => 'default',
            'doctrine.dbal.connection_factory.types' => array(

            ),
            'doctrine.connections' => array(
                'default' => 'doctrine.dbal.default_connection',
            ),
            'doctrine.default_connection' => 'default',
            'doctrine.orm.configuration.class' => 'Doctrine\\ORM\\Configuration',
            'doctrine.orm.entity_manager.class' => 'Doctrine\\ORM\\EntityManager',
            'doctrine.orm.manager_configurator.class' => 'Doctrine\\Bundle\\DoctrineBundle\\ManagerConfigurator',
            'doctrine.orm.cache.array.class' => 'Doctrine\\Common\\Cache\\ArrayCache',
            'doctrine.orm.cache.apc.class' => 'Doctrine\\Common\\Cache\\ApcCache',
            'doctrine.orm.cache.memcache.class' => 'Doctrine\\Common\\Cache\\MemcacheCache',
            'doctrine.orm.cache.memcache_host' => 'localhost',
            'doctrine.orm.cache.memcache_port' => 11211,
            'doctrine.orm.cache.memcache_instance.class' => 'Memcache',
            'doctrine.orm.cache.memcached.class' => 'Doctrine\\Common\\Cache\\MemcachedCache',
            'doctrine.orm.cache.memcached_host' => 'localhost',
            'doctrine.orm.cache.memcached_port' => 11211,
            'doctrine.orm.cache.memcached_instance.class' => 'Memcached',
            'doctrine.orm.cache.redis.class' => 'Doctrine\\Common\\Cache\\RedisCache',
            'doctrine.orm.cache.redis_host' => 'localhost',
            'doctrine.orm.cache.redis_port' => 6379,
            'doctrine.orm.cache.redis_instance.class' => 'Redis',
            'doctrine.orm.cache.xcache.class' => 'Doctrine\\Common\\Cache\\XcacheCache',
            'doctrine.orm.cache.wincache.class' => 'Doctrine\\Common\\Cache\\WinCacheCache',
            'doctrine.orm.cache.zenddata.class' => 'Doctrine\\Common\\Cache\\ZendDataCache',
            'doctrine.orm.metadata.driver_chain.class' => 'Doctrine\\Common\\Persistence\\Mapping\\Driver\\MappingDriverChain',
            'doctrine.orm.metadata.annotation.class' => 'Doctrine\\ORM\\Mapping\\Driver\\AnnotationDriver',
            'doctrine.orm.metadata.xml.class' => 'Doctrine\\ORM\\Mapping\\Driver\\SimplifiedXmlDriver',
            'doctrine.orm.metadata.yml.class' => 'Doctrine\\ORM\\Mapping\\Driver\\SimplifiedYamlDriver',
            'doctrine.orm.metadata.php.class' => 'Doctrine\\ORM\\Mapping\\Driver\\PHPDriver',
            'doctrine.orm.metadata.staticphp.class' => 'Doctrine\\ORM\\Mapping\\Driver\\StaticPHPDriver',
            'doctrine.orm.proxy_cache_warmer.class' => 'Symfony\\Bridge\\Doctrine\\CacheWarmer\\ProxyCacheWarmer',
            'form.type_guesser.doctrine.class' => 'Symfony\\Bridge\\Doctrine\\Form\\DoctrineOrmTypeGuesser',
            'doctrine.orm.validator.unique.class' => 'Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntityValidator',
            'doctrine.orm.validator_initializer.class' => 'Symfony\\Bridge\\Doctrine\\Validator\\DoctrineInitializer',
            'doctrine.orm.security.user.provider.class' => 'Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider',
            'doctrine.orm.listeners.resolve_target_entity.class' => 'Doctrine\\ORM\\Tools\\ResolveTargetEntityListener',
            'doctrine.orm.listeners.attach_entity_listeners.class' => 'Doctrine\\ORM\\Tools\\AttachEntityListenersListener',
            'doctrine.orm.naming_strategy.default.class' => 'Doctrine\\ORM\\Mapping\\DefaultNamingStrategy',
            'doctrine.orm.naming_strategy.underscore.class' => 'Doctrine\\ORM\\Mapping\\UnderscoreNamingStrategy',
            'doctrine.orm.quote_strategy.default.class' => 'Doctrine\\ORM\\Mapping\\DefaultQuoteStrategy',
            'doctrine.orm.quote_strategy.ansi.class' => 'Doctrine\\ORM\\Mapping\\AnsiQuoteStrategy',
            'doctrine.orm.entity_listener_resolver.class' => 'Doctrine\\Bundle\\DoctrineBundle\\Mapping\\ContainerAwareEntityListenerResolver',
            'doctrine.orm.second_level_cache.default_cache_factory.class' => 'Doctrine\\ORM\\Cache\\DefaultCacheFactory',
            'doctrine.orm.second_level_cache.default_region.class' => 'Doctrine\\ORM\\Cache\\Region\\DefaultRegion',
            'doctrine.orm.second_level_cache.filelock_region.class' => 'Doctrine\\ORM\\Cache\\Region\\FileLockRegion',
            'doctrine.orm.second_level_cache.logger_chain.class' => 'Doctrine\\ORM\\Cache\\Logging\\CacheLoggerChain',
            'doctrine.orm.second_level_cache.logger_statistics.class' => 'Doctrine\\ORM\\Cache\\Logging\\StatisticsCacheLogger',
            'doctrine.orm.second_level_cache.cache_configuration.class' => 'Doctrine\\ORM\\Cache\\CacheConfiguration',
            'doctrine.orm.second_level_cache.regions_configuration.class' => 'Doctrine\\ORM\\Cache\\RegionsConfiguration',
            'doctrine.orm.auto_generate_proxy_classes' => true,
            'doctrine.orm.proxy_dir' => (__DIR__.'/doctrine/orm/Proxies'),
            'doctrine.orm.proxy_namespace' => 'Proxies',
            'doctrine_migrations.namespace' => 'Application\\Migrations',
            'doctrine_migrations.table_name' => 'migration_versions',
            'doctrine_migrations.name' => 'Application Migrations',
            'doctrine_migrations.organize_migrations' => false,
            'infinite_form.attachment.path_helper.class' => 'Infinite\\FormBundle\\Attachment\\PathHelper',
            'infinite_form.attachment.attachment_type.class' => 'Infinite\\FormBundle\\Form\\Type\\AttachmentType',
            'infinite_form.attachment.sanitiser.class' => 'Infinite\\FormBundle\\Attachment\\Sanitiser',
            'infinite_form.attachment.streamer.class' => 'Infinite\\FormBundle\\Attachment\\Streamer',
            'infinite_form.attachment.uploader.class' => 'Infinite\\FormBundle\\Attachment\\Uploader',
            'infinite_form.attachment.save_config' => array(

            ),
            'infinite_form.attachment.default_secret' => 'ThisTokenIsNotSoSecretChangeIt',
            'infinite_form.attachment.entity_manager' => '',
            'infinite_form.entity_search.type.class' => 'Infinite\\FormBundle\\Form\\Type\\EntitySearchType',
            'infinite_form.polycollection.form_type.class' => 'Infinite\\FormBundle\\Form\\Type\\PolyCollectionType',
            'infinite_form.twig_extension.class' => 'Infinite\\FormBundle\\Twig\\FormExtension',
            'knp_menu.factory.class' => 'Knp\\Menu\\MenuFactory',
            'knp_menu.factory_extension.routing.class' => 'Knp\\Menu\\Integration\\Symfony\\RoutingExtension',
            'knp_menu.helper.class' => 'Knp\\Menu\\Twig\\Helper',
            'knp_menu.matcher.class' => 'Knp\\Menu\\Matcher\\Matcher',
            'knp_menu.menu_provider.chain.class' => 'Knp\\Menu\\Provider\\ChainProvider',
            'knp_menu.menu_provider.container_aware.class' => 'Knp\\Bundle\\MenuBundle\\Provider\\ContainerAwareProvider',
            'knp_menu.menu_provider.builder_alias.class' => 'Knp\\Bundle\\MenuBundle\\Provider\\BuilderAliasProvider',
            'knp_menu.renderer_provider.class' => 'Knp\\Bundle\\MenuBundle\\Renderer\\ContainerAwareProvider',
            'knp_menu.renderer.list.class' => 'Knp\\Menu\\Renderer\\ListRenderer',
            'knp_menu.renderer.list.options' => array(

            ),
            'knp_menu.listener.voters.class' => 'Knp\\Bundle\\MenuBundle\\EventListener\\VoterInitializerListener',
            'knp_menu.voter.router.class' => 'Knp\\Menu\\Matcher\\Voter\\RouteVoter',
            'knp_menu.twig.extension.class' => 'Knp\\Menu\\Twig\\MenuExtension',
            'knp_menu.renderer.twig.class' => 'Knp\\Menu\\Renderer\\TwigRenderer',
            'knp_menu.renderer.twig.options' => array(

            ),
            'knp_menu.renderer.twig.template' => 'KnpMenuBundle::menu.html.twig',
            'knp_menu.default_renderer' => 'twig',
            'mopa_bootstrap.bootstrap.install_path' => 'Resources/public/bootstrap',
            'mopa_bootstrap.twig.extension.form.class' => 'Mopa\\Bundle\\BootstrapBundle\\Twig\\FormExtension',
            'mopa_bootstrap.twig.extension.icon.class' => 'Mopa\\Bundle\\BootstrapBundle\\Twig\\IconExtension',
            'mopa_bootstrap.twig.extension.flash.class' => 'Mopa\\Bundle\\BootstrapBundle\\Twig\\FlashExtension',
            'mopa_bootstrap.form.type_extension.embed_form.class' => 'Mopa\\Bundle\\BootstrapBundle\\Form\\Extension\\EmbedFormExtension',
            'mopa_bootstrap.form.type_extension.static_text.class' => 'Mopa\\Bundle\\BootstrapBundle\\Form\\Extension\\StaticTextExtension',
            'mopa_bootstrap.form.type_extension.offset_button.class' => 'Mopa\\Bundle\\BootstrapBundle\\Form\\Extension\\OffsetButtonExtension',
            'mopa_bootstrap.form.type_extension.button.class' => 'Mopa\\Bundle\\BootstrapBundle\\Form\\Extension\\IconButtonExtension',
            'mopa_bootstrap.form.type_extension.help.class' => 'Mopa\\Bundle\\BootstrapBundle\\Form\\Extension\\HelpFormTypeExtension',
            'mopa_bootstrap.form.type_extension.legend.class' => 'Mopa\\Bundle\\BootstrapBundle\\Form\\Extension\\LegendFormTypeExtension',
            'mopa_bootstrap.form.type_extension.error.class' => 'Mopa\\Bundle\\BootstrapBundle\\Form\\Extension\\ErrorTypeFormTypeExtension',
            'mopa_bootstrap.form.type_extension.widget.class' => 'Mopa\\Bundle\\BootstrapBundle\\Form\\Extension\\WidgetFormTypeExtension',
            'mopa_bootstrap.form.type_extension.horizontal.class' => 'Mopa\\Bundle\\BootstrapBundle\\Form\\Extension\\HorizontalFormTypeExtension',
            'mopa_bootstrap.form.type_extension.widget_collection.class' => 'Mopa\\Bundle\\BootstrapBundle\\Form\\Extension\\WidgetCollectionFormTypeExtension',
            'mopa_bootstrap.form.type_extension.date.class' => 'Mopa\\Bundle\\BootstrapBundle\\Form\\Extension\\DateTypeExtension',
            'mopa_bootstrap.form.type_extension.datetime.class' => 'Mopa\\Bundle\\BootstrapBundle\\Form\\Extension\\DatetimeTypeExtension',
            'mopa_bootstrap.form.type_extension.time.class' => 'Mopa\\Bundle\\BootstrapBundle\\Form\\Extension\\TimeTypeExtension',
            'mopa_bootstrap.form.type_extension.tabbed.class' => 'Mopa\\Bundle\\BootstrapBundle\\Form\\Extension\\TabbedFormTypeExtension',
            'mopa_bootstrap.form.type.tab.class' => 'Mopa\\Bundle\\BootstrapBundle\\Form\\Type\\TabType',
            'mopa_bootstrap.form.type.form_actions.class' => 'Mopa\\Bundle\\BootstrapBundle\\Form\\Type\\FormActionsType',
            'mopa_bootstrap.form.show_legend' => false,
            'mopa_bootstrap.form.render_required_asterisk' => true,
            'mopa_bootstrap.form.render_optional_text' => false,
            'mopa_bootstrap.form.collection.widget_remove_btn' => array(
                'icon' => 'remove',
                'attr' => array(
                    'class' => 'btn btn-danger',
                ),
                'wrapper_div' => array(
                    'class' => 'form-group',
                ),
                'horizontal_wrapper_div' => array(
                    'class' => 'col-sm-3 col-sm-offset-3',
                ),
                'label' => 'remove_item',
                'translation_domain' => NULL,
                'icon_inverted' => false,
            ),
            'mopa_bootstrap.form.collection.widget_add_btn' => array(
                'icon' => 'plus',
                'attr' => array(
                    'class' => 'btn btn-primary',
                ),
                'label' => 'add_item',
                'translation_domain' => NULL,
                'icon_inverted' => false,
            ),
            'mopa_bootstrap.form.allow_legacy' => false,
            'mopa_bootstrap.form.templating' => 'MopaBootstrapBundle:Form:fields.html.twig',
            'mopa_bootstrap.form.horizontal' => true,
            'mopa_bootstrap.form.horizontal_label_class' => 'col-sm-3',
            'mopa_bootstrap.form.horizontal_label_div_class' => NULL,
            'mopa_bootstrap.form.horizontal_label_offset_class' => 'col-sm-offset-3',
            'mopa_bootstrap.form.horizontal_input_wrapper_class' => 'col-sm-9',
            'mopa_bootstrap.form.date_wrapper_class.year' => 'col-xs-4',
            'mopa_bootstrap.form.date_wrapper_class.month' => 'col-xs-4',
            'mopa_bootstrap.form.date_wrapper_class.day' => 'col-xs-4',
            'mopa_bootstrap.form.render_fieldset' => true,
            'mopa_bootstrap.form.render_collection_item' => true,
            'mopa_bootstrap.form.show_child_legend' => false,
            'mopa_bootstrap.form.legend_tag' => 'legend',
            'mopa_bootstrap.form.checkbox_label' => 'both',
            'mopa_bootstrap.form.error_type' => NULL,
            'mopa_bootstrap.form.tabs.class' => 'nav nav-tabs',
            'mopa_bootstrap.form.help_widget.popover' => array(
                'title' => NULL,
                'content' => NULL,
                'trigger' => 'hover',
                'toggle' => 'popover',
                'placement' => 'right',
                'selector' => NULL,
            ),
            'mopa_bootstrap.form.help_label.tooltip' => array(
                'title' => NULL,
                'text' => NULL,
                'icon' => 'info-sign',
                'placement' => 'top',
            ),
            'mopa_bootstrap.form.help_label.popover' => array(
                'title' => NULL,
                'content' => NULL,
                'text' => NULL,
                'icon' => 'info-sign',
                'placement' => 'top',
            ),
            'mopa_bootstrap.form.help_block.tooltip' => array(
                'title' => NULL,
                'text' => NULL,
                'icon' => 'info-sign',
                'placement' => 'top',
            ),
            'mopa_bootstrap.form.help_block.popover' => array(
                'title' => NULL,
                'content' => NULL,
                'text' => NULL,
                'icon' => 'info-sign',
                'placement' => 'top',
            ),
            'mopa_bootstrap.icons.icon_set' => 'glyphicons',
            'mopa_bootstrap.icons.shortcut' => 'icon',
            'liip_imagine.filter.configuration.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\FilterConfiguration',
            'liip_imagine.filter.manager.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\FilterManager',
            'liip_imagine.data.manager.class' => 'Liip\\ImagineBundle\\Imagine\\Data\\DataManager',
            'liip_imagine.cache.manager.class' => 'Liip\\ImagineBundle\\Imagine\\Cache\\CacheManager',
            'liip_imagine.cache.signer.class' => 'Liip\\ImagineBundle\\Imagine\\Cache\\Signer',
            'liip_imagine.binary.mime_type_guesser.class' => 'Liip\\ImagineBundle\\Binary\\SimpleMimeTypeGuesser',
            'liip_imagine.controller.class' => 'Liip\\ImagineBundle\\Controller\\ImagineController',
            'liip_imagine.twig.extension.class' => 'Liip\\ImagineBundle\\Templating\\ImagineExtension',
            'liip_imagine.templating.helper.class' => 'Liip\\ImagineBundle\\Templating\\Helper\\ImagineHelper',
            'liip_imagine.gd.class' => 'Imagine\\Gd\\Imagine',
            'liip_imagine.imagick.class' => 'Imagine\\Imagick\\Imagine',
            'liip_imagine.gmagick.class' => 'Imagine\\Gmagick\\Imagine',
            'liip_imagine.filter.loader.relative_resize.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\RelativeResizeFilterLoader',
            'liip_imagine.filter.loader.resize.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\ResizeFilterLoader',
            'liip_imagine.filter.loader.thumbnail.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\ThumbnailFilterLoader',
            'liip_imagine.filter.loader.crop.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\CropFilterLoader',
            'liip_imagine.filter.loader.grayscale.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\GrayscaleFilterLoader',
            'liip_imagine.filter.loader.paste.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\PasteFilterLoader',
            'liip_imagine.filter.loader.watermark.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\WatermarkFilterLoader',
            'liip_imagine.filter.loader.strip.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\StripFilterLoader',
            'liip_imagine.filter.loader.background.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\BackgroundFilterLoader',
            'liip_imagine.filter.loader.scale.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\ScaleFilterLoader',
            'liip_imagine.filter.loader.upscale.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\UpscaleFilterLoader',
            'liip_imagine.filter.loader.downscale.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\DownscaleFilterLoader',
            'liip_imagine.filter.loader.auto_rotate.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\AutoRotateFilterLoader',
            'liip_imagine.filter.loader.rotate.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\RotateFilterLoader',
            'liip_imagine.filter.loader.interlace.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\InterlaceFilterLoader',
            'liip_imagine.binary.loader.filesystem.class' => 'Liip\\ImagineBundle\\Binary\\Loader\\FileSystemLoader',
            'liip_imagine.binary.loader.stream.class' => 'Liip\\ImagineBundle\\Binary\\Loader\\StreamLoader',
            'liip_imagine.binary.loader.flysystem.class' => 'Liip\\ImagineBundle\\Binary\\Loader\\FlysystemLoader',
            'liip_imagine.binary.locator.filesystem.class' => 'Liip\\ImagineBundle\\Binary\\Locator\\FileSystemLocator',
            'liip_imagine.binary.locator.filesystem_insecure.class' => 'Liip\\ImagineBundle\\Binary\\Locator\\FileSystemInsecureLocator',
            'liip_imagine.cache.resolver.web_path.class' => 'Liip\\ImagineBundle\\Imagine\\Cache\\Resolver\\WebPathResolver',
            'liip_imagine.cache.resolver.no_cache_web_path.class' => 'Liip\\ImagineBundle\\Imagine\\Cache\\Resolver\\NoCacheWebPathResolver',
            'liip_imagine.cache.resolver.aws_s3.class' => 'Liip\\ImagineBundle\\Imagine\\Cache\\Resolver\\AwsS3Resolver',
            'liip_imagine.cache.resolver.cache.class' => 'Liip\\ImagineBundle\\Imagine\\Cache\\Resolver\\CacheResolver',
            'liip_imagine.cache.resolver.flysystem.class' => 'Liip\\ImagineBundle\\Imagine\\Cache\\Resolver\\FlysystemResolver',
            'liip_imagine.cache.resolver.proxy.class' => 'Liip\\ImagineBundle\\Imagine\\Cache\\Resolver\\ProxyResolver',
            'liip_imagine.form.type.image.class' => 'Liip\\ImagineBundle\\Form\\Type\\ImageType',
            'liip_imagine.meta_data.reader.class' => 'Imagine\\Image\\Metadata\\ExifMetadataReader',
            'liip_imagine.filter.post_processor.jpegoptim.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\PostProcessor\\JpegOptimPostProcessor',
            'liip_imagine.jpegoptim.binary' => '/usr/bin/jpegoptim',
            'liip_imagine.jpegoptim.stripall' => true,
            'liip_imagine.jpegoptim.max' => NULL,
            'liip_imagine.jpegoptim.progressive' => true,
            'liip_imagine.jpegoptim.tempdir' => NULL,
            'liip_imagine.filter.post_processor.optipng.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\PostProcessor\\OptiPngPostProcessor',
            'liip_imagine.optipng.binary' => '/usr/bin/optipng',
            'liip_imagine.optipng.level' => 7,
            'liip_imagine.optipng.stripall' => true,
            'liip_imagine.optipng.tempdir' => NULL,
            'liip_imagine.filter.post_processor.pngquant.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\PostProcessor\\PngquantPostProcessor',
            'liip_imagine.pngquant.binary' => '/usr/bin/pngquant',
            'liip_imagine.filter.post_processor.mozjpeg.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\PostProcessor\\MozJpegPostProcessor',
            'liip_imagine.mozjpeg.binary' => '/opt/mozjpeg/bin/cjpeg',
            'liip_imagine.cache.resolver.default' => 'default',
            'liip_imagine.default_image' => NULL,
            'liip_imagine.filter_sets' => array(
                'cache' => array(
                    'quality' => 100,
                    'jpeg_quality' => NULL,
                    'png_compression_level' => NULL,
                    'png_compression_filter' => NULL,
                    'format' => NULL,
                    'animated' => false,
                    'cache' => NULL,
                    'data_loader' => NULL,
                    'default_image' => NULL,
                    'filters' => array(

                    ),
                    'post_processors' => array(

                    ),
                ),
                'default' => array(
                    'quality' => 100,
                    'jpeg_quality' => NULL,
                    'png_compression_level' => NULL,
                    'png_compression_filter' => NULL,
                    'format' => NULL,
                    'animated' => false,
                    'cache' => NULL,
                    'data_loader' => NULL,
                    'default_image' => NULL,
                    'filters' => array(

                    ),
                    'post_processors' => array(

                    ),
                ),
                'full' => array(
                    'quality' => 100,
                    'filters' => array(
                        'relative_resize' => array(
                            'scale' => 1,
                        ),
                    ),
                    'jpeg_quality' => NULL,
                    'png_compression_level' => NULL,
                    'png_compression_filter' => NULL,
                    'format' => NULL,
                    'animated' => false,
                    'cache' => NULL,
                    'data_loader' => NULL,
                    'default_image' => NULL,
                    'post_processors' => array(

                    ),
                ),
                'cmf_full' => array(
                    'data_loader' => 'cmf_media_doctrine_phpcr',
                    'quality' => 100,
                    'filters' => array(
                        'relative_resize' => array(
                            'scale' => 1,
                        ),
                    ),
                    'jpeg_quality' => NULL,
                    'png_compression_level' => NULL,
                    'png_compression_filter' => NULL,
                    'format' => NULL,
                    'animated' => false,
                    'cache' => NULL,
                    'default_image' => NULL,
                    'post_processors' => array(

                    ),
                ),
                'thumbnail' => array(
                    'quality' => 100,
                    'filters' => array(
                        'thumbnail' => array(
                            'size' => array(
                                0 => 60,
                                1 => 60,
                            ),
                            'mode' => 'outbound',
                        ),
                    ),
                    'jpeg_quality' => NULL,
                    'png_compression_level' => NULL,
                    'png_compression_filter' => NULL,
                    'format' => NULL,
                    'animated' => false,
                    'cache' => NULL,
                    'data_loader' => NULL,
                    'default_image' => NULL,
                    'post_processors' => array(

                    ),
                ),
                'cmf_thumbnail' => array(
                    'data_loader' => 'cmf_media_doctrine_phpcr',
                    'filters' => array(
                        'thumbnail' => array(
                            'size' => array(
                                0 => 60,
                                1 => 60,
                            ),
                        ),
                    ),
                    'quality' => 100,
                    'jpeg_quality' => NULL,
                    'png_compression_level' => NULL,
                    'png_compression_filter' => NULL,
                    'format' => NULL,
                    'animated' => false,
                    'cache' => NULL,
                    'default_image' => NULL,
                    'post_processors' => array(

                    ),
                ),
                'thumbnail_XL' => array(
                    'quality' => 100,
                    'filters' => array(
                        'thumbnail' => array(
                            'size' => array(
                                0 => 90,
                                1 => 90,
                            ),
                            'mode' => 'outbound',
                        ),
                    ),
                    'jpeg_quality' => NULL,
                    'png_compression_level' => NULL,
                    'png_compression_filter' => NULL,
                    'format' => NULL,
                    'animated' => false,
                    'cache' => NULL,
                    'data_loader' => NULL,
                    'default_image' => NULL,
                    'post_processors' => array(

                    ),
                ),
                'thumbnail_S' => array(
                    'quality' => 100,
                    'filters' => array(
                        'thumbnail' => array(
                            'size' => array(
                                0 => 80,
                                1 => 55,
                            ),
                            'mode' => 'outbound',
                        ),
                    ),
                    'jpeg_quality' => NULL,
                    'png_compression_level' => NULL,
                    'png_compression_filter' => NULL,
                    'format' => NULL,
                    'animated' => false,
                    'cache' => NULL,
                    'data_loader' => NULL,
                    'default_image' => NULL,
                    'post_processors' => array(

                    ),
                ),
                'cmf_thumbnail_S' => array(
                    'data_loader' => 'cmf_media_doctrine_phpcr',
                    'quality' => 100,
                    'filters' => array(
                        'thumbnail' => array(
                            'size' => array(
                                0 => 80,
                                1 => 55,
                            ),
                            'mode' => 'outbound',
                        ),
                    ),
                    'jpeg_quality' => NULL,
                    'png_compression_level' => NULL,
                    'png_compression_filter' => NULL,
                    'format' => NULL,
                    'animated' => false,
                    'cache' => NULL,
                    'default_image' => NULL,
                    'post_processors' => array(

                    ),
                ),
                'cmf_block_medium' => array(
                    'data_loader' => 'cmf_media_doctrine_phpcr',
                    'filters' => array(
                        'relative_resize' => array(
                            'widen' => 380,
                        ),
                    ),
                    'quality' => 100,
                    'jpeg_quality' => NULL,
                    'png_compression_level' => NULL,
                    'png_compression_filter' => NULL,
                    'format' => NULL,
                    'animated' => false,
                    'cache' => NULL,
                    'default_image' => NULL,
                    'post_processors' => array(

                    ),
                ),
                'image_box_4' => array(
                    'filters' => array(
                        'relative_resize' => array(
                            'widen' => 300,
                        ),
                    ),
                    'quality' => 100,
                    'jpeg_quality' => NULL,
                    'png_compression_level' => NULL,
                    'png_compression_filter' => NULL,
                    'format' => NULL,
                    'animated' => false,
                    'cache' => NULL,
                    'data_loader' => NULL,
                    'default_image' => NULL,
                    'post_processors' => array(

                    ),
                ),
                'magazine_item' => array(
                    'quality' => 100,
                    'filters' => array(
                        'upscale' => array(
                            'min' => array(
                                0 => 500,
                                1 => 344,
                            ),
                        ),
                        'thumbnail' => array(
                            'size' => array(
                                0 => 500,
                                1 => 344,
                            ),
                            'mode' => 'outbound',
                        ),
                    ),
                    'jpeg_quality' => NULL,
                    'png_compression_level' => NULL,
                    'png_compression_filter' => NULL,
                    'format' => NULL,
                    'animated' => false,
                    'cache' => NULL,
                    'data_loader' => NULL,
                    'default_image' => NULL,
                    'post_processors' => array(

                    ),
                ),
                'cmf_magazine_item' => array(
                    'data_loader' => 'cmf_media_doctrine_phpcr',
                    'quality' => 100,
                    'filters' => array(
                        'upscale' => array(
                            'min' => array(
                                0 => 500,
                                1 => 344,
                            ),
                        ),
                        'thumbnail' => array(
                            'size' => array(
                                0 => 500,
                                1 => 344,
                            ),
                            'mode' => 'outbound',
                        ),
                    ),
                    'jpeg_quality' => NULL,
                    'png_compression_level' => NULL,
                    'png_compression_filter' => NULL,
                    'format' => NULL,
                    'animated' => false,
                    'cache' => NULL,
                    'default_image' => NULL,
                    'post_processors' => array(

                    ),
                ),
                'magazine_item_wide' => array(
                    'quality' => 100,
                    'filters' => array(
                        'upscale' => array(
                            'min' => array(
                                0 => 600,
                                1 => 300,
                            ),
                        ),
                        'thumbnail' => array(
                            'size' => array(
                                0 => 600,
                                1 => 300,
                            ),
                            'mode' => 'outbound',
                        ),
                    ),
                    'jpeg_quality' => NULL,
                    'png_compression_level' => NULL,
                    'png_compression_filter' => NULL,
                    'format' => NULL,
                    'animated' => false,
                    'cache' => NULL,
                    'data_loader' => NULL,
                    'default_image' => NULL,
                    'post_processors' => array(

                    ),
                ),
                'cmf_magazine_item_wide' => array(
                    'quality' => 100,
                    'data_loader' => 'cmf_media_doctrine_phpcr',
                    'filters' => array(
                        'upscale' => array(
                            'min' => array(
                                0 => 600,
                                1 => 300,
                            ),
                        ),
                        'thumbnail' => array(
                            'size' => array(
                                0 => 600,
                                1 => 300,
                            ),
                            'mode' => 'outbound',
                        ),
                    ),
                    'jpeg_quality' => NULL,
                    'png_compression_level' => NULL,
                    'png_compression_filter' => NULL,
                    'format' => NULL,
                    'animated' => false,
                    'cache' => NULL,
                    'default_image' => NULL,
                    'post_processors' => array(

                    ),
                ),
                'image_upload_thumbnail' => array(
                    'data_loader' => 'cmf_media_doctrine_phpcr',
                    'filters' => array(
                        'thumbnail' => array(
                            'size' => array(
                                0 => 100,
                                1 => 100,
                            ),
                            'mode' => 'outbound',
                        ),
                    ),
                    'quality' => 100,
                    'jpeg_quality' => NULL,
                    'png_compression_level' => NULL,
                    'png_compression_filter' => NULL,
                    'format' => NULL,
                    'animated' => false,
                    'cache' => NULL,
                    'default_image' => NULL,
                    'post_processors' => array(

                    ),
                ),
                'cmf_block' => array(
                    'data_loader' => 'cmf_media_doctrine_phpcr',
                    'filters' => array(
                        'relative_resize' => array(
                            'scale' => 1,
                        ),
                    ),
                    'quality' => 100,
                    'jpeg_quality' => NULL,
                    'png_compression_level' => NULL,
                    'png_compression_filter' => NULL,
                    'format' => NULL,
                    'animated' => false,
                    'cache' => NULL,
                    'default_image' => NULL,
                    'post_processors' => array(

                    ),
                ),
                'small_width_fixed' => array(
                    'filters' => array(
                        'relative_resize' => array(
                            'widen' => 100,
                        ),
                    ),
                    'quality' => 100,
                    'jpeg_quality' => NULL,
                    'png_compression_level' => NULL,
                    'png_compression_filter' => NULL,
                    'format' => NULL,
                    'animated' => false,
                    'cache' => NULL,
                    'data_loader' => NULL,
                    'default_image' => NULL,
                    'post_processors' => array(

                    ),
                ),
                'small_height_fixed' => array(
                    'filters' => array(
                        'relative_resize' => array(
                            'heighten' => 80,
                        ),
                    ),
                    'quality' => 100,
                    'jpeg_quality' => NULL,
                    'png_compression_level' => NULL,
                    'png_compression_filter' => NULL,
                    'format' => NULL,
                    'animated' => false,
                    'cache' => NULL,
                    'data_loader' => NULL,
                    'default_image' => NULL,
                    'post_processors' => array(

                    ),
                ),
                'logo' => array(
                    'quality' => 100,
                    'filters' => array(
                        'relative_resize' => array(
                            'widen' => 200,
                        ),
                    ),
                    'jpeg_quality' => NULL,
                    'png_compression_level' => NULL,
                    'png_compression_filter' => NULL,
                    'format' => NULL,
                    'animated' => false,
                    'cache' => NULL,
                    'data_loader' => NULL,
                    'default_image' => NULL,
                    'post_processors' => array(

                    ),
                ),
                'pub_banner' => array(
                    'quality' => 100,
                    'filters' => array(
                        'thumbnail' => array(
                            'size' => array(
                                0 => 300,
                                1 => 250,
                            ),
                            'mode' => 'outbound',
                        ),
                    ),
                    'jpeg_quality' => NULL,
                    'png_compression_level' => NULL,
                    'png_compression_filter' => NULL,
                    'format' => NULL,
                    'animated' => false,
                    'cache' => NULL,
                    'data_loader' => NULL,
                    'default_image' => NULL,
                    'post_processors' => array(

                    ),
                ),
            ),
            'liip_imagine.binary.loader.default' => 'default',
            'liip_imagine.controller.filter_action' => 'liip_imagine.controller:filterAction',
            'liip_imagine.controller.filter_runtime_action' => 'liip_imagine.controller:filterRuntimeAction',
            'knp.doctrine_behaviors.reflection.class_analyzer.class' => 'Knp\\DoctrineBehaviors\\Reflection\\ClassAnalyzer',
            'knp.doctrine_behaviors.reflection.is_recursive' => true,
            'knp.doctrine_behaviors.translatable_subscriber.class' => 'Knp\\DoctrineBehaviors\\ORM\\Translatable\\TranslatableSubscriber',
            'knp.doctrine_behaviors.translatable_subscriber.current_locale_callable.class' => 'Knp\\DoctrineBehaviors\\ORM\\Translatable\\CurrentLocaleCallable',
            'knp.doctrine_behaviors.translatable_subscriber.default_locale_callable.class' => 'Knp\\DoctrineBehaviors\\ORM\\Translatable\\DefaultLocaleCallable',
            'knp.doctrine_behaviors.translatable_subscriber.translatable_trait' => 'Knp\\DoctrineBehaviors\\Model\\Translatable\\Translatable',
            'knp.doctrine_behaviors.translatable_subscriber.translation_trait' => 'Knp\\DoctrineBehaviors\\Model\\Translatable\\Translation',
            'knp.doctrine_behaviors.translatable_subscriber.translatable_fetch_method' => 'LAZY',
            'knp.doctrine_behaviors.translatable_subscriber.translation_fetch_method' => 'LAZY',
            'knp.doctrine_behaviors.softdeletable_subscriber.class' => 'Knp\\DoctrineBehaviors\\ORM\\SoftDeletable\\SoftDeletableSubscriber',
            'knp.doctrine_behaviors.softdeletable_subscriber.softdeletable_trait' => 'Knp\\DoctrineBehaviors\\Model\\SoftDeletable\\SoftDeletable',
            'knp.doctrine_behaviors.timestampable_subscriber.class' => 'Knp\\DoctrineBehaviors\\ORM\\Timestampable\\TimestampableSubscriber',
            'knp.doctrine_behaviors.timestampable_subscriber.timestampable_trait' => 'Knp\\DoctrineBehaviors\\Model\\Timestampable\\Timestampable',
            'knp.doctrine_behaviors.timestampable_subscriber.db_field_type' => 'datetime',
            'knp.doctrine_behaviors.blameable_subscriber.class' => 'Knp\\DoctrineBehaviors\\ORM\\Blameable\\BlameableSubscriber',
            'knp.doctrine_behaviors.blameable_subscriber.blameable_trait' => 'Knp\\DoctrineBehaviors\\Model\\Blameable\\Blameable',
            'knp.doctrine_behaviors.blameable_subscriber.user_callable.class' => 'Knp\\DoctrineBehaviors\\ORM\\Blameable\\UserCallable',
            'knp.doctrine_behaviors.loggable_subscriber.class' => 'Knp\\DoctrineBehaviors\\ORM\\Loggable\\LoggableSubscriber',
            'knp.doctrine_behaviors.loggable_subscriber.logger_callable.class' => 'Knp\\DoctrineBehaviors\\ORM\\Loggable\\LoggerCallable',
            'knp.doctrine_behaviors.geocodable_subscriber.class' => 'Knp\\DoctrineBehaviors\\ORM\\Geocodable\\GeocodableSubscriber',
            'knp.doctrine_behaviors.geocodable_subscriber.geocodable_trait' => 'Knp\\DoctrineBehaviors\\Model\\Geocodable\\Geocodable',
            'knp.doctrine_behaviors.sluggable_subscriber.class' => 'Knp\\DoctrineBehaviors\\ORM\\Sluggable\\SluggableSubscriber',
            'knp.doctrine_behaviors.sluggable_subscriber.sluggable_trait' => 'Knp\\DoctrineBehaviors\\Model\\Sluggable\\Sluggable',
            'knp.doctrine_behaviors.tree_subscriber.class' => 'Knp\\DoctrineBehaviors\\ORM\\Tree\\TreeSubscriber',
            'knp.doctrine_behaviors.tree_subscriber.tree_trait' => 'Knp\\DoctrineBehaviors\\Model\\Tree\\Node',
            'knp.doctrine_behaviors.sortable_subscriber.class' => 'Knp\\DoctrineBehaviors\\ORM\\Sortable\\SortableSubscriber',
            'knp.doctrine_behaviors.sortable_subscriber.sortable_trait' => 'Knp\\DoctrineBehaviors\\Model\\Sortable\\Sortable',
            'zenstruck_redirect.redirect_class' => 'AppBundle\\Entity\\Redirection',
            'zenstruck_redirect.redirect_manager.class' => 'Zenstruck\\RedirectBundle\\Service\\RedirectManager',
            'zenstruck_redirect.redirect_listener.class' => 'Zenstruck\\RedirectBundle\\EventListener\\RedirectOnNotFoundListener',
            'zenstruck_redirect.not_found_class' => 'AppBundle\\Entity\\NotFound',
            'zenstruck_redirect.not_found_manager.class' => 'Zenstruck\\RedirectBundle\\Service\\NotFoundManager',
            'zenstruck_redirect.not_found_listener.class' => 'Zenstruck\\RedirectBundle\\EventListener\\CreateNotFoundListener',
            'zenstruck_redirect.remove_not_found_subscriber.class' => 'Zenstruck\\RedirectBundle\\EventListener\\Doctrine\\RemoveNotFoundSubscriber',
            'web_profiler.debug_toolbar.position' => 'bottom',
            'web_profiler.debug_toolbar.intercept_redirects' => false,
            'web_profiler.debug_toolbar.mode' => 2,
            'data_collector.templates' => array(
                'data_collector.request' => array(
                    0 => 'request',
                    1 => '@WebProfiler/Collector/request.html.twig',
                ),
                'data_collector.time' => array(
                    0 => 'time',
                    1 => '@WebProfiler/Collector/time.html.twig',
                ),
                'data_collector.memory' => array(
                    0 => 'memory',
                    1 => '@WebProfiler/Collector/memory.html.twig',
                ),
                'data_collector.ajax' => array(
                    0 => 'ajax',
                    1 => '@WebProfiler/Collector/ajax.html.twig',
                ),
                'data_collector.form' => array(
                    0 => 'form',
                    1 => '@WebProfiler/Collector/form.html.twig',
                ),
                'data_collector.exception' => array(
                    0 => 'exception',
                    1 => '@WebProfiler/Collector/exception.html.twig',
                ),
                'data_collector.logger' => array(
                    0 => 'logger',
                    1 => '@WebProfiler/Collector/logger.html.twig',
                ),
                'data_collector.events' => array(
                    0 => 'events',
                    1 => '@WebProfiler/Collector/events.html.twig',
                ),
                'data_collector.router' => array(
                    0 => 'router',
                    1 => '@WebProfiler/Collector/router.html.twig',
                ),
                'data_collector.translation' => array(
                    0 => 'translation',
                    1 => '@WebProfiler/Collector/translation.html.twig',
                ),
                'data_collector.security' => array(
                    0 => 'security',
                    1 => '@Security/Collector/security.html.twig',
                ),
                'data_collector.twig' => array(
                    0 => 'twig',
                    1 => '@WebProfiler/Collector/twig.html.twig',
                ),
                'data_collector.doctrine' => array(
                    0 => 'db',
                    1 => '@Doctrine/Collector/db.html.twig',
                ),
                'doctrine_phpcr.data_collector' => array(
                    0 => 'phpcr',
                    1 => 'DoctrinePHPCRBundle:Collector:phpcr',
                ),
                'swiftmailer.data_collector' => array(
                    0 => 'swiftmailer',
                    1 => '@Swiftmailer/Collector/swiftmailer.html.twig',
                ),
                'data_collector.dump' => array(
                    0 => 'dump',
                    1 => '@Debug/Profiler/dump.html.twig',
                ),
                'sonata.block.data_collector' => array(
                    0 => 'block',
                    1 => 'SonataBlockBundle:Profiler:block.html.twig',
                ),
                'fos_elastica.data_collector' => array(
                    0 => 'elastica',
                    1 => 'FOSElasticaBundle:Collector:elastica',
                ),
                'data_collector.config' => array(
                    0 => 'config',
                    1 => '@WebProfiler/Collector/config.html.twig',
                ),
            ),
            'console.command.ids' => array(
                0 => 'sylius.console.command.resource_debug',
                1 => 'sensio_distribution.security_checker.command',
            ),
            'sylius.attribute.attribute_types' => array(
                'text' => 'Text',
                'textarea' => 'Textarea',
                'checkbox' => 'Checkbox',
                'integer' => 'Integer',
                'percent' => 'Percent',
                'datetime' => 'Datetime',
                'date' => 'Date',
            ),
            'doctrine_phpcr.migrate.migrators' => array(

            ),
        );
    }
}

class SyliusBundleResourceBundleDoctrineORMEntityRepository_000000004b511bf3000000000f6225f6877f40b66baaf9ca0d0afe40b8a3d26d extends \Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder58ecd21f7c4f0994656377 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer58ecd21f7c532536019788 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties58ecd21f7c43c007239895 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function add(\Sylius\Component\Resource\Model\ResourceInterface $resource)
    {
        $this->initializer58ecd21f7c532536019788 && $this->initializer58ecd21f7c532536019788->__invoke($this->valueHolder58ecd21f7c4f0994656377, $this, 'add', array('resource' => $resource), $this->initializer58ecd21f7c532536019788);

        return $this->valueHolder58ecd21f7c4f0994656377->add($resource);
    }

    /**
     * {@inheritDoc}
     */
    public function remove(\Sylius\Component\Resource\Model\ResourceInterface $resource)
    {
        $this->initializer58ecd21f7c532536019788 && $this->initializer58ecd21f7c532536019788->__invoke($this->valueHolder58ecd21f7c4f0994656377, $this, 'remove', array('resource' => $resource), $this->initializer58ecd21f7c532536019788);

        return $this->valueHolder58ecd21f7c4f0994656377->remove($resource);
    }

    /**
     * {@inheritDoc}
     */
    public function createPaginator(array $criteria = array(), array $sorting = array())
    {
        $this->initializer58ecd21f7c532536019788 && $this->initializer58ecd21f7c532536019788->__invoke($this->valueHolder58ecd21f7c4f0994656377, $this, 'createPaginator', array('criteria' => $criteria, 'sorting' => $sorting), $this->initializer58ecd21f7c532536019788);

        return $this->valueHolder58ecd21f7c4f0994656377->createPaginator($criteria, $sorting);
    }

    /**
     * {@inheritDoc}
     */
    public function createQueryBuilder($alias, $indexBy = null)
    {
        $this->initializer58ecd21f7c532536019788 && $this->initializer58ecd21f7c532536019788->__invoke($this->valueHolder58ecd21f7c4f0994656377, $this, 'createQueryBuilder', array('alias' => $alias, 'indexBy' => $indexBy), $this->initializer58ecd21f7c532536019788);

        return $this->valueHolder58ecd21f7c4f0994656377->createQueryBuilder($alias, $indexBy);
    }

    /**
     * {@inheritDoc}
     */
    public function createResultSetMappingBuilder($alias)
    {
        $this->initializer58ecd21f7c532536019788 && $this->initializer58ecd21f7c532536019788->__invoke($this->valueHolder58ecd21f7c4f0994656377, $this, 'createResultSetMappingBuilder', array('alias' => $alias), $this->initializer58ecd21f7c532536019788);

        return $this->valueHolder58ecd21f7c4f0994656377->createResultSetMappingBuilder($alias);
    }

    /**
     * {@inheritDoc}
     */
    public function createNamedQuery($queryName)
    {
        $this->initializer58ecd21f7c532536019788 && $this->initializer58ecd21f7c532536019788->__invoke($this->valueHolder58ecd21f7c4f0994656377, $this, 'createNamedQuery', array('queryName' => $queryName), $this->initializer58ecd21f7c532536019788);

        return $this->valueHolder58ecd21f7c4f0994656377->createNamedQuery($queryName);
    }

    /**
     * {@inheritDoc}
     */
    public function createNativeNamedQuery($queryName)
    {
        $this->initializer58ecd21f7c532536019788 && $this->initializer58ecd21f7c532536019788->__invoke($this->valueHolder58ecd21f7c4f0994656377, $this, 'createNativeNamedQuery', array('queryName' => $queryName), $this->initializer58ecd21f7c532536019788);

        return $this->valueHolder58ecd21f7c4f0994656377->createNativeNamedQuery($queryName);
    }

    /**
     * {@inheritDoc}
     */
    public function clear()
    {
        $this->initializer58ecd21f7c532536019788 && $this->initializer58ecd21f7c532536019788->__invoke($this->valueHolder58ecd21f7c4f0994656377, $this, 'clear', array(), $this->initializer58ecd21f7c532536019788);

        return $this->valueHolder58ecd21f7c4f0994656377->clear();
    }

    /**
     * {@inheritDoc}
     */
    public function find($id, $lockMode = null, $lockVersion = null)
    {
        $this->initializer58ecd21f7c532536019788 && $this->initializer58ecd21f7c532536019788->__invoke($this->valueHolder58ecd21f7c4f0994656377, $this, 'find', array('id' => $id, 'lockMode' => $lockMode, 'lockVersion' => $lockVersion), $this->initializer58ecd21f7c532536019788);

        return $this->valueHolder58ecd21f7c4f0994656377->find($id, $lockMode, $lockVersion);
    }

    /**
     * {@inheritDoc}
     */
    public function findAll()
    {
        $this->initializer58ecd21f7c532536019788 && $this->initializer58ecd21f7c532536019788->__invoke($this->valueHolder58ecd21f7c4f0994656377, $this, 'findAll', array(), $this->initializer58ecd21f7c532536019788);

        return $this->valueHolder58ecd21f7c4f0994656377->findAll();
    }

    /**
     * {@inheritDoc}
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $this->initializer58ecd21f7c532536019788 && $this->initializer58ecd21f7c532536019788->__invoke($this->valueHolder58ecd21f7c4f0994656377, $this, 'findBy', array('criteria' => $criteria, 'orderBy' => $orderBy, 'limit' => $limit, 'offset' => $offset), $this->initializer58ecd21f7c532536019788);

        return $this->valueHolder58ecd21f7c4f0994656377->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * {@inheritDoc}
     */
    public function findOneBy(array $criteria, array $orderBy = null)
    {
        $this->initializer58ecd21f7c532536019788 && $this->initializer58ecd21f7c532536019788->__invoke($this->valueHolder58ecd21f7c4f0994656377, $this, 'findOneBy', array('criteria' => $criteria, 'orderBy' => $orderBy), $this->initializer58ecd21f7c532536019788);

        return $this->valueHolder58ecd21f7c4f0994656377->findOneBy($criteria, $orderBy);
    }

    /**
     * {@inheritDoc}
     */
    public function __call($method, $arguments)
    {
        $this->initializer58ecd21f7c532536019788 && $this->initializer58ecd21f7c532536019788->__invoke($this->valueHolder58ecd21f7c4f0994656377, $this, '__call', array('method' => $method, 'arguments' => $arguments), $this->initializer58ecd21f7c532536019788);

        return $this->valueHolder58ecd21f7c4f0994656377->__call($method, $arguments);
    }

    /**
     * {@inheritDoc}
     */
    public function getClassName()
    {
        $this->initializer58ecd21f7c532536019788 && $this->initializer58ecd21f7c532536019788->__invoke($this->valueHolder58ecd21f7c4f0994656377, $this, 'getClassName', array(), $this->initializer58ecd21f7c532536019788);

        return $this->valueHolder58ecd21f7c4f0994656377->getClassName();
    }

    /**
     * {@inheritDoc}
     */
    public function matching(\Doctrine\Common\Collections\Criteria $criteria)
    {
        $this->initializer58ecd21f7c532536019788 && $this->initializer58ecd21f7c532536019788->__invoke($this->valueHolder58ecd21f7c4f0994656377, $this, 'matching', array('criteria' => $criteria), $this->initializer58ecd21f7c532536019788);

        return $this->valueHolder58ecd21f7c4f0994656377->matching($criteria);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?: $reflection = new \ReflectionClass(__CLASS__);
        $instance = (new \ReflectionClass(get_class()))->newInstanceWithoutConstructor();

        unset($instance->_entityName, $instance->_em, $instance->_class);

        $instance->initializer58ecd21f7c532536019788 = $initializer;

        return $instance;
    }

    /**
     * {@inheritDoc}
     */
    public function __construct($em, \Doctrine\ORM\Mapping\ClassMetadata $class)
    {
        static $reflection;

        if (! $this->valueHolder58ecd21f7c4f0994656377) {
            $reflection = $reflection ?: new \ReflectionClass('Sylius\\Bundle\\ResourceBundle\\Doctrine\\ORM\\EntityRepository');
            $this->valueHolder58ecd21f7c4f0994656377 = $reflection->newInstanceWithoutConstructor();
        unset($this->_entityName, $this->_em, $this->_class);

        }

        $this->valueHolder58ecd21f7c4f0994656377->__construct($em, $class);
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer58ecd21f7c532536019788 && $this->initializer58ecd21f7c532536019788->__invoke($this->valueHolder58ecd21f7c4f0994656377, $this, '__get', ['name' => $name], $this->initializer58ecd21f7c532536019788);

        if (isset(self::$publicProperties58ecd21f7c43c007239895[$name])) {
            return $this->valueHolder58ecd21f7c4f0994656377->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder58ecd21f7c4f0994656377;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;
            return;
        }

        $targetObject = $this->valueHolder58ecd21f7c4f0994656377;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer58ecd21f7c532536019788 && $this->initializer58ecd21f7c532536019788->__invoke($this->valueHolder58ecd21f7c4f0994656377, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer58ecd21f7c532536019788);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder58ecd21f7c4f0994656377;

            return $targetObject->$name = $value;
            return;
        }

        $targetObject = $this->valueHolder58ecd21f7c4f0994656377;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer58ecd21f7c532536019788 && $this->initializer58ecd21f7c532536019788->__invoke($this->valueHolder58ecd21f7c4f0994656377, $this, '__isset', array('name' => $name), $this->initializer58ecd21f7c532536019788);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder58ecd21f7c4f0994656377;

            return isset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder58ecd21f7c4f0994656377;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer58ecd21f7c532536019788 && $this->initializer58ecd21f7c532536019788->__invoke($this->valueHolder58ecd21f7c4f0994656377, $this, '__unset', array('name' => $name), $this->initializer58ecd21f7c532536019788);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder58ecd21f7c4f0994656377;

            unset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder58ecd21f7c4f0994656377;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer58ecd21f7c532536019788 && $this->initializer58ecd21f7c532536019788->__invoke($this->valueHolder58ecd21f7c4f0994656377, $this, '__clone', array(), $this->initializer58ecd21f7c532536019788);

        $this->valueHolder58ecd21f7c4f0994656377 = clone $this->valueHolder58ecd21f7c4f0994656377;
    }

    public function __sleep()
    {
        $this->initializer58ecd21f7c532536019788 && $this->initializer58ecd21f7c532536019788->__invoke($this->valueHolder58ecd21f7c4f0994656377, $this, '__sleep', array(), $this->initializer58ecd21f7c532536019788);

        return array('valueHolder58ecd21f7c4f0994656377');
    }

    public function __wakeup()
    {
        unset($this->_entityName, $this->_em, $this->_class);
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer58ecd21f7c532536019788 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer58ecd21f7c532536019788;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy() : bool
    {
        return $this->initializer58ecd21f7c532536019788 && $this->initializer58ecd21f7c532536019788->__invoke($this->valueHolder58ecd21f7c4f0994656377, $this, 'initializeProxy', array(), $this->initializer58ecd21f7c532536019788);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHolder58ecd21f7c4f0994656377;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder58ecd21f7c4f0994656377;
    }


}

class SyliusBundleUserBundleProviderEmailProvider_000000004b5112d5000000000f6225f6877f40b66baaf9ca0d0afe40b8a3d26d extends \Sylius\Bundle\UserBundle\Provider\EmailProvider implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder58ecd21f881f7318141004 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer58ecd21f8823a295175397 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties58ecd21f8814c589594060 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function loadUserByUsername($username)
    {
        $this->initializer58ecd21f8823a295175397 && $this->initializer58ecd21f8823a295175397->__invoke($this->valueHolder58ecd21f881f7318141004, $this, 'loadUserByUsername', array('username' => $username), $this->initializer58ecd21f8823a295175397);

        return $this->valueHolder58ecd21f881f7318141004->loadUserByUsername($username);
    }

    /**
     * {@inheritDoc}
     */
    public function refreshUser(\Symfony\Component\Security\Core\User\UserInterface $user)
    {
        $this->initializer58ecd21f8823a295175397 && $this->initializer58ecd21f8823a295175397->__invoke($this->valueHolder58ecd21f881f7318141004, $this, 'refreshUser', array('user' => $user), $this->initializer58ecd21f8823a295175397);

        return $this->valueHolder58ecd21f881f7318141004->refreshUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function supportsClass($class)
    {
        $this->initializer58ecd21f8823a295175397 && $this->initializer58ecd21f8823a295175397->__invoke($this->valueHolder58ecd21f881f7318141004, $this, 'supportsClass', array('class' => $class), $this->initializer58ecd21f8823a295175397);

        return $this->valueHolder58ecd21f881f7318141004->supportsClass($class);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?: $reflection = new \ReflectionClass(__CLASS__);
        $instance = (new \ReflectionClass(get_class()))->newInstanceWithoutConstructor();

        unset($instance->supportedUserClass, $instance->userRepository, $instance->canonicalizer);

        $instance->initializer58ecd21f8823a295175397 = $initializer;

        return $instance;
    }

    /**
     * {@inheritDoc}
     */
    public function __construct($supportedUserClass, \Sylius\Component\User\Repository\UserRepositoryInterface $userRepository, \Sylius\Component\User\Canonicalizer\CanonicalizerInterface $canonicalizer)
    {
        static $reflection;

        if (! $this->valueHolder58ecd21f881f7318141004) {
            $reflection = $reflection ?: new \ReflectionClass('Sylius\\Bundle\\UserBundle\\Provider\\EmailProvider');
            $this->valueHolder58ecd21f881f7318141004 = $reflection->newInstanceWithoutConstructor();
        unset($this->supportedUserClass, $this->userRepository, $this->canonicalizer);

        }

        $this->valueHolder58ecd21f881f7318141004->__construct($supportedUserClass, $userRepository, $canonicalizer);
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer58ecd21f8823a295175397 && $this->initializer58ecd21f8823a295175397->__invoke($this->valueHolder58ecd21f881f7318141004, $this, '__get', ['name' => $name], $this->initializer58ecd21f8823a295175397);

        if (isset(self::$publicProperties58ecd21f8814c589594060[$name])) {
            return $this->valueHolder58ecd21f881f7318141004->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder58ecd21f881f7318141004;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;
            return;
        }

        $targetObject = $this->valueHolder58ecd21f881f7318141004;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer58ecd21f8823a295175397 && $this->initializer58ecd21f8823a295175397->__invoke($this->valueHolder58ecd21f881f7318141004, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer58ecd21f8823a295175397);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder58ecd21f881f7318141004;

            return $targetObject->$name = $value;
            return;
        }

        $targetObject = $this->valueHolder58ecd21f881f7318141004;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer58ecd21f8823a295175397 && $this->initializer58ecd21f8823a295175397->__invoke($this->valueHolder58ecd21f881f7318141004, $this, '__isset', array('name' => $name), $this->initializer58ecd21f8823a295175397);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder58ecd21f881f7318141004;

            return isset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder58ecd21f881f7318141004;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer58ecd21f8823a295175397 && $this->initializer58ecd21f8823a295175397->__invoke($this->valueHolder58ecd21f881f7318141004, $this, '__unset', array('name' => $name), $this->initializer58ecd21f8823a295175397);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder58ecd21f881f7318141004;

            unset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder58ecd21f881f7318141004;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer58ecd21f8823a295175397 && $this->initializer58ecd21f8823a295175397->__invoke($this->valueHolder58ecd21f881f7318141004, $this, '__clone', array(), $this->initializer58ecd21f8823a295175397);

        $this->valueHolder58ecd21f881f7318141004 = clone $this->valueHolder58ecd21f881f7318141004;
    }

    public function __sleep()
    {
        $this->initializer58ecd21f8823a295175397 && $this->initializer58ecd21f8823a295175397->__invoke($this->valueHolder58ecd21f881f7318141004, $this, '__sleep', array(), $this->initializer58ecd21f8823a295175397);

        return array('valueHolder58ecd21f881f7318141004');
    }

    public function __wakeup()
    {
        unset($this->supportedUserClass, $this->userRepository, $this->canonicalizer);
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer58ecd21f8823a295175397 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer58ecd21f8823a295175397;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy() : bool
    {
        return $this->initializer58ecd21f8823a295175397 && $this->initializer58ecd21f8823a295175397->__invoke($this->valueHolder58ecd21f881f7318141004, $this, 'initializeProxy', array(), $this->initializer58ecd21f8823a295175397);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHolder58ecd21f881f7318141004;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder58ecd21f881f7318141004;
    }


}

class SyliusBundleUserBundleProviderUsernameProvider_000000004b5112d2000000000f6225f6877f40b66baaf9ca0d0afe40b8a3d26d extends \Sylius\Bundle\UserBundle\Provider\UsernameProvider implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder58ecd21f8b7c7180506978 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer58ecd21f8b809534984982 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties58ecd21f8b721523005414 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function loadUserByUsername($username)
    {
        $this->initializer58ecd21f8b809534984982 && $this->initializer58ecd21f8b809534984982->__invoke($this->valueHolder58ecd21f8b7c7180506978, $this, 'loadUserByUsername', array('username' => $username), $this->initializer58ecd21f8b809534984982);

        return $this->valueHolder58ecd21f8b7c7180506978->loadUserByUsername($username);
    }

    /**
     * {@inheritDoc}
     */
    public function refreshUser(\Symfony\Component\Security\Core\User\UserInterface $user)
    {
        $this->initializer58ecd21f8b809534984982 && $this->initializer58ecd21f8b809534984982->__invoke($this->valueHolder58ecd21f8b7c7180506978, $this, 'refreshUser', array('user' => $user), $this->initializer58ecd21f8b809534984982);

        return $this->valueHolder58ecd21f8b7c7180506978->refreshUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function supportsClass($class)
    {
        $this->initializer58ecd21f8b809534984982 && $this->initializer58ecd21f8b809534984982->__invoke($this->valueHolder58ecd21f8b7c7180506978, $this, 'supportsClass', array('class' => $class), $this->initializer58ecd21f8b809534984982);

        return $this->valueHolder58ecd21f8b7c7180506978->supportsClass($class);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?: $reflection = new \ReflectionClass(__CLASS__);
        $instance = (new \ReflectionClass(get_class()))->newInstanceWithoutConstructor();

        unset($instance->supportedUserClass, $instance->userRepository, $instance->canonicalizer);

        $instance->initializer58ecd21f8b809534984982 = $initializer;

        return $instance;
    }

    /**
     * {@inheritDoc}
     */
    public function __construct($supportedUserClass, \Sylius\Component\User\Repository\UserRepositoryInterface $userRepository, \Sylius\Component\User\Canonicalizer\CanonicalizerInterface $canonicalizer)
    {
        static $reflection;

        if (! $this->valueHolder58ecd21f8b7c7180506978) {
            $reflection = $reflection ?: new \ReflectionClass('Sylius\\Bundle\\UserBundle\\Provider\\UsernameProvider');
            $this->valueHolder58ecd21f8b7c7180506978 = $reflection->newInstanceWithoutConstructor();
        unset($this->supportedUserClass, $this->userRepository, $this->canonicalizer);

        }

        $this->valueHolder58ecd21f8b7c7180506978->__construct($supportedUserClass, $userRepository, $canonicalizer);
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer58ecd21f8b809534984982 && $this->initializer58ecd21f8b809534984982->__invoke($this->valueHolder58ecd21f8b7c7180506978, $this, '__get', ['name' => $name], $this->initializer58ecd21f8b809534984982);

        if (isset(self::$publicProperties58ecd21f8b721523005414[$name])) {
            return $this->valueHolder58ecd21f8b7c7180506978->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder58ecd21f8b7c7180506978;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;
            return;
        }

        $targetObject = $this->valueHolder58ecd21f8b7c7180506978;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer58ecd21f8b809534984982 && $this->initializer58ecd21f8b809534984982->__invoke($this->valueHolder58ecd21f8b7c7180506978, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer58ecd21f8b809534984982);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder58ecd21f8b7c7180506978;

            return $targetObject->$name = $value;
            return;
        }

        $targetObject = $this->valueHolder58ecd21f8b7c7180506978;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer58ecd21f8b809534984982 && $this->initializer58ecd21f8b809534984982->__invoke($this->valueHolder58ecd21f8b7c7180506978, $this, '__isset', array('name' => $name), $this->initializer58ecd21f8b809534984982);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder58ecd21f8b7c7180506978;

            return isset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder58ecd21f8b7c7180506978;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer58ecd21f8b809534984982 && $this->initializer58ecd21f8b809534984982->__invoke($this->valueHolder58ecd21f8b7c7180506978, $this, '__unset', array('name' => $name), $this->initializer58ecd21f8b809534984982);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder58ecd21f8b7c7180506978;

            unset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder58ecd21f8b7c7180506978;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer58ecd21f8b809534984982 && $this->initializer58ecd21f8b809534984982->__invoke($this->valueHolder58ecd21f8b7c7180506978, $this, '__clone', array(), $this->initializer58ecd21f8b809534984982);

        $this->valueHolder58ecd21f8b7c7180506978 = clone $this->valueHolder58ecd21f8b7c7180506978;
    }

    public function __sleep()
    {
        $this->initializer58ecd21f8b809534984982 && $this->initializer58ecd21f8b809534984982->__invoke($this->valueHolder58ecd21f8b7c7180506978, $this, '__sleep', array(), $this->initializer58ecd21f8b809534984982);

        return array('valueHolder58ecd21f8b7c7180506978');
    }

    public function __wakeup()
    {
        unset($this->supportedUserClass, $this->userRepository, $this->canonicalizer);
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer58ecd21f8b809534984982 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer58ecd21f8b809534984982;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy() : bool
    {
        return $this->initializer58ecd21f8b809534984982 && $this->initializer58ecd21f8b809534984982->__invoke($this->valueHolder58ecd21f8b7c7180506978, $this, 'initializeProxy', array(), $this->initializer58ecd21f8b809534984982);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHolder58ecd21f8b7c7180506978;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder58ecd21f8b7c7180506978;
    }


}

class SyliusBundleUserBundleProviderUsernameOrEmailProvider_000000004b5112d3000000000f6225f6877f40b66baaf9ca0d0afe40b8a3d26d extends \Sylius\Bundle\UserBundle\Provider\UsernameOrEmailProvider implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder58ecd21f8ec23491057231 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer58ecd21f8ec63067342662 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties58ecd21f8eb84161066358 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function loadUserByUsername($username)
    {
        $this->initializer58ecd21f8ec63067342662 && $this->initializer58ecd21f8ec63067342662->__invoke($this->valueHolder58ecd21f8ec23491057231, $this, 'loadUserByUsername', array('username' => $username), $this->initializer58ecd21f8ec63067342662);

        return $this->valueHolder58ecd21f8ec23491057231->loadUserByUsername($username);
    }

    /**
     * {@inheritDoc}
     */
    public function refreshUser(\Symfony\Component\Security\Core\User\UserInterface $user)
    {
        $this->initializer58ecd21f8ec63067342662 && $this->initializer58ecd21f8ec63067342662->__invoke($this->valueHolder58ecd21f8ec23491057231, $this, 'refreshUser', array('user' => $user), $this->initializer58ecd21f8ec63067342662);

        return $this->valueHolder58ecd21f8ec23491057231->refreshUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function supportsClass($class)
    {
        $this->initializer58ecd21f8ec63067342662 && $this->initializer58ecd21f8ec63067342662->__invoke($this->valueHolder58ecd21f8ec23491057231, $this, 'supportsClass', array('class' => $class), $this->initializer58ecd21f8ec63067342662);

        return $this->valueHolder58ecd21f8ec23491057231->supportsClass($class);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?: $reflection = new \ReflectionClass(__CLASS__);
        $instance = (new \ReflectionClass(get_class()))->newInstanceWithoutConstructor();

        unset($instance->supportedUserClass, $instance->userRepository, $instance->canonicalizer);

        $instance->initializer58ecd21f8ec63067342662 = $initializer;

        return $instance;
    }

    /**
     * {@inheritDoc}
     */
    public function __construct($supportedUserClass, \Sylius\Component\User\Repository\UserRepositoryInterface $userRepository, \Sylius\Component\User\Canonicalizer\CanonicalizerInterface $canonicalizer)
    {
        static $reflection;

        if (! $this->valueHolder58ecd21f8ec23491057231) {
            $reflection = $reflection ?: new \ReflectionClass('Sylius\\Bundle\\UserBundle\\Provider\\UsernameOrEmailProvider');
            $this->valueHolder58ecd21f8ec23491057231 = $reflection->newInstanceWithoutConstructor();
        unset($this->supportedUserClass, $this->userRepository, $this->canonicalizer);

        }

        $this->valueHolder58ecd21f8ec23491057231->__construct($supportedUserClass, $userRepository, $canonicalizer);
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer58ecd21f8ec63067342662 && $this->initializer58ecd21f8ec63067342662->__invoke($this->valueHolder58ecd21f8ec23491057231, $this, '__get', ['name' => $name], $this->initializer58ecd21f8ec63067342662);

        if (isset(self::$publicProperties58ecd21f8eb84161066358[$name])) {
            return $this->valueHolder58ecd21f8ec23491057231->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder58ecd21f8ec23491057231;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;
            return;
        }

        $targetObject = $this->valueHolder58ecd21f8ec23491057231;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer58ecd21f8ec63067342662 && $this->initializer58ecd21f8ec63067342662->__invoke($this->valueHolder58ecd21f8ec23491057231, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer58ecd21f8ec63067342662);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder58ecd21f8ec23491057231;

            return $targetObject->$name = $value;
            return;
        }

        $targetObject = $this->valueHolder58ecd21f8ec23491057231;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer58ecd21f8ec63067342662 && $this->initializer58ecd21f8ec63067342662->__invoke($this->valueHolder58ecd21f8ec23491057231, $this, '__isset', array('name' => $name), $this->initializer58ecd21f8ec63067342662);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder58ecd21f8ec23491057231;

            return isset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder58ecd21f8ec23491057231;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer58ecd21f8ec63067342662 && $this->initializer58ecd21f8ec63067342662->__invoke($this->valueHolder58ecd21f8ec23491057231, $this, '__unset', array('name' => $name), $this->initializer58ecd21f8ec63067342662);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder58ecd21f8ec23491057231;

            unset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder58ecd21f8ec23491057231;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer58ecd21f8ec63067342662 && $this->initializer58ecd21f8ec63067342662->__invoke($this->valueHolder58ecd21f8ec23491057231, $this, '__clone', array(), $this->initializer58ecd21f8ec63067342662);

        $this->valueHolder58ecd21f8ec23491057231 = clone $this->valueHolder58ecd21f8ec23491057231;
    }

    public function __sleep()
    {
        $this->initializer58ecd21f8ec63067342662 && $this->initializer58ecd21f8ec63067342662->__invoke($this->valueHolder58ecd21f8ec23491057231, $this, '__sleep', array(), $this->initializer58ecd21f8ec63067342662);

        return array('valueHolder58ecd21f8ec23491057231');
    }

    public function __wakeup()
    {
        unset($this->supportedUserClass, $this->userRepository, $this->canonicalizer);
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer58ecd21f8ec63067342662 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer58ecd21f8ec63067342662;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy() : bool
    {
        return $this->initializer58ecd21f8ec63067342662 && $this->initializer58ecd21f8ec63067342662->__invoke($this->valueHolder58ecd21f8ec23491057231, $this, 'initializeProxy', array(), $this->initializer58ecd21f8ec63067342662);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHolder58ecd21f8ec23491057231;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder58ecd21f8ec23491057231;
    }


}

class SyliusBundleUserBundleProviderEmailProvider_000000004b5112d0000000000f6225f6877f40b66baaf9ca0d0afe40b8a3d26d extends \Sylius\Bundle\UserBundle\Provider\EmailProvider implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder58ecd21f9205c341573271 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer58ecd21f9209d803924503 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties58ecd21f91fa6932864039 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function loadUserByUsername($username)
    {
        $this->initializer58ecd21f9209d803924503 && $this->initializer58ecd21f9209d803924503->__invoke($this->valueHolder58ecd21f9205c341573271, $this, 'loadUserByUsername', array('username' => $username), $this->initializer58ecd21f9209d803924503);

        return $this->valueHolder58ecd21f9205c341573271->loadUserByUsername($username);
    }

    /**
     * {@inheritDoc}
     */
    public function refreshUser(\Symfony\Component\Security\Core\User\UserInterface $user)
    {
        $this->initializer58ecd21f9209d803924503 && $this->initializer58ecd21f9209d803924503->__invoke($this->valueHolder58ecd21f9205c341573271, $this, 'refreshUser', array('user' => $user), $this->initializer58ecd21f9209d803924503);

        return $this->valueHolder58ecd21f9205c341573271->refreshUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function supportsClass($class)
    {
        $this->initializer58ecd21f9209d803924503 && $this->initializer58ecd21f9209d803924503->__invoke($this->valueHolder58ecd21f9205c341573271, $this, 'supportsClass', array('class' => $class), $this->initializer58ecd21f9209d803924503);

        return $this->valueHolder58ecd21f9205c341573271->supportsClass($class);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?: $reflection = new \ReflectionClass(__CLASS__);
        $instance = (new \ReflectionClass(get_class()))->newInstanceWithoutConstructor();

        unset($instance->supportedUserClass, $instance->userRepository, $instance->canonicalizer);

        $instance->initializer58ecd21f9209d803924503 = $initializer;

        return $instance;
    }

    /**
     * {@inheritDoc}
     */
    public function __construct($supportedUserClass, \Sylius\Component\User\Repository\UserRepositoryInterface $userRepository, \Sylius\Component\User\Canonicalizer\CanonicalizerInterface $canonicalizer)
    {
        static $reflection;

        if (! $this->valueHolder58ecd21f9205c341573271) {
            $reflection = $reflection ?: new \ReflectionClass('Sylius\\Bundle\\UserBundle\\Provider\\EmailProvider');
            $this->valueHolder58ecd21f9205c341573271 = $reflection->newInstanceWithoutConstructor();
        unset($this->supportedUserClass, $this->userRepository, $this->canonicalizer);

        }

        $this->valueHolder58ecd21f9205c341573271->__construct($supportedUserClass, $userRepository, $canonicalizer);
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer58ecd21f9209d803924503 && $this->initializer58ecd21f9209d803924503->__invoke($this->valueHolder58ecd21f9205c341573271, $this, '__get', ['name' => $name], $this->initializer58ecd21f9209d803924503);

        if (isset(self::$publicProperties58ecd21f91fa6932864039[$name])) {
            return $this->valueHolder58ecd21f9205c341573271->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder58ecd21f9205c341573271;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;
            return;
        }

        $targetObject = $this->valueHolder58ecd21f9205c341573271;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer58ecd21f9209d803924503 && $this->initializer58ecd21f9209d803924503->__invoke($this->valueHolder58ecd21f9205c341573271, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer58ecd21f9209d803924503);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder58ecd21f9205c341573271;

            return $targetObject->$name = $value;
            return;
        }

        $targetObject = $this->valueHolder58ecd21f9205c341573271;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer58ecd21f9209d803924503 && $this->initializer58ecd21f9209d803924503->__invoke($this->valueHolder58ecd21f9205c341573271, $this, '__isset', array('name' => $name), $this->initializer58ecd21f9209d803924503);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder58ecd21f9205c341573271;

            return isset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder58ecd21f9205c341573271;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer58ecd21f9209d803924503 && $this->initializer58ecd21f9209d803924503->__invoke($this->valueHolder58ecd21f9205c341573271, $this, '__unset', array('name' => $name), $this->initializer58ecd21f9209d803924503);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder58ecd21f9205c341573271;

            unset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder58ecd21f9205c341573271;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer58ecd21f9209d803924503 && $this->initializer58ecd21f9209d803924503->__invoke($this->valueHolder58ecd21f9205c341573271, $this, '__clone', array(), $this->initializer58ecd21f9209d803924503);

        $this->valueHolder58ecd21f9205c341573271 = clone $this->valueHolder58ecd21f9205c341573271;
    }

    public function __sleep()
    {
        $this->initializer58ecd21f9209d803924503 && $this->initializer58ecd21f9209d803924503->__invoke($this->valueHolder58ecd21f9205c341573271, $this, '__sleep', array(), $this->initializer58ecd21f9209d803924503);

        return array('valueHolder58ecd21f9205c341573271');
    }

    public function __wakeup()
    {
        unset($this->supportedUserClass, $this->userRepository, $this->canonicalizer);
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer58ecd21f9209d803924503 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer58ecd21f9209d803924503;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy() : bool
    {
        return $this->initializer58ecd21f9209d803924503 && $this->initializer58ecd21f9209d803924503->__invoke($this->valueHolder58ecd21f9205c341573271, $this, 'initializeProxy', array(), $this->initializer58ecd21f9209d803924503);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHolder58ecd21f9205c341573271;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder58ecd21f9205c341573271;
    }


}

class SyliusBundleUserBundleProviderUsernameProvider_000000004b5112d1000000000f6225f6877f40b66baaf9ca0d0afe40b8a3d26d extends \Sylius\Bundle\UserBundle\Provider\UsernameProvider implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder58ecd21f95485401005049 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer58ecd21f954c5120192051 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties58ecd21f953e5398880501 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function loadUserByUsername($username)
    {
        $this->initializer58ecd21f954c5120192051 && $this->initializer58ecd21f954c5120192051->__invoke($this->valueHolder58ecd21f95485401005049, $this, 'loadUserByUsername', array('username' => $username), $this->initializer58ecd21f954c5120192051);

        return $this->valueHolder58ecd21f95485401005049->loadUserByUsername($username);
    }

    /**
     * {@inheritDoc}
     */
    public function refreshUser(\Symfony\Component\Security\Core\User\UserInterface $user)
    {
        $this->initializer58ecd21f954c5120192051 && $this->initializer58ecd21f954c5120192051->__invoke($this->valueHolder58ecd21f95485401005049, $this, 'refreshUser', array('user' => $user), $this->initializer58ecd21f954c5120192051);

        return $this->valueHolder58ecd21f95485401005049->refreshUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function supportsClass($class)
    {
        $this->initializer58ecd21f954c5120192051 && $this->initializer58ecd21f954c5120192051->__invoke($this->valueHolder58ecd21f95485401005049, $this, 'supportsClass', array('class' => $class), $this->initializer58ecd21f954c5120192051);

        return $this->valueHolder58ecd21f95485401005049->supportsClass($class);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?: $reflection = new \ReflectionClass(__CLASS__);
        $instance = (new \ReflectionClass(get_class()))->newInstanceWithoutConstructor();

        unset($instance->supportedUserClass, $instance->userRepository, $instance->canonicalizer);

        $instance->initializer58ecd21f954c5120192051 = $initializer;

        return $instance;
    }

    /**
     * {@inheritDoc}
     */
    public function __construct($supportedUserClass, \Sylius\Component\User\Repository\UserRepositoryInterface $userRepository, \Sylius\Component\User\Canonicalizer\CanonicalizerInterface $canonicalizer)
    {
        static $reflection;

        if (! $this->valueHolder58ecd21f95485401005049) {
            $reflection = $reflection ?: new \ReflectionClass('Sylius\\Bundle\\UserBundle\\Provider\\UsernameProvider');
            $this->valueHolder58ecd21f95485401005049 = $reflection->newInstanceWithoutConstructor();
        unset($this->supportedUserClass, $this->userRepository, $this->canonicalizer);

        }

        $this->valueHolder58ecd21f95485401005049->__construct($supportedUserClass, $userRepository, $canonicalizer);
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer58ecd21f954c5120192051 && $this->initializer58ecd21f954c5120192051->__invoke($this->valueHolder58ecd21f95485401005049, $this, '__get', ['name' => $name], $this->initializer58ecd21f954c5120192051);

        if (isset(self::$publicProperties58ecd21f953e5398880501[$name])) {
            return $this->valueHolder58ecd21f95485401005049->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder58ecd21f95485401005049;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;
            return;
        }

        $targetObject = $this->valueHolder58ecd21f95485401005049;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer58ecd21f954c5120192051 && $this->initializer58ecd21f954c5120192051->__invoke($this->valueHolder58ecd21f95485401005049, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer58ecd21f954c5120192051);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder58ecd21f95485401005049;

            return $targetObject->$name = $value;
            return;
        }

        $targetObject = $this->valueHolder58ecd21f95485401005049;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer58ecd21f954c5120192051 && $this->initializer58ecd21f954c5120192051->__invoke($this->valueHolder58ecd21f95485401005049, $this, '__isset', array('name' => $name), $this->initializer58ecd21f954c5120192051);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder58ecd21f95485401005049;

            return isset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder58ecd21f95485401005049;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer58ecd21f954c5120192051 && $this->initializer58ecd21f954c5120192051->__invoke($this->valueHolder58ecd21f95485401005049, $this, '__unset', array('name' => $name), $this->initializer58ecd21f954c5120192051);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder58ecd21f95485401005049;

            unset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder58ecd21f95485401005049;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer58ecd21f954c5120192051 && $this->initializer58ecd21f954c5120192051->__invoke($this->valueHolder58ecd21f95485401005049, $this, '__clone', array(), $this->initializer58ecd21f954c5120192051);

        $this->valueHolder58ecd21f95485401005049 = clone $this->valueHolder58ecd21f95485401005049;
    }

    public function __sleep()
    {
        $this->initializer58ecd21f954c5120192051 && $this->initializer58ecd21f954c5120192051->__invoke($this->valueHolder58ecd21f95485401005049, $this, '__sleep', array(), $this->initializer58ecd21f954c5120192051);

        return array('valueHolder58ecd21f95485401005049');
    }

    public function __wakeup()
    {
        unset($this->supportedUserClass, $this->userRepository, $this->canonicalizer);
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer58ecd21f954c5120192051 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer58ecd21f954c5120192051;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy() : bool
    {
        return $this->initializer58ecd21f954c5120192051 && $this->initializer58ecd21f954c5120192051->__invoke($this->valueHolder58ecd21f95485401005049, $this, 'initializeProxy', array(), $this->initializer58ecd21f954c5120192051);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHolder58ecd21f95485401005049;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder58ecd21f95485401005049;
    }


}

class SyliusBundleUserBundleProviderUsernameOrEmailProvider_000000004b5112ce000000000f6225f6877f40b66baaf9ca0d0afe40b8a3d26d extends \Sylius\Bundle\UserBundle\Provider\UsernameOrEmailProvider implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder58ecd21f9881c821703172 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer58ecd21f9885c294792752 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties58ecd21f9877c071888641 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function loadUserByUsername($username)
    {
        $this->initializer58ecd21f9885c294792752 && $this->initializer58ecd21f9885c294792752->__invoke($this->valueHolder58ecd21f9881c821703172, $this, 'loadUserByUsername', array('username' => $username), $this->initializer58ecd21f9885c294792752);

        return $this->valueHolder58ecd21f9881c821703172->loadUserByUsername($username);
    }

    /**
     * {@inheritDoc}
     */
    public function refreshUser(\Symfony\Component\Security\Core\User\UserInterface $user)
    {
        $this->initializer58ecd21f9885c294792752 && $this->initializer58ecd21f9885c294792752->__invoke($this->valueHolder58ecd21f9881c821703172, $this, 'refreshUser', array('user' => $user), $this->initializer58ecd21f9885c294792752);

        return $this->valueHolder58ecd21f9881c821703172->refreshUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function supportsClass($class)
    {
        $this->initializer58ecd21f9885c294792752 && $this->initializer58ecd21f9885c294792752->__invoke($this->valueHolder58ecd21f9881c821703172, $this, 'supportsClass', array('class' => $class), $this->initializer58ecd21f9885c294792752);

        return $this->valueHolder58ecd21f9881c821703172->supportsClass($class);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?: $reflection = new \ReflectionClass(__CLASS__);
        $instance = (new \ReflectionClass(get_class()))->newInstanceWithoutConstructor();

        unset($instance->supportedUserClass, $instance->userRepository, $instance->canonicalizer);

        $instance->initializer58ecd21f9885c294792752 = $initializer;

        return $instance;
    }

    /**
     * {@inheritDoc}
     */
    public function __construct($supportedUserClass, \Sylius\Component\User\Repository\UserRepositoryInterface $userRepository, \Sylius\Component\User\Canonicalizer\CanonicalizerInterface $canonicalizer)
    {
        static $reflection;

        if (! $this->valueHolder58ecd21f9881c821703172) {
            $reflection = $reflection ?: new \ReflectionClass('Sylius\\Bundle\\UserBundle\\Provider\\UsernameOrEmailProvider');
            $this->valueHolder58ecd21f9881c821703172 = $reflection->newInstanceWithoutConstructor();
        unset($this->supportedUserClass, $this->userRepository, $this->canonicalizer);

        }

        $this->valueHolder58ecd21f9881c821703172->__construct($supportedUserClass, $userRepository, $canonicalizer);
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer58ecd21f9885c294792752 && $this->initializer58ecd21f9885c294792752->__invoke($this->valueHolder58ecd21f9881c821703172, $this, '__get', ['name' => $name], $this->initializer58ecd21f9885c294792752);

        if (isset(self::$publicProperties58ecd21f9877c071888641[$name])) {
            return $this->valueHolder58ecd21f9881c821703172->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder58ecd21f9881c821703172;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;
            return;
        }

        $targetObject = $this->valueHolder58ecd21f9881c821703172;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer58ecd21f9885c294792752 && $this->initializer58ecd21f9885c294792752->__invoke($this->valueHolder58ecd21f9881c821703172, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer58ecd21f9885c294792752);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder58ecd21f9881c821703172;

            return $targetObject->$name = $value;
            return;
        }

        $targetObject = $this->valueHolder58ecd21f9881c821703172;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer58ecd21f9885c294792752 && $this->initializer58ecd21f9885c294792752->__invoke($this->valueHolder58ecd21f9881c821703172, $this, '__isset', array('name' => $name), $this->initializer58ecd21f9885c294792752);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder58ecd21f9881c821703172;

            return isset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder58ecd21f9881c821703172;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer58ecd21f9885c294792752 && $this->initializer58ecd21f9885c294792752->__invoke($this->valueHolder58ecd21f9881c821703172, $this, '__unset', array('name' => $name), $this->initializer58ecd21f9885c294792752);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder58ecd21f9881c821703172;

            unset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder58ecd21f9881c821703172;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer58ecd21f9885c294792752 && $this->initializer58ecd21f9885c294792752->__invoke($this->valueHolder58ecd21f9881c821703172, $this, '__clone', array(), $this->initializer58ecd21f9885c294792752);

        $this->valueHolder58ecd21f9881c821703172 = clone $this->valueHolder58ecd21f9881c821703172;
    }

    public function __sleep()
    {
        $this->initializer58ecd21f9885c294792752 && $this->initializer58ecd21f9885c294792752->__invoke($this->valueHolder58ecd21f9881c821703172, $this, '__sleep', array(), $this->initializer58ecd21f9885c294792752);

        return array('valueHolder58ecd21f9881c821703172');
    }

    public function __wakeup()
    {
        unset($this->supportedUserClass, $this->userRepository, $this->canonicalizer);
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer58ecd21f9885c294792752 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer58ecd21f9885c294792752;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy() : bool
    {
        return $this->initializer58ecd21f9885c294792752 && $this->initializer58ecd21f9885c294792752->__invoke($this->valueHolder58ecd21f9881c821703172, $this, 'initializeProxy', array(), $this->initializer58ecd21f9885c294792752);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHolder58ecd21f9881c821703172;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder58ecd21f9881c821703172;
    }


}

class SyliusBundleGridBundleTemplatingHelperGridHelper_000000004b51070b000000000f6225f6877f40b66baaf9ca0d0afe40b8a3d26d extends \Sylius\Bundle\GridBundle\Templating\Helper\GridHelper implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder58ecd21f9bb6e271020641 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer58ecd21f9bbad063036383 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties58ecd21f9bad1741988240 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function renderGrid(\Sylius\Component\Grid\View\GridView $gridView, $template = null)
    {
        $this->initializer58ecd21f9bbad063036383 && $this->initializer58ecd21f9bbad063036383->__invoke($this->valueHolder58ecd21f9bb6e271020641, $this, 'renderGrid', array('gridView' => $gridView, 'template' => $template), $this->initializer58ecd21f9bbad063036383);

        return $this->valueHolder58ecd21f9bb6e271020641->renderGrid($gridView, $template);
    }

    /**
     * {@inheritDoc}
     */
    public function renderField(\Sylius\Component\Grid\View\GridView $gridView, \Sylius\Component\Grid\Definition\Field $field, $data)
    {
        $this->initializer58ecd21f9bbad063036383 && $this->initializer58ecd21f9bbad063036383->__invoke($this->valueHolder58ecd21f9bb6e271020641, $this, 'renderField', array('gridView' => $gridView, 'field' => $field, 'data' => $data), $this->initializer58ecd21f9bbad063036383);

        return $this->valueHolder58ecd21f9bb6e271020641->renderField($gridView, $field, $data);
    }

    /**
     * {@inheritDoc}
     */
    public function renderAction(\Sylius\Component\Grid\View\GridView $gridView, \Sylius\Component\Grid\Definition\Action $action, $data = null)
    {
        $this->initializer58ecd21f9bbad063036383 && $this->initializer58ecd21f9bbad063036383->__invoke($this->valueHolder58ecd21f9bb6e271020641, $this, 'renderAction', array('gridView' => $gridView, 'action' => $action, 'data' => $data), $this->initializer58ecd21f9bbad063036383);

        return $this->valueHolder58ecd21f9bb6e271020641->renderAction($gridView, $action, $data);
    }

    /**
     * {@inheritDoc}
     */
    public function renderFilter(\Sylius\Component\Grid\View\GridView $gridView, \Sylius\Component\Grid\Definition\Filter $filter)
    {
        $this->initializer58ecd21f9bbad063036383 && $this->initializer58ecd21f9bbad063036383->__invoke($this->valueHolder58ecd21f9bb6e271020641, $this, 'renderFilter', array('gridView' => $gridView, 'filter' => $filter), $this->initializer58ecd21f9bbad063036383);

        return $this->valueHolder58ecd21f9bb6e271020641->renderFilter($gridView, $filter);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {
        $this->initializer58ecd21f9bbad063036383 && $this->initializer58ecd21f9bbad063036383->__invoke($this->valueHolder58ecd21f9bb6e271020641, $this, 'getName', array(), $this->initializer58ecd21f9bbad063036383);

        return $this->valueHolder58ecd21f9bb6e271020641->getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setCharset($charset)
    {
        $this->initializer58ecd21f9bbad063036383 && $this->initializer58ecd21f9bbad063036383->__invoke($this->valueHolder58ecd21f9bb6e271020641, $this, 'setCharset', array('charset' => $charset), $this->initializer58ecd21f9bbad063036383);

        return $this->valueHolder58ecd21f9bb6e271020641->setCharset($charset);
    }

    /**
     * {@inheritDoc}
     */
    public function getCharset()
    {
        $this->initializer58ecd21f9bbad063036383 && $this->initializer58ecd21f9bbad063036383->__invoke($this->valueHolder58ecd21f9bb6e271020641, $this, 'getCharset', array(), $this->initializer58ecd21f9bbad063036383);

        return $this->valueHolder58ecd21f9bb6e271020641->getCharset();
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?: $reflection = new \ReflectionClass(__CLASS__);
        $instance = (new \ReflectionClass(get_class()))->newInstanceWithoutConstructor();

        unset($instance->charset);

        \Closure::bind(function (\Sylius\Bundle\GridBundle\Templating\Helper\GridHelper $instance) {
            unset($instance->gridRenderer);
        }, $instance, 'Sylius\\Bundle\\GridBundle\\Templating\\Helper\\GridHelper')->__invoke($instance);

        $instance->initializer58ecd21f9bbad063036383 = $initializer;

        return $instance;
    }

    /**
     * {@inheritDoc}
     */
    public function __construct(\Sylius\Component\Grid\Renderer\GridRendererInterface $gridRenderer)
    {
        static $reflection;

        if (! $this->valueHolder58ecd21f9bb6e271020641) {
            $reflection = $reflection ?: new \ReflectionClass('Sylius\\Bundle\\GridBundle\\Templating\\Helper\\GridHelper');
            $this->valueHolder58ecd21f9bb6e271020641 = $reflection->newInstanceWithoutConstructor();
        unset($this->charset);

        \Closure::bind(function (\Sylius\Bundle\GridBundle\Templating\Helper\GridHelper $instance) {
            unset($instance->gridRenderer);
        }, $this, 'Sylius\\Bundle\\GridBundle\\Templating\\Helper\\GridHelper')->__invoke($this);

        }

        $this->valueHolder58ecd21f9bb6e271020641->__construct($gridRenderer);
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer58ecd21f9bbad063036383 && $this->initializer58ecd21f9bbad063036383->__invoke($this->valueHolder58ecd21f9bb6e271020641, $this, '__get', ['name' => $name], $this->initializer58ecd21f9bbad063036383);

        if (isset(self::$publicProperties58ecd21f9bad1741988240[$name])) {
            return $this->valueHolder58ecd21f9bb6e271020641->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder58ecd21f9bb6e271020641;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;
            return;
        }

        $targetObject = $this->valueHolder58ecd21f9bb6e271020641;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer58ecd21f9bbad063036383 && $this->initializer58ecd21f9bbad063036383->__invoke($this->valueHolder58ecd21f9bb6e271020641, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer58ecd21f9bbad063036383);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder58ecd21f9bb6e271020641;

            return $targetObject->$name = $value;
            return;
        }

        $targetObject = $this->valueHolder58ecd21f9bb6e271020641;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer58ecd21f9bbad063036383 && $this->initializer58ecd21f9bbad063036383->__invoke($this->valueHolder58ecd21f9bb6e271020641, $this, '__isset', array('name' => $name), $this->initializer58ecd21f9bbad063036383);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder58ecd21f9bb6e271020641;

            return isset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder58ecd21f9bb6e271020641;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer58ecd21f9bbad063036383 && $this->initializer58ecd21f9bbad063036383->__invoke($this->valueHolder58ecd21f9bb6e271020641, $this, '__unset', array('name' => $name), $this->initializer58ecd21f9bbad063036383);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder58ecd21f9bb6e271020641;

            unset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder58ecd21f9bb6e271020641;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer58ecd21f9bbad063036383 && $this->initializer58ecd21f9bbad063036383->__invoke($this->valueHolder58ecd21f9bb6e271020641, $this, '__clone', array(), $this->initializer58ecd21f9bbad063036383);

        $this->valueHolder58ecd21f9bb6e271020641 = clone $this->valueHolder58ecd21f9bb6e271020641;
    }

    public function __sleep()
    {
        $this->initializer58ecd21f9bbad063036383 && $this->initializer58ecd21f9bbad063036383->__invoke($this->valueHolder58ecd21f9bb6e271020641, $this, '__sleep', array(), $this->initializer58ecd21f9bbad063036383);

        return array('valueHolder58ecd21f9bb6e271020641');
    }

    public function __wakeup()
    {
        unset($this->charset);

        \Closure::bind(function (\Sylius\Bundle\GridBundle\Templating\Helper\GridHelper $instance) {
            unset($instance->gridRenderer);
        }, $this, 'Sylius\\Bundle\\GridBundle\\Templating\\Helper\\GridHelper')->__invoke($this);
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer58ecd21f9bbad063036383 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer58ecd21f9bbad063036383;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy() : bool
    {
        return $this->initializer58ecd21f9bbad063036383 && $this->initializer58ecd21f9bbad063036383->__invoke($this->valueHolder58ecd21f9bb6e271020641, $this, 'initializeProxy', array(), $this->initializer58ecd21f9bbad063036383);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHolder58ecd21f9bb6e271020641;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder58ecd21f9bb6e271020641;
    }


}

class DoctrineORMEntityManager_000000004b511ba6000000000f6225f6877f40b66baaf9ca0d0afe40b8a3d26d extends \Doctrine\ORM\EntityManager implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder58ecd21fa256d526442143 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer58ecd21fa25af264651438 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties58ecd21fa24b7626732478 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function getConnection()
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, 'getConnection', array(), $this->initializer58ecd21fa25af264651438);

        return $this->valueHolder58ecd21fa256d526442143->getConnection();
    }

    /**
     * {@inheritDoc}
     */
    public function getMetadataFactory()
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, 'getMetadataFactory', array(), $this->initializer58ecd21fa25af264651438);

        return $this->valueHolder58ecd21fa256d526442143->getMetadataFactory();
    }

    /**
     * {@inheritDoc}
     */
    public function getExpressionBuilder()
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, 'getExpressionBuilder', array(), $this->initializer58ecd21fa25af264651438);

        return $this->valueHolder58ecd21fa256d526442143->getExpressionBuilder();
    }

    /**
     * {@inheritDoc}
     */
    public function beginTransaction()
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, 'beginTransaction', array(), $this->initializer58ecd21fa25af264651438);

        return $this->valueHolder58ecd21fa256d526442143->beginTransaction();
    }

    /**
     * {@inheritDoc}
     */
    public function getCache()
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, 'getCache', array(), $this->initializer58ecd21fa25af264651438);

        return $this->valueHolder58ecd21fa256d526442143->getCache();
    }

    /**
     * {@inheritDoc}
     */
    public function transactional($func)
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, 'transactional', array('func' => $func), $this->initializer58ecd21fa25af264651438);

        return $this->valueHolder58ecd21fa256d526442143->transactional($func);
    }

    /**
     * {@inheritDoc}
     */
    public function commit()
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, 'commit', array(), $this->initializer58ecd21fa25af264651438);

        return $this->valueHolder58ecd21fa256d526442143->commit();
    }

    /**
     * {@inheritDoc}
     */
    public function rollback()
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, 'rollback', array(), $this->initializer58ecd21fa25af264651438);

        return $this->valueHolder58ecd21fa256d526442143->rollback();
    }

    /**
     * {@inheritDoc}
     */
    public function getClassMetadata($className)
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, 'getClassMetadata', array('className' => $className), $this->initializer58ecd21fa25af264651438);

        return $this->valueHolder58ecd21fa256d526442143->getClassMetadata($className);
    }

    /**
     * {@inheritDoc}
     */
    public function createQuery($dql = '')
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, 'createQuery', array('dql' => $dql), $this->initializer58ecd21fa25af264651438);

        return $this->valueHolder58ecd21fa256d526442143->createQuery($dql);
    }

    /**
     * {@inheritDoc}
     */
    public function createNamedQuery($name)
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, 'createNamedQuery', array('name' => $name), $this->initializer58ecd21fa25af264651438);

        return $this->valueHolder58ecd21fa256d526442143->createNamedQuery($name);
    }

    /**
     * {@inheritDoc}
     */
    public function createNativeQuery($sql, \Doctrine\ORM\Query\ResultSetMapping $rsm)
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, 'createNativeQuery', array('sql' => $sql, 'rsm' => $rsm), $this->initializer58ecd21fa25af264651438);

        return $this->valueHolder58ecd21fa256d526442143->createNativeQuery($sql, $rsm);
    }

    /**
     * {@inheritDoc}
     */
    public function createNamedNativeQuery($name)
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, 'createNamedNativeQuery', array('name' => $name), $this->initializer58ecd21fa25af264651438);

        return $this->valueHolder58ecd21fa256d526442143->createNamedNativeQuery($name);
    }

    /**
     * {@inheritDoc}
     */
    public function createQueryBuilder()
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, 'createQueryBuilder', array(), $this->initializer58ecd21fa25af264651438);

        return $this->valueHolder58ecd21fa256d526442143->createQueryBuilder();
    }

    /**
     * {@inheritDoc}
     */
    public function flush($entity = null)
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, 'flush', array('entity' => $entity), $this->initializer58ecd21fa25af264651438);

        return $this->valueHolder58ecd21fa256d526442143->flush($entity);
    }

    /**
     * {@inheritDoc}
     */
    public function find($entityName, $id, $lockMode = null, $lockVersion = null)
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, 'find', array('entityName' => $entityName, 'id' => $id, 'lockMode' => $lockMode, 'lockVersion' => $lockVersion), $this->initializer58ecd21fa25af264651438);

        return $this->valueHolder58ecd21fa256d526442143->find($entityName, $id, $lockMode, $lockVersion);
    }

    /**
     * {@inheritDoc}
     */
    public function getReference($entityName, $id)
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, 'getReference', array('entityName' => $entityName, 'id' => $id), $this->initializer58ecd21fa25af264651438);

        return $this->valueHolder58ecd21fa256d526442143->getReference($entityName, $id);
    }

    /**
     * {@inheritDoc}
     */
    public function getPartialReference($entityName, $identifier)
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, 'getPartialReference', array('entityName' => $entityName, 'identifier' => $identifier), $this->initializer58ecd21fa25af264651438);

        return $this->valueHolder58ecd21fa256d526442143->getPartialReference($entityName, $identifier);
    }

    /**
     * {@inheritDoc}
     */
    public function clear($entityName = null)
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, 'clear', array('entityName' => $entityName), $this->initializer58ecd21fa25af264651438);

        return $this->valueHolder58ecd21fa256d526442143->clear($entityName);
    }

    /**
     * {@inheritDoc}
     */
    public function close()
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, 'close', array(), $this->initializer58ecd21fa25af264651438);

        return $this->valueHolder58ecd21fa256d526442143->close();
    }

    /**
     * {@inheritDoc}
     */
    public function persist($entity)
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, 'persist', array('entity' => $entity), $this->initializer58ecd21fa25af264651438);

        return $this->valueHolder58ecd21fa256d526442143->persist($entity);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($entity)
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, 'remove', array('entity' => $entity), $this->initializer58ecd21fa25af264651438);

        return $this->valueHolder58ecd21fa256d526442143->remove($entity);
    }

    /**
     * {@inheritDoc}
     */
    public function refresh($entity)
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, 'refresh', array('entity' => $entity), $this->initializer58ecd21fa25af264651438);

        return $this->valueHolder58ecd21fa256d526442143->refresh($entity);
    }

    /**
     * {@inheritDoc}
     */
    public function detach($entity)
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, 'detach', array('entity' => $entity), $this->initializer58ecd21fa25af264651438);

        return $this->valueHolder58ecd21fa256d526442143->detach($entity);
    }

    /**
     * {@inheritDoc}
     */
    public function merge($entity)
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, 'merge', array('entity' => $entity), $this->initializer58ecd21fa25af264651438);

        return $this->valueHolder58ecd21fa256d526442143->merge($entity);
    }

    /**
     * {@inheritDoc}
     */
    public function copy($entity, $deep = false)
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, 'copy', array('entity' => $entity, 'deep' => $deep), $this->initializer58ecd21fa25af264651438);

        return $this->valueHolder58ecd21fa256d526442143->copy($entity, $deep);
    }

    /**
     * {@inheritDoc}
     */
    public function lock($entity, $lockMode, $lockVersion = null)
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, 'lock', array('entity' => $entity, 'lockMode' => $lockMode, 'lockVersion' => $lockVersion), $this->initializer58ecd21fa25af264651438);

        return $this->valueHolder58ecd21fa256d526442143->lock($entity, $lockMode, $lockVersion);
    }

    /**
     * {@inheritDoc}
     */
    public function getRepository($entityName)
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, 'getRepository', array('entityName' => $entityName), $this->initializer58ecd21fa25af264651438);

        return $this->valueHolder58ecd21fa256d526442143->getRepository($entityName);
    }

    /**
     * {@inheritDoc}
     */
    public function contains($entity)
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, 'contains', array('entity' => $entity), $this->initializer58ecd21fa25af264651438);

        return $this->valueHolder58ecd21fa256d526442143->contains($entity);
    }

    /**
     * {@inheritDoc}
     */
    public function getEventManager()
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, 'getEventManager', array(), $this->initializer58ecd21fa25af264651438);

        return $this->valueHolder58ecd21fa256d526442143->getEventManager();
    }

    /**
     * {@inheritDoc}
     */
    public function getConfiguration()
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, 'getConfiguration', array(), $this->initializer58ecd21fa25af264651438);

        return $this->valueHolder58ecd21fa256d526442143->getConfiguration();
    }

    /**
     * {@inheritDoc}
     */
    public function isOpen()
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, 'isOpen', array(), $this->initializer58ecd21fa25af264651438);

        return $this->valueHolder58ecd21fa256d526442143->isOpen();
    }

    /**
     * {@inheritDoc}
     */
    public function getUnitOfWork()
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, 'getUnitOfWork', array(), $this->initializer58ecd21fa25af264651438);

        return $this->valueHolder58ecd21fa256d526442143->getUnitOfWork();
    }

    /**
     * {@inheritDoc}
     */
    public function getHydrator($hydrationMode)
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, 'getHydrator', array('hydrationMode' => $hydrationMode), $this->initializer58ecd21fa25af264651438);

        return $this->valueHolder58ecd21fa256d526442143->getHydrator($hydrationMode);
    }

    /**
     * {@inheritDoc}
     */
    public function newHydrator($hydrationMode)
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, 'newHydrator', array('hydrationMode' => $hydrationMode), $this->initializer58ecd21fa25af264651438);

        return $this->valueHolder58ecd21fa256d526442143->newHydrator($hydrationMode);
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyFactory()
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, 'getProxyFactory', array(), $this->initializer58ecd21fa25af264651438);

        return $this->valueHolder58ecd21fa256d526442143->getProxyFactory();
    }

    /**
     * {@inheritDoc}
     */
    public function initializeObject($obj)
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, 'initializeObject', array('obj' => $obj), $this->initializer58ecd21fa25af264651438);

        return $this->valueHolder58ecd21fa256d526442143->initializeObject($obj);
    }

    /**
     * {@inheritDoc}
     */
    public function getFilters()
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, 'getFilters', array(), $this->initializer58ecd21fa25af264651438);

        return $this->valueHolder58ecd21fa256d526442143->getFilters();
    }

    /**
     * {@inheritDoc}
     */
    public function isFiltersStateClean()
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, 'isFiltersStateClean', array(), $this->initializer58ecd21fa25af264651438);

        return $this->valueHolder58ecd21fa256d526442143->isFiltersStateClean();
    }

    /**
     * {@inheritDoc}
     */
    public function hasFilters()
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, 'hasFilters', array(), $this->initializer58ecd21fa25af264651438);

        return $this->valueHolder58ecd21fa256d526442143->hasFilters();
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?: $reflection = new \ReflectionClass(__CLASS__);
        $instance = (new \ReflectionClass(get_class()))->newInstanceWithoutConstructor();

        \Closure::bind(function (\Doctrine\ORM\EntityManager $instance) {
            unset($instance->config, $instance->conn, $instance->metadataFactory, $instance->unitOfWork, $instance->eventManager, $instance->proxyFactory, $instance->repositoryFactory, $instance->expressionBuilder, $instance->closed, $instance->filterCollection, $instance->cache);
        }, $instance, 'Doctrine\\ORM\\EntityManager')->__invoke($instance);

        $instance->initializer58ecd21fa25af264651438 = $initializer;

        return $instance;
    }

    /**
     * {@inheritDoc}
     */
    protected function __construct(\Doctrine\DBAL\Connection $conn, \Doctrine\ORM\Configuration $config, \Doctrine\Common\EventManager $eventManager)
    {
        static $reflection;

        if (! $this->valueHolder58ecd21fa256d526442143) {
            $reflection = $reflection ?: new \ReflectionClass('Doctrine\\ORM\\EntityManager');
            $this->valueHolder58ecd21fa256d526442143 = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\Doctrine\ORM\EntityManager $instance) {
            unset($instance->config, $instance->conn, $instance->metadataFactory, $instance->unitOfWork, $instance->eventManager, $instance->proxyFactory, $instance->repositoryFactory, $instance->expressionBuilder, $instance->closed, $instance->filterCollection, $instance->cache);
        }, $this, 'Doctrine\\ORM\\EntityManager')->__invoke($this);

        }

        $this->valueHolder58ecd21fa256d526442143->__construct($conn, $config, $eventManager);
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, '__get', ['name' => $name], $this->initializer58ecd21fa25af264651438);

        if (isset(self::$publicProperties58ecd21fa24b7626732478[$name])) {
            return $this->valueHolder58ecd21fa256d526442143->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder58ecd21fa256d526442143;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;
            return;
        }

        $targetObject = $this->valueHolder58ecd21fa256d526442143;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer58ecd21fa25af264651438);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder58ecd21fa256d526442143;

            return $targetObject->$name = $value;
            return;
        }

        $targetObject = $this->valueHolder58ecd21fa256d526442143;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, '__isset', array('name' => $name), $this->initializer58ecd21fa25af264651438);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder58ecd21fa256d526442143;

            return isset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder58ecd21fa256d526442143;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, '__unset', array('name' => $name), $this->initializer58ecd21fa25af264651438);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder58ecd21fa256d526442143;

            unset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder58ecd21fa256d526442143;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, '__clone', array(), $this->initializer58ecd21fa25af264651438);

        $this->valueHolder58ecd21fa256d526442143 = clone $this->valueHolder58ecd21fa256d526442143;
    }

    public function __sleep()
    {
        $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, '__sleep', array(), $this->initializer58ecd21fa25af264651438);

        return array('valueHolder58ecd21fa256d526442143');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\Doctrine\ORM\EntityManager $instance) {
            unset($instance->config, $instance->conn, $instance->metadataFactory, $instance->unitOfWork, $instance->eventManager, $instance->proxyFactory, $instance->repositoryFactory, $instance->expressionBuilder, $instance->closed, $instance->filterCollection, $instance->cache);
        }, $this, 'Doctrine\\ORM\\EntityManager')->__invoke($this);
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer58ecd21fa25af264651438 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer58ecd21fa25af264651438;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy() : bool
    {
        return $this->initializer58ecd21fa25af264651438 && $this->initializer58ecd21fa25af264651438->__invoke($this->valueHolder58ecd21fa256d526442143, $this, 'initializeProxy', array(), $this->initializer58ecd21fa25af264651438);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHolder58ecd21fa256d526442143;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder58ecd21fa256d526442143;
    }


}

class FOSRestBundleSerializerJMSSerializerAdapter_000000004b51165c000000000f6225f6877f40b66baaf9ca0d0afe40b8a3d26d extends \FOS\RestBundle\Serializer\JMSSerializerAdapter implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder58ecd21fbb2e0805910993 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer58ecd21fbb31f132032801 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties58ecd21fbb23f166762578 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function serialize($data, $format, $context = null)
    {
        $this->initializer58ecd21fbb31f132032801 && $this->initializer58ecd21fbb31f132032801->__invoke($this->valueHolder58ecd21fbb2e0805910993, $this, 'serialize', array('data' => $data, 'format' => $format, 'context' => $context), $this->initializer58ecd21fbb31f132032801);

        return $this->valueHolder58ecd21fbb2e0805910993->serialize($data, $format, $context);
    }

    /**
     * {@inheritDoc}
     */
    public function deserialize($data, $type, $format, $context = null)
    {
        $this->initializer58ecd21fbb31f132032801 && $this->initializer58ecd21fbb31f132032801->__invoke($this->valueHolder58ecd21fbb2e0805910993, $this, 'deserialize', array('data' => $data, 'type' => $type, 'format' => $format, 'context' => $context), $this->initializer58ecd21fbb31f132032801);

        return $this->valueHolder58ecd21fbb2e0805910993->deserialize($data, $type, $format, $context);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?: $reflection = new \ReflectionClass(__CLASS__);
        $instance = (new \ReflectionClass(get_class()))->newInstanceWithoutConstructor();

        \Closure::bind(function (\FOS\RestBundle\Serializer\JMSSerializerAdapter $instance) {
            unset($instance->serializer);
        }, $instance, 'FOS\\RestBundle\\Serializer\\JMSSerializerAdapter')->__invoke($instance);

        $instance->initializer58ecd21fbb31f132032801 = $initializer;

        return $instance;
    }

    /**
     * {@inheritDoc}
     */
    public function __construct(\JMS\Serializer\SerializerInterface $serializer)
    {
        static $reflection;

        if (! $this->valueHolder58ecd21fbb2e0805910993) {
            $reflection = $reflection ?: new \ReflectionClass('FOS\\RestBundle\\Serializer\\JMSSerializerAdapter');
            $this->valueHolder58ecd21fbb2e0805910993 = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\FOS\RestBundle\Serializer\JMSSerializerAdapter $instance) {
            unset($instance->serializer);
        }, $this, 'FOS\\RestBundle\\Serializer\\JMSSerializerAdapter')->__invoke($this);

        }

        $this->valueHolder58ecd21fbb2e0805910993->__construct($serializer);
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer58ecd21fbb31f132032801 && $this->initializer58ecd21fbb31f132032801->__invoke($this->valueHolder58ecd21fbb2e0805910993, $this, '__get', ['name' => $name], $this->initializer58ecd21fbb31f132032801);

        if (isset(self::$publicProperties58ecd21fbb23f166762578[$name])) {
            return $this->valueHolder58ecd21fbb2e0805910993->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder58ecd21fbb2e0805910993;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;
            return;
        }

        $targetObject = $this->valueHolder58ecd21fbb2e0805910993;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer58ecd21fbb31f132032801 && $this->initializer58ecd21fbb31f132032801->__invoke($this->valueHolder58ecd21fbb2e0805910993, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer58ecd21fbb31f132032801);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder58ecd21fbb2e0805910993;

            return $targetObject->$name = $value;
            return;
        }

        $targetObject = $this->valueHolder58ecd21fbb2e0805910993;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer58ecd21fbb31f132032801 && $this->initializer58ecd21fbb31f132032801->__invoke($this->valueHolder58ecd21fbb2e0805910993, $this, '__isset', array('name' => $name), $this->initializer58ecd21fbb31f132032801);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder58ecd21fbb2e0805910993;

            return isset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder58ecd21fbb2e0805910993;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer58ecd21fbb31f132032801 && $this->initializer58ecd21fbb31f132032801->__invoke($this->valueHolder58ecd21fbb2e0805910993, $this, '__unset', array('name' => $name), $this->initializer58ecd21fbb31f132032801);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder58ecd21fbb2e0805910993;

            unset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder58ecd21fbb2e0805910993;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer58ecd21fbb31f132032801 && $this->initializer58ecd21fbb31f132032801->__invoke($this->valueHolder58ecd21fbb2e0805910993, $this, '__clone', array(), $this->initializer58ecd21fbb31f132032801);

        $this->valueHolder58ecd21fbb2e0805910993 = clone $this->valueHolder58ecd21fbb2e0805910993;
    }

    public function __sleep()
    {
        $this->initializer58ecd21fbb31f132032801 && $this->initializer58ecd21fbb31f132032801->__invoke($this->valueHolder58ecd21fbb2e0805910993, $this, '__sleep', array(), $this->initializer58ecd21fbb31f132032801);

        return array('valueHolder58ecd21fbb2e0805910993');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\FOS\RestBundle\Serializer\JMSSerializerAdapter $instance) {
            unset($instance->serializer);
        }, $this, 'FOS\\RestBundle\\Serializer\\JMSSerializerAdapter')->__invoke($this);
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer58ecd21fbb31f132032801 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer58ecd21fbb31f132032801;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy() : bool
    {
        return $this->initializer58ecd21fbb31f132032801 && $this->initializer58ecd21fbb31f132032801->__invoke($this->valueHolder58ecd21fbb2e0805910993, $this, 'initializeProxy', array(), $this->initializer58ecd21fbb31f132032801);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHolder58ecd21fbb2e0805910993;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder58ecd21fbb2e0805910993;
    }


}
